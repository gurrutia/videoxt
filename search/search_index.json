{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"VideoXT","text":"<p>VideoXT is a simple library and CLI tool for extracting audio, individual frames, short clips and GIFs from videos.</p> <ul> <li>VideoXT</li> <li>Installation</li> <li>Usage</li> <li>Contributing</li> <li>Used By</li> </ul>"},{"location":"#installation","title":"Installation","text":"<p>Available on pypi.</p> <pre><code>pip install videoxt\n</code></pre>"},{"location":"#usage","title":"Usage","text":"<p>From the command-line:</p> <pre><code># extract audio from a video file (default: 'mp3')\n$ videoxt audio MyVideo.mp4\n{\"video\": {\"filepath\": \"C:/Users/gurrutia/MyVideo.mp4\", ...}, \"start_time\": 0, ...}\n# extracting audio...\n{\"success\": true, ...}\n$ ls\nMyVideo.mp4  MyVideo.mp3\n</code></pre> <p>As a library:</p> <pre><code>$ python\n&gt;&gt;&gt; # extract all frames from a video file (default: 'jpg')\n&gt;&gt;&gt; import videoxt\n&gt;&gt;&gt; filepath = 'C:/Users/gurrutia/MyVideo.mp4'  # or &lt;class 'pathlib.Path'&gt;\n&gt;&gt;&gt; result = videoxt.extract_frames(filepath)  # or videoxt.extract('frames', filepath)\n&gt;&gt;&gt; result.destpath\npathlib.Path('C:/Users/gurrutia/MyVideo.mp4_frames')\n&gt;&gt;&gt; result.elapsed_time\n3.14159265358979323\n&gt;&gt;&gt; len(list(result.destpath.glob('*.jpg'))) # default: 'jpg'\n100  # number of frames extracted\n&gt;&gt;&gt; result.json()\n{'success': True, ...}\n</code></pre>"},{"location":"#contributing","title":"Contributing","text":"<p>For guidance on setting up a development environment and to make a contribution, see the contributing guidelines.</p>"},{"location":"#used-by","title":"Used By","text":"<ul> <li>Best Buy Teen Tech Center at Grand St. Settlement, allowing filmmaking instructors to gather film stills that aid in constructing lesson plans for their youth workshops. Download a workshop example here.</li> </ul>"},{"location":"cli/","title":"CLI","text":""},{"location":"cli/#command-line-usage","title":"Command-line Usage","text":"<pre><code>$ videoxt --help\nusage: videoxt [-h] [--version] {audio,clip,frames,gif} ...\n\nExtract audio, individual frames, short clips and GIFs from videos.\n\npositional arguments:\n  {audio,clip,frames,gif}\n    audio               Extract audio from a video file.\n    clip                Extract a short clip from a video file as 'mp4'.\n    frames              Extract individual frames from a video and save them as images.\n    gif                 Create a GIF from a video between two specified points.\n\noptions:\n  -h, --help            show this help message and exit\n  --version, -V         show program's version number and exit\n</code></pre>"},{"location":"cli/#audio","title":"Audio","text":"<pre><code>$ videoxt audio --help\nusage: videoxt audio [-h] [--start-time] [--stop-time] [--destdir] [--filename] [--quiet] [--overwrite] [--fps] [--volume] [--normalize] [--speed] [--bounce] [--reverse]\n                     [--audio-format]\n                     filepath\n\npositional arguments:\n  filepath              Path to the video file with extension.\n\noptions:\n  -h, --help            show this help message and exit\n  --start-time , -s     Time to start extraction. Can be a number representing seconds or a timestamp (Ex: --start-time 0:45 or -s 45).\n  --stop-time , -S      Time to stop extraction. Can be a number representing seconds or a timestamp (Ex: --stop-time 1:30 or -S 90).\n  --destdir , -d        Specify the directory you want to save output to. If not provided, media is saved in the directory of the input video file.\n  --filename , -fn      Set the name of the output media file(s), without the extension. If not provided, the video's filename is used.\n  --quiet, -q           Disable extraction details from being printed to the console.\n  --overwrite, -ov      Overwrite the output file(s) if they already exist.\n  --fps , -f            Manually set the video's frames per second (FPS). Helpful if the FPS is not read accurately by OpenCV. Use with caution.\n  --volume , -v         Increase or decrease the output audio volume by a factor of N.\n  --normalize           Normalize the audio output to a maximum of 0dB.\n  --speed , -sp         Increase or decrease the speed of the output by a factor of N.\n  --bounce              Make the output bounce back-and-forth, boomerang style.\n  --reverse             Reverse the output.\n  --audio-format , -af\n                        Set the extracted audio file format. Default is 'mp3'.\n</code></pre>"},{"location":"cli/#frames","title":"Frames","text":"<pre><code>$ videoxt frames --help\nusage: videoxt frames [-h] [--start-time] [--stop-time] [--destdir] [--filename] [--quiet] [--overwrite] [--fps] [--dimensions] [--resize] [--rotate] [--monochrome]\n                      [--image-format] [--capture-rate]\n                      filepath\n\npositional arguments:\n  filepath              Path to the video file with extension.\n\noptions:\n  -h, --help            show this help message and exit\n  --start-time , -s     Time to start extraction. Can be a number representing seconds or a timestamp (Ex: --start-time 0:45 or -s 45).\n  --stop-time , -S      Time to stop extraction. Can be a number representing seconds or a timestamp (Ex: --stop-time 1:30 or -S 90).\n  --destdir , -d        Specify the directory you want to save output to. If not provided, media is saved in the directory of the input video file.\n  --filename , -fn      Set the name of the output media file(s), without the extension. If not provided, the video's filename is used.\n  --quiet, -q           Disable extraction details from being printed to the console.\n  --overwrite, -ov      Overwrite the output file(s) if they already exist.\n  --fps , -f            Manually set the video's frames per second (FPS). Helpful if the FPS is not read accurately by OpenCV. Use with caution.\n  --dimensions , -dm    Resize the output to a specific width and height (Ex: -dm 1920x1080).\n  --resize , -rs        Increase or decrease the dimensions of the output by a factor of N.\n  --rotate , -rt        Rotate the output by 90, 180, or 270 degrees.\n  --monochrome          Apply a black-and-white filter to the output.\n  --image-format , -if\n                        Set the image format to save the frames as. Default is 'jpg'.\n  --capture-rate , -cr\n                        Capture every Nth video frame. Default is 1, which captures every frame.\n</code></pre>"},{"location":"cli/#gif","title":"GIF","text":"<pre><code>$ videoxt gif --help\nusage: videoxt gif [-h] [--start-time] [--stop-time] [--destdir] [--filename] [--quiet] [--overwrite] [--fps] [--dimensions] [--resize] [--rotate] [--monochrome] [--speed]\n                   [--bounce] [--reverse]\n                   filepath\n\npositional arguments:\n  filepath             Path to the video file with extension.\n\noptions:\n  -h, --help           show this help message and exit\n  --start-time , -s    Time to start extraction. Can be a number representing seconds or a timestamp (Ex: --start-time 0:45 or -s 45).\n  --stop-time , -S     Time to stop extraction. Can be a number representing seconds or a timestamp (Ex: --stop-time 1:30 or -S 90).\n  --destdir , -d       Specify the directory you want to save output to. If not provided, media is saved in the directory of the input video file.\n  --filename , -fn     Set the name of the output media file(s), without the extension. If not provided, the video's filename is used.\n  --quiet, -q          Disable extraction details from being printed to the console.\n  --overwrite, -ov     Overwrite the output file(s) if they already exist.\n  --fps , -f           Manually set the video's frames per second (FPS). Helpful if the FPS is not read accurately by OpenCV. Use with caution.\n  --dimensions , -dm   Resize the output to a specific width and height (Ex: -dm 1920x1080).\n  --resize , -rs       Increase or decrease the dimensions of the output by a factor of N.\n  --rotate , -rt       Rotate the output by 90, 180, or 270 degrees.\n  --monochrome         Apply a black-and-white filter to the output.\n  --speed , -sp        Increase or decrease the speed of the output by a factor of N.\n  --bounce             Make the output bounce back-and-forth, boomerang style.\n  --reverse            Reverse the output.\n</code></pre>"},{"location":"cli/#clip","title":"Clip","text":"<pre><code>$ videoxt clip --help\nusage: videoxt clip [-h] [--start-time] [--stop-time] [--destdir] [--filename] [--quiet] [--overwrite] [--fps] [--volume] [--normalize] [--dimensions] [--resize] [--rotate]\n                    [--monochrome] [--speed] [--bounce] [--reverse]\n                    filepath\n\npositional arguments:\n  filepath             Path to the video file with extension.\n\noptions:\n  -h, --help           show this help message and exit\n  --start-time , -s    Time to start extraction. Can be a number representing seconds or a timestamp (Ex: --start-time 0:45 or -s 45).\n  --stop-time , -S     Time to stop extraction. Can be a number representing seconds or a timestamp (Ex: --stop-time 1:30 or -S 90).\n  --destdir , -d       Specify the directory you want to save output to. If not provided, media is saved in the directory of the input video file.\n  --filename , -fn     Set the name of the output media file(s), without the extension. If not provided, the video's filename is used.\n  --quiet, -q          Disable extraction details from being printed to the console.\n  --overwrite, -ov     Overwrite the output file(s) if they already exist.\n  --fps , -f           Manually set the video's frames per second (FPS). Helpful if the FPS is not read accurately by OpenCV. Use with caution.\n  --volume , -v        Increase or decrease the output audio volume by a factor of N.\n  --normalize          Normalize the audio output to a maximum of 0dB.\n  --dimensions , -dm   Resize the output to a specific width and height (Ex: -dm 1920x1080).\n  --resize , -rs       Increase or decrease the dimensions of the output by a factor of N.\n  --rotate , -rt       Rotate the output by 90, 180, or 270 degrees.\n  --monochrome         Apply a black-and-white filter to the output.\n  --speed , -sp        Increase or decrease the speed of the output by a factor of N.\n  --bounce             Make the output bounce back-and-forth, boomerang style.\n  --reverse            Reverse the output.\n</code></pre>"},{"location":"examples/","title":"Examples","text":""},{"location":"examples/#basic-examples","title":"Basic Examples","text":"<p>From the command-line:</p> <pre><code># extract audio from a video file (default: 'mp3')\n$ videoxt audio MyVideo.mp4\n{\"video\": {\"filepath\": \"C:/Users/gurrutia/MyVideo.mp4\", ...}, \"start_time\": 0, ...}\n# extracting audio...\n{\"success\": true, ...}\n$ ls\nMyVideo.mp4  MyVideo.mp3\n</code></pre> <p>As a library:</p> <pre><code>$ python\n&gt;&gt;&gt; # extract all frames from a video file (default: 'jpg')\n&gt;&gt;&gt; import videoxt\n&gt;&gt;&gt; filepath = 'C:/Users/gurrutia/MyVideo.mp4'  # or &lt;class 'pathlib.Path'&gt;\n&gt;&gt;&gt; result = videoxt.extract_frames(filepath)  # or videoxt.extract('frames', filepath)\n&gt;&gt;&gt; result.destpath\npathlib.Path('C:/Users/gurrutia/MyVideo.mp4_frames')\n&gt;&gt;&gt; result.elapsed_time\n3.14159265358979323\n&gt;&gt;&gt; len(list(result.destpath.glob('*.jpg'))) # default: 'jpg'\n100  # number of frames extracted\n&gt;&gt;&gt; result.json()\n{'success': True, ...}\n</code></pre> <p>NOTE: All command-line examples are run from the directory where the video is located. You can run the commands from any directory by specifying the full path to the video.</p>"},{"location":"examples/#frames-extract-every-30th-frame","title":"Frames: Extract every 30th frame...","text":"<p>Extract every 30th frame of a video, save the frames as <code>png</code> images, set the dimensions of the images to 800x600, apply a monochrome (black and white) filter to the images and print extraction details to the console.</p> <pre><code>import videoxt\nfrom pathlib import Path\n\nresult = videoxt.extract_frames(\n  Path('C:/Users/gurrutia/Videos/MyVideo.avi'),\n  capture_rate=30,\n  image_format='png',  # default: 'mp3'\n  dimensions=(800, 600),\n  monochrome=True,\n  verbose=True\n)\n...\n</code></pre>"},{"location":"examples/#cli-equivalent","title":"CLI equivalent","text":"<pre><code>$ videoxt frames MyVideo.avi --capture-rate 30 --image-format png --dimensions 800x600 --monochrome\n# or...\n$ videoxt frames MyVideo.avi -cr 30 -if png --dm 800x600 --monochrome\n</code></pre>"},{"location":"examples/#audio-extract-from-a-list-of-videos","title":"Audio: Extract from a list of videos...","text":"<p>Extract and normalize the audio from a list of videos, save the audio as <code>wav</code> files to a directory named <code>to_sample</code> that exists in the same directory as the video file.</p> <pre><code>import videoxt\n\nfilepaths = [\n  'C:/Users/gurrutia/Videos/First.mp4',\n  'C:/Users/gurrutia/Videos/Second.mp4',\n  'C:/Users/gurrutia/Videos/Third.mp4',\n]\n\nfor filepath in filepaths:\n    result = videoxt.extract_audio(\n        filepath,\n        audio_format='wav',\n        destdir=filepath.parent / 'to_sample',  # directory must exist\n        normalize=True\n    )\n    ...\n</code></pre>"},{"location":"examples/#cli-equivalent_1","title":"CLI equivalent","text":"<pre><code>$ videoxt audio First.mp4 --audio-format wav --destdir to_sample --normalize\n# or...\n$ videoxt audio First.mp4 -af wav -d to_sample --normalize\n</code></pre>"},{"location":"examples/#gif-create-a-gif-between","title":"GIF: Create a gif between...","text":"<p>Create a gif 1:08 and 1:10 of a video, reduce its dimensions by 50%, decrease the gif speed by 25%, and add a bouncing effect.</p> <pre><code>import videoxt\n\nresult = videoxt.extract_gif(\n    'C:/Users/gurrutia/Videos/MyVideo.mp4',\n    start_time='1:08',  # or 68.0\n    stop_time='1:10',   # or 70.0\n    resize=0.5,\n    speed=0.75,\n    bounce=True\n)\n...\n</code></pre>"},{"location":"examples/#cli-equivalent_2","title":"CLI equivalent","text":"<pre><code>$ videoxt gif MyVideo.mp4 --start-time 1:08 --stop-time 1:10 --resize 0.5 --speed 0.75 --bounce\n# or...\n$ videoxt gif MyVideo.mp4 -s 1:08 -S 1:10 -rs 0.5 -sp 0.75 --bounce\n</code></pre>"},{"location":"examples/#clip-create-a-clip-of-the-initial-5-seconds","title":"Clip: Create a clip of the initial 5 seconds...","text":"<p>Create a clip of the initial 5 seconds of a video, rotate the clip 180 degrees, and save the file as <code>MyVideoRotated.mp4</code>.</p> <pre><code>import videoxt\n\nresult = videoxt.extract_clip(\n  filepath='C:/Users/gurrutia/Videos/MyVideo.mp4',\n  stop_time=5,   # or '0:05'\n  rotate=180,\n  filename='MyVideoRotated'  # default extension: 'mp4'\n)\nresult.destpath # pathlib.Path('C:/Users/gurrutia/Videos/MyVideoRotated.mp4')\n...\n</code></pre>"},{"location":"examples/#cli-equivalent_3","title":"CLI equivalent","text":"<pre><code>$ videoxt clip MyVideo.mp4 --stop-time 5 --rotate 180 --filename MyVideoRotated\n# or...\n$ videoxt clip MyVideo.mp4 -S 5 -rt 180 -fn MyVideoRotated\n</code></pre>"},{"location":"docs/api/","title":"api","text":"<p>Simple interface for extracting audio, clips, frames, and gifs from a video file.</p>"},{"location":"docs/api/#videoxt.api.extract","title":"extract","text":"<pre><code>extract(method, filepath, skip_validation=False, **options)\n</code></pre> <p>Extract audio, individual frames, short clips and GIFs from videos.</p> <p>See the documentation for list of options, or:</p> <ul> <li><code>extract_audio</code>: Extract audio from a video file.</li> <li><code>extract_clip</code>: Extract a short clip from a video file as <code>mp4</code>.</li> <li><code>extract_frames</code>: Extract individual frames from a video and save them as images.</li> <li><code>extract_gif</code>: Create a GIF from a video between two specified points.</li> </ul>"},{"location":"docs/api/#videoxt.api.extract--args","title":"Args:","text":"<pre><code>`method` (str):\n    The extraction method to use (\"audio\", \"clip\", \"frames\", \"gif\").\n`filepath` (Path | str):\n    Path to the video file with extension.\n`skip_validation` (bool):\n    If True, skips validation of the extraction options. This can slightly\n    improve speed, but it is not recommended unless you are sure that the\n    options are valid.\n`**options` (dict[str, Any] | None):\n    Extraction options specific to the chosen extraction method.\n</code></pre>"},{"location":"docs/api/#videoxt.api.extract--returns","title":"Returns:","text":"<pre><code>`Result`: A dataclass containing the extraction details.\n</code></pre>"},{"location":"docs/api/#videoxt.api.extract--raises","title":"Raises:","text":"<pre><code>`InvalidExtractionMethod`:\n    If the extraction method is neither \"audio\", \"clip\", \"frames\", nor \"gif\".\n</code></pre> Source code in <code>videoxt/api.py</code> <pre><code>def extract(\n    method: str,\n    filepath: Path | str,\n    skip_validation: bool = False,\n    **options: dict[str, Any] | None,\n) -&gt; Result:\n    \"\"\"\n    Extract audio, individual frames, short clips and GIFs from videos.\n\n    See the documentation for list of options, or:\n\n    - `extract_audio`: Extract audio from a video file.\n    - `extract_clip`: Extract a short clip from a video file as `mp4`.\n    - `extract_frames`: Extract individual frames from a video and save them as images.\n    - `extract_gif`: Create a GIF from a video between two specified points.\n\n    Args:\n    -----\n        `method` (str):\n            The extraction method to use (\"audio\", \"clip\", \"frames\", \"gif\").\n        `filepath` (Path | str):\n            Path to the video file with extension.\n        `skip_validation` (bool):\n            If True, skips validation of the extraction options. This can slightly\n            improve speed, but it is not recommended unless you are sure that the\n            options are valid.\n        `**options` (dict[str, Any] | None):\n            Extraction options specific to the chosen extraction method.\n\n    Returns:\n    -----\n        `Result`: A dataclass containing the extraction details.\n\n    Raises:\n    -----\n        `InvalidExtractionMethod`:\n            If the extraction method is neither \"audio\", \"clip\", \"frames\", nor \"gif\".\n    \"\"\"\n    try:\n        method_enum = ExtractionMethod[method.upper()]\n\n    except KeyError:\n        raise InvalidExtractionMethod(\n            f\"Invalid extraction method: {method}. \"\n            f\"Choices are {', '.join([em.value for em in ExtractionMethod])}.\"\n        )\n\n    else:\n        handler = ExtractionHandler(method_enum)\n        return handler.execute(filepath, options, skip_validation=skip_validation)\n</code></pre>"},{"location":"docs/api/#videoxt.api.extract_audio","title":"extract_audio","text":"<pre><code>extract_audio(filepath, start_time=0, stop_time=None, destdir=None, filename=None, verbose=False, overwrite=False, fps=None, audio_format='mp3', speed=1, bounce=False, reverse=False, volume=1, normalize=False)\n</code></pre> <p>Extract audio from a video file.</p>"},{"location":"docs/api/#videoxt.api.extract_audio--args","title":"Args:","text":"<pre><code>`filepath` (Path | str):\n    Path to the video file with extension.\n`start_time` (float | int | str):\n    Specify the extraction's start time in seconds, or as a string in \"HH:MM:SS\"\n    format. Defaults to 0 if not specified.\n`stop_time` (float | int | str | None):\n    Specify the extraction's stop time in seconds, or as a string in \"HH:MM:SS\"\n    format. Defaults to the video duration if not specified.\n`destdir` (Path | None):\n    Specify the directory you want to save output to. Defaults to the video's\n    directory if not specified.\n`filename` (str | None):\n    Specify the name of the extracted file(s). Defaults to the video filename\n    if not specified.\n`verbose` (bool):\n    If True, the prepared request and extraction results will be printed as JSON\n    to console. Defaults to False if not specified.\n`overwrite` (bool):\n    If True, permits overwriting the destination path if the file or directory\n    already exists. Defaults to False if not specified.\n`fps` (float | None):\n    Override the frames per second (fps) value obtained from `cv2` when reading\n    the video. This value is used to set the start and stop frames for the\n    extraction range. This option should be used only in rare cases where `cv2`\n    fails to accurately read the fps. If not specified, it defaults to the fps\n    of the video as read by `cv2`.\n`audio_format` (str):\n    Set the extracted audio file format. Defaults to 'mp3' if not specified.\n    See: `videoxt.constants.SUPPORTED_AUDIO_FORMATS`.\n`speed` (float):\n    Set the speed of the extracted audio. A value of 0.5 will halve the speed of\n    the extracted audio. Defaults to 1.0 if not specified (no change).\n`bounce` (bool):\n    If True, bounce the extracted audio bommerang-style. Defaults to False if\n    not specified.\n`reverse` (bool):\n    If True, reverse the extracted audio. Defaults to False if not specified.\n`volume` (float):\n    Set the volume of the extracted audio. A value of 0.5 will halve the volume\n    of the extracted audio. Defaults to 1.0 if not specified (no change).\n`normalize` (bool):\n    If True, normalize the audio. Normalization adjusts the gain of the audio to\n    ensure consistent levels, preventing distortion and enhancing clarity in\n    some cases. Defaults to False if not specified.\n</code></pre>"},{"location":"docs/api/#videoxt.api.extract_audio--returns","title":"Returns:","text":"<pre><code>`Result`: A dataclass containing the extraction details.\n</code></pre> Source code in <code>videoxt/api.py</code> <pre><code>def extract_audio(\n    filepath: Path | str,\n    start_time: float | int | str = 0,\n    stop_time: float | int | str | None = None,\n    destdir: Path | str | None = None,\n    filename: str | None = None,\n    verbose: bool = False,\n    overwrite: bool = False,\n    fps: float | None = None,\n    audio_format: str = \"mp3\",\n    speed: float = 1,\n    bounce: bool = False,\n    reverse: bool = False,\n    volume: float = 1,\n    normalize: bool = False,\n) -&gt; Result:\n    \"\"\"\n    Extract audio from a video file.\n\n    Args:\n    -----\n        `filepath` (Path | str):\n            Path to the video file with extension.\n        `start_time` (float | int | str):\n            Specify the extraction's start time in seconds, or as a string in \"HH:MM:SS\"\n            format. Defaults to 0 if not specified.\n        `stop_time` (float | int | str | None):\n            Specify the extraction's stop time in seconds, or as a string in \"HH:MM:SS\"\n            format. Defaults to the video duration if not specified.\n        `destdir` (Path | None):\n            Specify the directory you want to save output to. Defaults to the video's\n            directory if not specified.\n        `filename` (str | None):\n            Specify the name of the extracted file(s). Defaults to the video filename\n            if not specified.\n        `verbose` (bool):\n            If True, the prepared request and extraction results will be printed as JSON\n            to console. Defaults to False if not specified.\n        `overwrite` (bool):\n            If True, permits overwriting the destination path if the file or directory\n            already exists. Defaults to False if not specified.\n        `fps` (float | None):\n            Override the frames per second (fps) value obtained from `cv2` when reading\n            the video. This value is used to set the start and stop frames for the\n            extraction range. This option should be used only in rare cases where `cv2`\n            fails to accurately read the fps. If not specified, it defaults to the fps\n            of the video as read by `cv2`.\n        `audio_format` (str):\n            Set the extracted audio file format. Defaults to 'mp3' if not specified.\n            See: `videoxt.constants.SUPPORTED_AUDIO_FORMATS`.\n        `speed` (float):\n            Set the speed of the extracted audio. A value of 0.5 will halve the speed of\n            the extracted audio. Defaults to 1.0 if not specified (no change).\n        `bounce` (bool):\n            If True, bounce the extracted audio bommerang-style. Defaults to False if\n            not specified.\n        `reverse` (bool):\n            If True, reverse the extracted audio. Defaults to False if not specified.\n        `volume` (float):\n            Set the volume of the extracted audio. A value of 0.5 will halve the volume\n            of the extracted audio. Defaults to 1.0 if not specified (no change).\n        `normalize` (bool):\n            If True, normalize the audio. Normalization adjusts the gain of the audio to\n            ensure consistent levels, preventing distortion and enhancing clarity in\n            some cases. Defaults to False if not specified.\n\n    Returns:\n    -----\n        `Result`: A dataclass containing the extraction details.\n    \"\"\"\n    options = {\n        \"start_time\": start_time,\n        \"stop_time\": stop_time,\n        \"destdir\": destdir,\n        \"filename\": filename,\n        \"verbose\": verbose,\n        \"overwrite\": overwrite,\n        \"fps\": fps,\n        \"audio_format\": audio_format,\n        \"speed\": speed,\n        \"bounce\": bounce,\n        \"reverse\": reverse,\n        \"volume\": volume,\n        \"normalize\": normalize,\n    }\n\n    handler = ExtractionHandler(ExtractionMethod.AUDIO)\n    return handler.execute(filepath, options)\n</code></pre>"},{"location":"docs/api/#videoxt.api.extract_clip","title":"extract_clip","text":"<pre><code>extract_clip(filepath, start_time=0, stop_time=None, destdir=None, filename=None, verbose=False, overwrite=False, fps=None, dimensions=None, resize=1.0, rotate=0, speed=1.0, bounce=False, reverse=False, monochrome=False, volume=0, normalize=False)\n</code></pre> <p>Extract a clip from a video file as <code>mp4</code>.</p> <p>Recommended usage: Set a short extraction range. The process can be slow for long or high-resolution videos.</p>"},{"location":"docs/api/#videoxt.api.extract_clip--args","title":"Args:","text":"<pre><code>`filepath` (Path | str):\n    Path to the video file with extension.\n`start_time` (float | int | str):\n    Specify the extraction's start time in seconds, or as a string in \"HH:MM:SS\"\n    format. Defaults to 0 if not specified.\n`stop_time` (float | int | str | None):\n    Specify the extraction's stop time in seconds, or as a string in \"HH:MM:SS\"\n    format. Defaults to the video duration if not specified.\n`destdir` (Path | None):\n    Specify the directory you want to save output to. Defaults to the video's\n    directory if not specified.\n`filename` (str | None):\n    Specify the name of the extracted file(s). Defaults to the video filename\n    if not specified.\n`verbose` (bool):\n    If True, the prepared request and extraction results will be printed as JSON\n    to console. Defaults to False if not specified.\n`overwrite` (bool):\n    If True, permits overwriting the destination path if the file or directory\n    already exists. Defaults to False if not specified.\n`fps` (float | None):\n    Override the frames per second (fps) value obtained from `cv2` when reading\n    the video. This value is used to set the start and stop frames for the\n    extraction range. This option should be used only in rare cases where `cv2`\n    fails to accurately read the fps. If not specified, it defaults to the fps\n    of the video as read by `cv2`.\n`dimensions` (tuple[int, int] | None):\n    Specify the dimensions (frame width, frame height) of the clip. Defaults to\n    the video dimensions if not specified.\n`resize` (float):\n    Resize the dimensions of the clip by a factor of `n`. A value of 0.5\n    will halve the dimensions. If you specify `dimensions`, `resize` will apply\n    to the dimensions you specify. Defaults to 1.0 if not specified (no change).\n`rotate` (int):\n    Rotate the clip by `n` degrees. Allowed values: 0, 90, 180 or 270. Defaults\n    to 0 if not specified (no change).\n`speed` (float):\n    Set the speed of the extracted clip. A value of 0.5 will halve the playback\n    speed of the clip. Defaults to 1.0 if not specified (no change).\n`bounce` (bool):\n    If True, bounce the extracted clip bommerang-style. Defaults to False if\n    not specified.\n`reverse` (bool):\n    If True, reverse the extracted clip. Defaults to False if not specified.\n`monochrome` (bool):\n    If True, apply a black-and-white filter to the clip. Defaults to False if\n    not specified.\n`volume` (float):\n    Set the volume of the extracted clip's audio. A value of 0.5 will halve the\n    volume of the clip's audio. Defaults to 1.0 if not specified (no change).\n`normalize` (bool):\n    If True, normalize the audio. Normalization adjusts the gain of the audio to\n    ensure consistent levels, preventing distortion and enhancing clarity in\n    some cases. Defaults to False if not specified.\n</code></pre>"},{"location":"docs/api/#videoxt.api.extract_clip--returns","title":"Returns:","text":"<pre><code>`Result`: A dataclass containing the extraction details.\n</code></pre> Source code in <code>videoxt/api.py</code> <pre><code>def extract_clip(\n    filepath: Path | str,\n    start_time: float | int | str = 0,\n    stop_time: float | int | str | None = None,\n    destdir: Path | str | None = None,\n    filename: str | None = None,\n    verbose: bool = False,\n    overwrite: bool = False,\n    fps: float | None = None,\n    dimensions: tuple[int, int] | None = None,\n    resize: float = 1.0,\n    rotate: int = 0,\n    speed: float = 1.0,\n    bounce: bool = False,\n    reverse: bool = False,\n    monochrome: bool = False,\n    volume: float = 0,\n    normalize: bool = False,\n) -&gt; Result:\n    \"\"\"\n    Extract a clip from a video file as `mp4`.\n\n    Recommended usage: Set a short extraction range. The process can be slow for long\n    or high-resolution videos.\n\n    Args:\n    -----\n        `filepath` (Path | str):\n            Path to the video file with extension.\n        `start_time` (float | int | str):\n            Specify the extraction's start time in seconds, or as a string in \"HH:MM:SS\"\n            format. Defaults to 0 if not specified.\n        `stop_time` (float | int | str | None):\n            Specify the extraction's stop time in seconds, or as a string in \"HH:MM:SS\"\n            format. Defaults to the video duration if not specified.\n        `destdir` (Path | None):\n            Specify the directory you want to save output to. Defaults to the video's\n            directory if not specified.\n        `filename` (str | None):\n            Specify the name of the extracted file(s). Defaults to the video filename\n            if not specified.\n        `verbose` (bool):\n            If True, the prepared request and extraction results will be printed as JSON\n            to console. Defaults to False if not specified.\n        `overwrite` (bool):\n            If True, permits overwriting the destination path if the file or directory\n            already exists. Defaults to False if not specified.\n        `fps` (float | None):\n            Override the frames per second (fps) value obtained from `cv2` when reading\n            the video. This value is used to set the start and stop frames for the\n            extraction range. This option should be used only in rare cases where `cv2`\n            fails to accurately read the fps. If not specified, it defaults to the fps\n            of the video as read by `cv2`.\n        `dimensions` (tuple[int, int] | None):\n            Specify the dimensions (frame width, frame height) of the clip. Defaults to\n            the video dimensions if not specified.\n        `resize` (float):\n            Resize the dimensions of the clip by a factor of `n`. A value of 0.5\n            will halve the dimensions. If you specify `dimensions`, `resize` will apply\n            to the dimensions you specify. Defaults to 1.0 if not specified (no change).\n        `rotate` (int):\n            Rotate the clip by `n` degrees. Allowed values: 0, 90, 180 or 270. Defaults\n            to 0 if not specified (no change).\n        `speed` (float):\n            Set the speed of the extracted clip. A value of 0.5 will halve the playback\n            speed of the clip. Defaults to 1.0 if not specified (no change).\n        `bounce` (bool):\n            If True, bounce the extracted clip bommerang-style. Defaults to False if\n            not specified.\n        `reverse` (bool):\n            If True, reverse the extracted clip. Defaults to False if not specified.\n        `monochrome` (bool):\n            If True, apply a black-and-white filter to the clip. Defaults to False if\n            not specified.\n        `volume` (float):\n            Set the volume of the extracted clip's audio. A value of 0.5 will halve the\n            volume of the clip's audio. Defaults to 1.0 if not specified (no change).\n        `normalize` (bool):\n            If True, normalize the audio. Normalization adjusts the gain of the audio to\n            ensure consistent levels, preventing distortion and enhancing clarity in\n            some cases. Defaults to False if not specified.\n\n    Returns:\n    -----\n        `Result`: A dataclass containing the extraction details.\n    \"\"\"\n    options = {\n        \"start_time\": start_time,\n        \"stop_time\": stop_time,\n        \"destdir\": destdir,\n        \"filename\": filename,\n        \"verbose\": verbose,\n        \"overwrite\": overwrite,\n        \"fps\": fps,\n        \"dimensions\": dimensions,\n        \"resize\": resize,\n        \"rotate\": rotate,\n        \"speed\": speed,\n        \"bounce\": bounce,\n        \"reverse\": reverse,\n        \"monochrome\": monochrome,\n        \"volume\": volume,\n        \"normalize\": normalize,\n    }\n\n    handler = ExtractionHandler(ExtractionMethod.CLIP)\n    return handler.execute(filepath, options)\n</code></pre>"},{"location":"docs/api/#videoxt.api.extract_frames","title":"extract_frames","text":"<pre><code>extract_frames(filepath, start_time=0, stop_time=None, destdir=None, filename=None, verbose=False, overwrite=False, fps=None, image_format='jpg', capture_rate=1, dimensions=None, resize=1.0, rotate=0, monochrome=False)\n</code></pre> <p>Extract individual frames from a video and save them to disk as images.</p> <p>The images are saved to a directory named after the video file, or to a directory you specify.</p>"},{"location":"docs/api/#videoxt.api.extract_frames--args","title":"Args:","text":"<pre><code>`filepath` (Path | str):\n    Path to the video file with extension.\n`start_time` (float | int | str):\n    Specify the extraction's start time in seconds, or as a string in \"HH:MM:SS\"\n    format. Defaults to 0 if not specified.\n`stop_time` (float | int | str | None):\n    Specify the extraction's stop time in seconds, or as a string in \"HH:MM:SS\"\n    format. Defaults to the video duration if not specified.\n`destdir` (Path | None):\n    Specify the directory you want to save output to. Defaults to the video's\n    directory if not specified.\n`filename` (str | None):\n    Specify the name of the extracted file(s). Defaults to the video filename\n    if not specified.\n`verbose` (bool):\n    If True, the prepared request and extraction results will be printed as JSON\n    to console. Defaults to False if not specified.\n`overwrite` (bool):\n    If True, permits overwriting the destination path if the file or directory\n    already exists. Defaults to False if not specified.\n`fps` (float | None):\n    Override the frames per second (fps) value obtained from `cv2` when reading\n    the video. This value is used to set the start and stop frames for the\n    extraction range. This option should be used only in rare cases where `cv2`\n    fails to accurately read the fps. If not specified, it defaults to the fps\n    of the video as read by `cv2`.\n`image_format` (str):\n    Set the extracted image file format. Defaults to 'jpg' if not specified.\n    See: `videoxt.constants.SUPPORTED_IMAGE_FORMATS`.\n`capture_rate` (int):\n    Capture every Nth video frame. Defaults to 1 if not specified, which\n    extracts every frame within the extraction range.\n`dimensions` (tuple[int, int] | None):\n    Specify the dimensions (frame width, frame height) of the images. Defaults\n    to the video dimensions if not specified.\n`resize` (float):\n    Resize the dimensions of the images by a factor of `n`. A value of 0.5\n    will halve the dimensions. If you specify `dimensions`, `resize` will apply\n    to the dimensions you specify. Defaults to 1.0 if not specified (no change).\n`rotate` (int):\n    Rotate the images by `n` degrees. Allowed values: 0, 90, 180 or 270.\n    Defaults to 0 if not specified (no change).\n`monochrome` (bool):\n    If True, apply a black-and-white filter to the images. Defaults to False if\n    not specified.\n</code></pre>"},{"location":"docs/api/#videoxt.api.extract_frames--returns","title":"Returns:","text":"<pre><code>`Result`: A dataclass containing the extraction details.\n</code></pre> Source code in <code>videoxt/api.py</code> <pre><code>def extract_frames(\n    filepath: Path | str,\n    start_time: float | int | str = 0,\n    stop_time: float | int | str | None = None,\n    destdir: Path | str | None = None,\n    filename: str | None = None,\n    verbose: bool = False,\n    overwrite: bool = False,\n    fps: float | None = None,\n    image_format: str = \"jpg\",\n    capture_rate: int = 1,\n    dimensions: tuple[int, int] | None = None,\n    resize: float = 1.0,\n    rotate: int = 0,\n    monochrome: bool = False,\n) -&gt; Result:\n    \"\"\"\n    Extract individual frames from a video and save them to disk as images.\n\n    The images are saved to a directory named after the video file, or to a directory\n    you specify.\n\n    Args:\n    -----\n        `filepath` (Path | str):\n            Path to the video file with extension.\n        `start_time` (float | int | str):\n            Specify the extraction's start time in seconds, or as a string in \"HH:MM:SS\"\n            format. Defaults to 0 if not specified.\n        `stop_time` (float | int | str | None):\n            Specify the extraction's stop time in seconds, or as a string in \"HH:MM:SS\"\n            format. Defaults to the video duration if not specified.\n        `destdir` (Path | None):\n            Specify the directory you want to save output to. Defaults to the video's\n            directory if not specified.\n        `filename` (str | None):\n            Specify the name of the extracted file(s). Defaults to the video filename\n            if not specified.\n        `verbose` (bool):\n            If True, the prepared request and extraction results will be printed as JSON\n            to console. Defaults to False if not specified.\n        `overwrite` (bool):\n            If True, permits overwriting the destination path if the file or directory\n            already exists. Defaults to False if not specified.\n        `fps` (float | None):\n            Override the frames per second (fps) value obtained from `cv2` when reading\n            the video. This value is used to set the start and stop frames for the\n            extraction range. This option should be used only in rare cases where `cv2`\n            fails to accurately read the fps. If not specified, it defaults to the fps\n            of the video as read by `cv2`.\n        `image_format` (str):\n            Set the extracted image file format. Defaults to 'jpg' if not specified.\n            See: `videoxt.constants.SUPPORTED_IMAGE_FORMATS`.\n        `capture_rate` (int):\n            Capture every Nth video frame. Defaults to 1 if not specified, which\n            extracts every frame within the extraction range.\n        `dimensions` (tuple[int, int] | None):\n            Specify the dimensions (frame width, frame height) of the images. Defaults\n            to the video dimensions if not specified.\n        `resize` (float):\n            Resize the dimensions of the images by a factor of `n`. A value of 0.5\n            will halve the dimensions. If you specify `dimensions`, `resize` will apply\n            to the dimensions you specify. Defaults to 1.0 if not specified (no change).\n        `rotate` (int):\n            Rotate the images by `n` degrees. Allowed values: 0, 90, 180 or 270.\n            Defaults to 0 if not specified (no change).\n        `monochrome` (bool):\n            If True, apply a black-and-white filter to the images. Defaults to False if\n            not specified.\n\n    Returns:\n    -----\n        `Result`: A dataclass containing the extraction details.\n    \"\"\"\n    options = {\n        \"start_time\": start_time,\n        \"stop_time\": stop_time,\n        \"destdir\": destdir,\n        \"filename\": filename,\n        \"verbose\": verbose,\n        \"overwrite\": overwrite,\n        \"fps\": fps,\n        \"image_format\": image_format,\n        \"capture_rate\": capture_rate,\n        \"dimensions\": dimensions,\n        \"resize\": resize,\n        \"rotate\": rotate,\n        \"monochrome\": monochrome,\n    }\n\n    handler = ExtractionHandler(ExtractionMethod.FRAMES)\n    return handler.execute(filepath, options)\n</code></pre>"},{"location":"docs/api/#videoxt.api.extract_gif","title":"extract_gif","text":"<pre><code>extract_gif(filepath, start_time=0, stop_time=None, destdir=None, filename=None, verbose=False, overwrite=False, fps=None, dimensions=None, resize=1.0, rotate=0, speed=1.0, bounce=False, reverse=False, monochrome=False)\n</code></pre> <p>Extract a GIF from a video file.</p> <p>Recommended usage: Set a short extraction range. The process can be slow for long or high-resolution videos.</p>"},{"location":"docs/api/#videoxt.api.extract_gif--args","title":"Args:","text":"<pre><code>`filepath` (Path | str):\n    Path to the video file with extension.\n`start_time` (float | int | str):\n    Specify the extraction's start time in seconds, or as a string in \"HH:MM:SS\"\n    format. Defaults to 0 if not specified.\n`stop_time` (float | int | str | None):\n    Specify the extraction's stop time in seconds, or as a string in \"HH:MM:SS\"\n    format. Defaults to the video duration if not specified.\n`destdir` (Path | None):\n    Specify the directory you want to save output to. Defaults to the video's\n    directory if not specified.\n`filename` (str | None):\n    Specify the name of the extracted file(s). Defaults to the video filename\n    if not specified.\n`verbose` (bool):\n    If True, the prepared request and extraction results will be printed as JSON\n    to console. Defaults to False if not specified.\n`overwrite` (bool):\n    If True, permits overwriting the destination path if the file or directory\n    already exists. Defaults to False if not specified.\n`fps` (float | None):\n    Override the frames per second (fps) value obtained from `cv2` when reading\n    the video. This value is used to set the start and stop frames for the\n    extraction range. This option should be used only in rare cases where `cv2`\n    fails to accurately read the fps. If not specified, it defaults to the fps\n    of the video as read by `cv2`.\n`dimensions` (tuple[int, int] | None):\n    Specify the dimensions (frame width, frame height) of the gif. Defaults to\n    the video dimensions if not specified.\n`resize` (float):\n    Resize the dimensions of the gif by a factor of `n`. A value of 0.5\n    will halve the dimensions. If you specify `dimensions`, `resize` will apply\n    to the dimensions you specify. Defaults to 1.0 if not specified (no change).\n`rotate` (int):\n    Rotate the gif by `n` degrees. Allowed values: 0, 90, 180 or 270. Defaults\n    to 0 if not specified (no change).\n`speed` (float):\n    Set the speed of the extracted gif. A value of 0.5 will halve the playback\n    speed of the gif. Defaults to 1.0 if not specified (no change).\n`bounce` (bool):\n    If True, bounce the extracted gif bommerang-style. Defaults to False if\n    not specified.\n`reverse` (bool):\n    If True, reverse the extracted gif. Defaults to False if not specified.\n`monochrome` (bool):\n    If True, apply a black-and-white filter to the gif. Defaults to False if\n    not specified.\n</code></pre>"},{"location":"docs/api/#videoxt.api.extract_gif--returns","title":"Returns:","text":"<pre><code>`Result`:\n    A Result object containing the result of the extraction process.\n</code></pre> Source code in <code>videoxt/api.py</code> <pre><code>def extract_gif(\n    filepath: Path | str,\n    start_time: float | int | str = 0,\n    stop_time: float | int | str | None = None,\n    destdir: Path | str | None = None,\n    filename: str | None = None,\n    verbose: bool = False,\n    overwrite: bool = False,\n    fps: float | None = None,\n    dimensions: tuple[int, int] | None = None,\n    resize: float = 1.0,\n    rotate: int = 0,\n    speed: float = 1.0,\n    bounce: bool = False,\n    reverse: bool = False,\n    monochrome: bool = False,\n) -&gt; Result:\n    \"\"\"\n    Extract a GIF from a video file.\n\n    Recommended usage: Set a short extraction range. The process can be slow for long\n    or high-resolution videos.\n\n    Args:\n    -----\n        `filepath` (Path | str):\n            Path to the video file with extension.\n        `start_time` (float | int | str):\n            Specify the extraction's start time in seconds, or as a string in \"HH:MM:SS\"\n            format. Defaults to 0 if not specified.\n        `stop_time` (float | int | str | None):\n            Specify the extraction's stop time in seconds, or as a string in \"HH:MM:SS\"\n            format. Defaults to the video duration if not specified.\n        `destdir` (Path | None):\n            Specify the directory you want to save output to. Defaults to the video's\n            directory if not specified.\n        `filename` (str | None):\n            Specify the name of the extracted file(s). Defaults to the video filename\n            if not specified.\n        `verbose` (bool):\n            If True, the prepared request and extraction results will be printed as JSON\n            to console. Defaults to False if not specified.\n        `overwrite` (bool):\n            If True, permits overwriting the destination path if the file or directory\n            already exists. Defaults to False if not specified.\n        `fps` (float | None):\n            Override the frames per second (fps) value obtained from `cv2` when reading\n            the video. This value is used to set the start and stop frames for the\n            extraction range. This option should be used only in rare cases where `cv2`\n            fails to accurately read the fps. If not specified, it defaults to the fps\n            of the video as read by `cv2`.\n        `dimensions` (tuple[int, int] | None):\n            Specify the dimensions (frame width, frame height) of the gif. Defaults to\n            the video dimensions if not specified.\n        `resize` (float):\n            Resize the dimensions of the gif by a factor of `n`. A value of 0.5\n            will halve the dimensions. If you specify `dimensions`, `resize` will apply\n            to the dimensions you specify. Defaults to 1.0 if not specified (no change).\n        `rotate` (int):\n            Rotate the gif by `n` degrees. Allowed values: 0, 90, 180 or 270. Defaults\n            to 0 if not specified (no change).\n        `speed` (float):\n            Set the speed of the extracted gif. A value of 0.5 will halve the playback\n            speed of the gif. Defaults to 1.0 if not specified (no change).\n        `bounce` (bool):\n            If True, bounce the extracted gif bommerang-style. Defaults to False if\n            not specified.\n        `reverse` (bool):\n            If True, reverse the extracted gif. Defaults to False if not specified.\n        `monochrome` (bool):\n            If True, apply a black-and-white filter to the gif. Defaults to False if\n            not specified.\n\n    Returns:\n    -----\n        `Result`:\n            A Result object containing the result of the extraction process.\n    \"\"\"\n    options = {\n        \"start_time\": start_time,\n        \"stop_time\": stop_time,\n        \"destdir\": destdir,\n        \"filename\": filename,\n        \"verbose\": verbose,\n        \"overwrite\": overwrite,\n        \"fps\": fps,\n        \"dimensions\": dimensions,\n        \"resize\": resize,\n        \"rotate\": rotate,\n        \"speed\": speed,\n        \"bounce\": bounce,\n        \"reverse\": reverse,\n        \"monochrome\": monochrome,\n    }\n\n    handler = ExtractionHandler(ExtractionMethod.GIF)\n    return handler.execute(filepath, options)\n</code></pre>"},{"location":"docs/cli/","title":"cli","text":"<p>Command line interface for the VideoXT library.</p>"},{"location":"docs/cli/#videoxt.cli--usage","title":"Usage:","text":"<pre><code>$ videoxt --help\nusage: videoxt [-h] [--version] {audio,clip,frames,gif} ...\n\nExtract audio, individual frames, short clips and GIFs from videos.\n\npositional arguments:\n  {audio,clip,frames,gif}\n    audio               Extract audio from a video file.\n    clip                Extract a short clip from a video file as `mp4`.\n    frames              Extract individual frames from a video and save them as images.\n    gif                 Create a GIF from a video between two specified points.\n\noptions:\n  -h, --help            show this help message and exit\n  --version, -V         show program's version number and exit\n</code></pre>"},{"location":"docs/cli/#videoxt.cli.split_cli_args","title":"split_cli_args","text":"<pre><code>split_cli_args(args)\n</code></pre> <p>Split the arguments into a tuple containing the extraction method, filepath, and extraction options. The extraction method is determined by the subparser name, which can be one of either \"audio\", \"clip\", \"frames\", or \"gif\".</p>"},{"location":"docs/cli/#videoxt.cli.split_cli_args--args","title":"Args:","text":"<pre><code>`args` (argparse.Namespace): The arguments from the CLI.\n</code></pre>"},{"location":"docs/cli/#videoxt.cli.split_cli_args--returns","title":"Returns:","text":"<pre><code>`tuple[str, str, dict[str, Any]]`:\n    The extraction method, filepath, and extraction options.\n</code></pre> Source code in <code>videoxt/cli.py</code> <pre><code>def split_cli_args(args: argparse.Namespace) -&gt; tuple[str, str, dict[str, Any]]:\n    \"\"\"\n    Split the arguments into a tuple containing the extraction method, filepath, and\n    extraction options. The extraction method is determined by the subparser name,\n    which can be one of either \"audio\", \"clip\", \"frames\", or \"gif\".\n\n    Args:\n    -----\n        `args` (argparse.Namespace): The arguments from the CLI.\n\n    Returns:\n    -----\n        `tuple[str, str, dict[str, Any]]`:\n            The extraction method, filepath, and extraction options.\n    \"\"\"\n    options = {\n        k: v for k, v in vars(args).items() if k not in [\"subparser_name\", \"filepath\"]\n    }\n\n    return args.subparser_name, args.filepath, options\n</code></pre>"},{"location":"docs/cli/#videoxt.cli.execute_extraction","title":"execute_extraction","text":"<pre><code>execute_extraction(method, filepath, **options)\n</code></pre> <p>Trigger the extraction procedure and return the exit code (0 means success).</p>"},{"location":"docs/cli/#videoxt.cli.execute_extraction--args","title":"Args:","text":"<pre><code>`method` (str]):\n    The extraction method to use (\"audio\", \"clip\", \"frames\", \"gif\").\n`filepath` (str):\n    Path to the video file.\n`**options` (dict):\n    Extraction options specific to the chosen extraction method.\n</code></pre>"},{"location":"docs/cli/#videoxt.cli.execute_extraction--returns","title":"Returns:","text":"<pre><code>`int` : 0 if the extraction was successful, 1 otherwise.\n</code></pre> Source code in <code>videoxt/cli.py</code> <pre><code>def execute_extraction(\n    method: str,\n    filepath: str,\n    **options: dict[str, Any],\n) -&gt; int:\n    \"\"\"\n    Trigger the extraction procedure and return the exit code (0 means success).\n\n    Args:\n    -----\n        `method` (str]):\n            The extraction method to use (\"audio\", \"clip\", \"frames\", \"gif\").\n        `filepath` (str):\n            Path to the video file.\n        `**options` (dict):\n            Extraction options specific to the chosen extraction method.\n\n    Returns:\n    -----\n        `int` : 0 if the extraction was successful, 1 otherwise.\n    \"\"\"\n\n    try:\n        videoxt.api.extract(method, filepath, skip_validation=True, **options)\n    except VideoXTError as error_msg:\n        print(error_msg)\n        return 1\n    else:\n        return 0\n</code></pre>"},{"location":"docs/cli/#videoxt.cli.main","title":"main","text":"<pre><code>main(argv=None)\n</code></pre> <p>The main entry point when called from the command-line. By default, <code>verbose</code> mode is enabled, which prints details about the prepared extraction request and the result. To disable this output, use the <code>--quiet</code> or <code>-q</code> flag.</p>"},{"location":"docs/cli/#videoxt.cli.main--args","title":"Args:","text":"<pre><code>`argv` (Sequence[str] | None): The arguments from the CLI.\n</code></pre>"},{"location":"docs/cli/#videoxt.cli.main--returns","title":"Returns:","text":"<pre><code>`int`: 0 if the extraction was successful, 1 otherwise.\n</code></pre> Source code in <code>videoxt/cli.py</code> <pre><code>def main(argv: Sequence[str] | None = None) -&gt; int:\n    \"\"\"\n    The main entry point when called from the command-line. By default, `verbose` mode\n    is enabled, which prints details about the prepared extraction request and the\n    result. To disable this output, use the `--quiet` or `-q` flag.\n\n    Args:\n    -----\n        `argv` (Sequence[str] | None): The arguments from the CLI.\n\n    Returns:\n    -----\n        `int`: 0 if the extraction was successful, 1 otherwise.\n    \"\"\"\n    # parent_parser houses arguments common to all subparsers\n    parent_parser = argparse.ArgumentParser(add_help=False)\n    parent_parser.add_argument(\n        \"filepath\",\n        type=partial(V.valid_filepath, is_video=True),\n        help=\"Path to the video file with extension.\",\n    )\n    parent_parser.add_argument(\n        \"--start-time\",\n        \"-s\",\n        type=V.valid_start_time,\n        default=0,\n        metavar=\"\",\n        dest=\"start_time\",\n        help=(\n            \"Time to start extraction. Can be a number representing seconds or a \"\n            \"timestamp (Ex: --start-time 0:45 or -s 45).\"\n        ),\n    )\n    parent_parser.add_argument(\n        \"--stop-time\",\n        \"-S\",\n        type=V.valid_stop_time,\n        metavar=\"\",\n        dest=\"stop_time\",\n        help=(\n            \"Time to stop extraction. Can be a number representing seconds or a \"\n            \"timestamp (Ex: --stop-time 1:30 or -S 90).\"\n        ),\n    )\n    parent_parser.add_argument(\n        \"--destdir\",\n        \"-d\",\n        type=V.valid_dir,\n        metavar=\"\",\n        dest=\"destdir\",\n        help=(\n            \"Specify the directory you want to save output to. If not provided, \"\n            \"media is saved in the directory of the input video file.\"\n        ),\n    )\n    parent_parser.add_argument(\n        \"--filename\",\n        \"-fn\",\n        type=V.valid_filename,\n        metavar=\"\",\n        dest=\"filename\",\n        help=(\n            \"Set the name of the output media file(s), without the extension. \"\n            \"If not provided, the video's filename is used.\"\n        ),\n    )\n    parent_parser.add_argument(\n        \"--quiet\",\n        \"-q\",\n        action=\"store_false\",\n        dest=\"verbose\",\n        help=\"Disable extraction details from being printed to the console.\",\n    )\n    parent_parser.add_argument(\n        \"--overwrite\",\n        \"-ov\",\n        action=\"store_true\",\n        dest=\"overwrite\",\n        help=\"Overwrite the output file(s) if they already exist.\",\n    )\n    parent_parser.add_argument(\n        \"--fps\",\n        \"-f\",\n        type=V.valid_fps,\n        metavar=\"\",\n        help=(\n            \"Manually set the video's frames per second (FPS). \"\n            \"Helpful if the FPS is not read accurately by OpenCV. Use with caution.\"\n        ),\n    )\n\n    # parent_parser_audio houses arguments common to audio and clip subparsers\n    parent_parser_audio = argparse.ArgumentParser(add_help=False)\n    parent_parser_audio.add_argument(\n        \"--volume\",\n        \"-v\",\n        type=V.valid_volume,\n        default=1.0,\n        metavar=\"\",\n        help=\"Increase or decrease the output audio volume by a factor of N.\",\n    )\n    parent_parser_audio.add_argument(\n        \"--normalize\",\n        action=\"store_true\",\n        help=\"Normalize the audio output to a maximum of 0dB.\",\n    )\n\n    # parent_parser_image houses arguments common to clip, frames and gif subparsers\n    parent_parser_image = argparse.ArgumentParser(add_help=False)\n    parent_parser_image.add_argument(\n        \"--dimensions\",\n        \"-dm\",\n        type=V.valid_dimensions_str,\n        metavar=\"\",\n        help=\"Resize the output to a specific width and height (Ex: -dm 1920x1080).\",\n    )\n    parent_parser_image.add_argument(\n        \"--resize\",\n        \"-rs\",\n        type=V.valid_resize,\n        default=1.0,\n        metavar=\"\",\n        help=\"Increase or decrease the dimensions of the output by a factor of N.\",\n    )\n    parent_parser_image.add_argument(\n        \"--rotate\",\n        \"-rt\",\n        type=V.valid_rotate_value,\n        choices=VALID_ROTATE_VALUES,\n        default=0,\n        metavar=\"\",\n        dest=\"rotate\",\n        help=\"Rotate the output by 90, 180, or 270 degrees.\",\n    )\n    parent_parser_image.add_argument(\n        \"--monochrome\",\n        action=\"store_true\",\n        help=\"Apply a black-and-white filter to the output.\",\n    )\n\n    # parent_parser_motion houses arguments common to audio, clip and gif subparsers\n    parent_parser_motion = argparse.ArgumentParser(add_help=False)\n    parent_parser_motion.add_argument(\n        \"--speed\",\n        \"-sp\",\n        type=V.valid_speed,\n        default=1.0,\n        metavar=\"\",\n        help=\"Increase or decrease the speed of the output by a factor of N.\",\n    )\n    parent_parser_motion.add_argument(\n        \"--bounce\",\n        action=\"store_true\",\n        help=\"Make the output bounce back-and-forth, boomerang style.\",\n    )\n    parent_parser_motion.add_argument(\n        \"--reverse\",\n        action=\"store_true\",\n        help=\"Reverse the output.\",\n    )\n\n    # main_parser encompasses all subparsers\n    main_parser = argparse.ArgumentParser(\n        prog=\"videoxt\",\n        description=(\n            \"Extract audio, individual frames, short clips and GIFs from videos.\"\n        ),\n    )\n    main_parser.add_argument(\n        \"--version\",\n        \"-V\",\n        action=\"version\",\n        version=f\"%(prog)s {VERSION}\",\n    )\n    subparsers = main_parser.add_subparsers(dest=\"subparser_name\", required=True)\n\n    # audio subparser\n    subparser_audio = subparsers.add_parser(\n        \"audio\",\n        help=\"Extract audio from a video file.\",\n        parents=[parent_parser, parent_parser_audio, parent_parser_motion],\n    )\n    subparser_audio.add_argument(\n        \"--audio-format\",\n        \"-af\",\n        type=V.valid_audio_format,\n        choices=SUPPORTED_AUDIO_FORMATS,\n        default=\"mp3\",\n        metavar=\"\",\n        dest=\"audio_format\",\n        help=\"Set the extracted audio file format. Default is 'mp3'.\",\n    )\n\n    # clip subparser\n    subparsers.add_parser(\n        \"clip\",\n        help=\"Extract a short clip from a video file as 'mp4'.\",\n        parents=[\n            parent_parser,\n            parent_parser_audio,\n            parent_parser_image,\n            parent_parser_motion,\n        ],\n    )\n\n    # frames subparser\n    subparser_frames = subparsers.add_parser(\n        \"frames\",\n        help=\"Extract individual frames from a video and save them as images.\",\n        parents=[parent_parser, parent_parser_image],\n    )\n    subparser_frames.add_argument(\n        \"--image-format\",\n        \"-if\",\n        type=V.valid_image_format,\n        choices=SUPPORTED_IMAGE_FORMATS,\n        default=\"jpg\",\n        metavar=\"\",\n        dest=\"image_format\",\n        help=\"Set the image format to save the frames as. Default is 'jpg'.\",\n    )\n    subparser_frames.add_argument(\n        \"--capture-rate\",\n        \"-cr\",\n        type=V.valid_capture_rate,\n        default=1,\n        metavar=\"\",\n        dest=\"capture_rate\",\n        help=\"Capture every Nth video frame. Default is 1, which captures every frame.\",\n    )\n\n    # gif subparser\n    subparsers.add_parser(\n        \"gif\",\n        help=\"Create a GIF from a video between two specified points.\",\n        parents=[parent_parser, parent_parser_image, parent_parser_motion],\n    )\n\n    # Parse the arguments and execute the extraction.\n    try:\n        args = main_parser.parse_args(argv)\n    except (argparse.ArgumentTypeError, VideoXTError) as error_msg:\n        print(error_msg)\n        return 1\n    else:\n        method, filepath, options = split_cli_args(args)\n        return execute_extraction(method, filepath, **options)\n</code></pre>"},{"location":"docs/constants/","title":"constants","text":"<p>Contains constants used throughout the library and version information.</p>"},{"location":"docs/constants/#videoxt.constants.VERSION","title":"VERSION  <code>module-attribute</code>","text":"<pre><code>VERSION = importlib.metadata.version('videoxt')\n</code></pre>"},{"location":"docs/constants/#videoxt.constants.SUPPORTED_VIDEO_FORMATS","title":"SUPPORTED_VIDEO_FORMATS  <code>module-attribute</code>","text":"<pre><code>SUPPORTED_VIDEO_FORMATS = {'3gp', 'asf', 'avi', 'divx', 'flv', 'm4v', 'mkv', 'mov', 'mp4', 'mpeg', 'mpg', 'ogv', 'rm', 'ts', 'vob', 'webm', 'wmv'}\n</code></pre>"},{"location":"docs/constants/#videoxt.constants.SUPPORTED_AUDIO_FORMATS","title":"SUPPORTED_AUDIO_FORMATS  <code>module-attribute</code>","text":"<pre><code>SUPPORTED_AUDIO_FORMATS = {'m4a', 'mp3', 'ogg', 'wav'}\n</code></pre>"},{"location":"docs/constants/#videoxt.constants.SUPPORTED_IMAGE_FORMATS","title":"SUPPORTED_IMAGE_FORMATS  <code>module-attribute</code>","text":"<pre><code>SUPPORTED_IMAGE_FORMATS = {'bmp', 'dib', 'jp2', 'jpeg', 'jpg', 'png', 'tif', 'tiff', 'webp'}\n</code></pre>"},{"location":"docs/constants/#videoxt.constants.VALID_ROTATE_VALUES","title":"VALID_ROTATE_VALUES  <code>module-attribute</code>","text":"<pre><code>VALID_ROTATE_VALUES = {0, 90, 180, 270}\n</code></pre>"},{"location":"docs/constants/#videoxt.constants.ROTATION_MAP","title":"ROTATION_MAP  <code>module-attribute</code>","text":"<pre><code>ROTATION_MAP = {90: cv2.ROTATE_90_CLOCKWISE, 180: cv2.ROTATE_180, 270: cv2.ROTATE_90_COUNTERCLOCKWISE}\n</code></pre>"},{"location":"docs/constants/#videoxt.constants.ExtractionMethod","title":"ExtractionMethod","text":"<p>             Bases: <code>Enum</code></p> <p>Enumeration of the supported extraction methods: audio, clip, frames, gif.</p>"},{"location":"docs/constants/#videoxt.constants.ExtractionMethod--attributes","title":"Attributes:","text":"<pre><code>`AUDIO` (str):\n    Extract the audio from a video file.\n`CLIP` (str):\n    Extract a clip from a video file.\n`FRAMES` (str):\n    Extract frames from a video file.\n`GIF` (str):\n    Create a GIF from a video file.\n</code></pre>"},{"location":"docs/constants/#videoxt.constants.ExtractionMethod.AUDIO","title":"AUDIO  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>AUDIO = 'audio'\n</code></pre>"},{"location":"docs/constants/#videoxt.constants.ExtractionMethod.CLIP","title":"CLIP  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>CLIP = 'clip'\n</code></pre>"},{"location":"docs/constants/#videoxt.constants.ExtractionMethod.FRAMES","title":"FRAMES  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>FRAMES = 'frames'\n</code></pre>"},{"location":"docs/constants/#videoxt.constants.ExtractionMethod.GIF","title":"GIF  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>GIF = 'gif'\n</code></pre>"},{"location":"docs/editors/","title":"editors","text":"<p>Contains functions used to edit a VideoFileClip or np.ndarray prior to extraction.</p>"},{"location":"docs/editors/#videoxt.editors.trim_clip","title":"trim_clip","text":"<pre><code>trim_clip(clip, start_second=None, stop_second=None)\n</code></pre> <p>Trim a VideoFileClip to a specific time range and return the trimmed clip.</p>"},{"location":"docs/editors/#videoxt.editors.trim_clip--args","title":"Args:","text":"<pre><code>`clip` (moviepy.editor.VideoFileClip):\n    The clip to trim.\n`start_second` (float | None):\n    The start time in seconds. If None, the trim will start at the beginning.\n`stop_second` (float | None):\n    The stop time in seconds. If None, the clip will be trimmed to the end.\n</code></pre>"},{"location":"docs/editors/#videoxt.editors.trim_clip--returns","title":"Returns:","text":"<pre><code>`moviepy.editor.VideoFileClip`: The trimmed clip.\n</code></pre> Source code in <code>videoxt/editors.py</code> <pre><code>def trim_clip(\n    clip: VideoFileClip,\n    start_second: float | None = None,\n    stop_second: float | None = None,\n) -&gt; VideoFileClip:\n    \"\"\"\n    Trim a VideoFileClip to a specific time range and return the trimmed clip.\n\n    Args:\n    -----\n        `clip` (moviepy.editor.VideoFileClip):\n            The clip to trim.\n        `start_second` (float | None):\n            The start time in seconds. If None, the trim will start at the beginning.\n        `stop_second` (float | None):\n            The stop time in seconds. If None, the clip will be trimmed to the end.\n\n    Returns:\n    -----\n        `moviepy.editor.VideoFileClip`: The trimmed clip.\n    \"\"\"\n    if start_second is None and stop_second is None:\n        return clip\n\n    if start_second is None:\n        start_second = 0.0\n\n    if stop_second is None:\n        stop_second = clip.duration\n\n    return clip.subclip(start_second, stop_second)\n</code></pre>"},{"location":"docs/editors/#videoxt.editors.edit_clip_audio","title":"edit_clip_audio","text":"<pre><code>edit_clip_audio(clip, volume=None, normalize=None)\n</code></pre> <p>Edit the audio of a VideoFileClip by adjusting its volume and normalizing the audio if specified and return the edited clip.</p>"},{"location":"docs/editors/#videoxt.editors.edit_clip_audio--args","title":"Args:","text":"<pre><code>`clip` (moviepy.editor.VideoFileClip):\n    The clip to edit.\n`volume` (float | None):\n    The volume multiplier. If None, the volume will not be adjusted.\n`normalize` (bool | None):\n    Whether to normalize the audio. If None, the audio will not be normalized.\n</code></pre>"},{"location":"docs/editors/#videoxt.editors.edit_clip_audio--returns","title":"Returns:","text":"<pre><code>`moviepy.editor.VideoFileClip`: The edited clip.\n</code></pre> Source code in <code>videoxt/editors.py</code> <pre><code>def edit_clip_audio(\n    clip: VideoFileClip,\n    volume: float | None = None,\n    normalize: bool | None = None,\n) -&gt; VideoFileClip:\n    \"\"\"\n    Edit the audio of a VideoFileClip by adjusting its volume and normalizing the\n    audio if specified and return the edited clip.\n\n    Args:\n    -----\n        `clip` (moviepy.editor.VideoFileClip):\n            The clip to edit.\n        `volume` (float | None):\n            The volume multiplier. If None, the volume will not be adjusted.\n        `normalize` (bool | None):\n            Whether to normalize the audio. If None, the audio will not be normalized.\n\n    Returns:\n    -----\n        `moviepy.editor.VideoFileClip`: The edited clip.\n    \"\"\"\n    if normalize:\n        clip = clip.fx(afx.audio_normalize)\n\n    if volume != 1.0:\n        clip = clip.volumex(volume)\n\n    return clip\n</code></pre>"},{"location":"docs/editors/#videoxt.editors.edit_clip_image","title":"edit_clip_image","text":"<pre><code>edit_clip_image(clip, dimensions=None, rotate=None, monochrome=None)\n</code></pre> <p>Edit the image properties of a VideoFileClip by resizing, rotating, and converting to monochrome if specified and return the edited clip.</p>"},{"location":"docs/editors/#videoxt.editors.edit_clip_image--args","title":"Args:","text":"<pre><code>`clip` (moviepy.editor.VideoFileClip):\n    The clip to edit.\n`dimensions` (tuple[int, int] | None):\n    The dimensions to resize the clip to. If None, the clip will not be resized.\n`rotate` (int | None):\n    The degrees to rotate the clip. If None, the clip will not be rotated.\n`monochrome` (bool | None):\n    Whether to convert the clip to monochrome. If None, the black and white\n    filter will not be applied.\n</code></pre>"},{"location":"docs/editors/#videoxt.editors.edit_clip_image--returns","title":"Returns:","text":"<pre><code>`moviepy.editor.VideoFileClip`: The edited clip.\n</code></pre> Source code in <code>videoxt/editors.py</code> <pre><code>def edit_clip_image(\n    clip: VideoFileClip,\n    dimensions: tuple[int, int] | None = None,\n    rotate: int | None = None,\n    monochrome: bool | None = None,\n) -&gt; VideoFileClip:\n    \"\"\"\n    Edit the image properties of a VideoFileClip by resizing, rotating, and converting\n    to monochrome if specified and return the edited clip.\n\n    Args:\n    -----\n        `clip` (moviepy.editor.VideoFileClip):\n            The clip to edit.\n        `dimensions` (tuple[int, int] | None):\n            The dimensions to resize the clip to. If None, the clip will not be resized.\n        `rotate` (int | None):\n            The degrees to rotate the clip. If None, the clip will not be rotated.\n        `monochrome` (bool | None):\n            Whether to convert the clip to monochrome. If None, the black and white\n            filter will not be applied.\n\n    Returns:\n    -----\n        `moviepy.editor.VideoFileClip`: The edited clip.\n    \"\"\"\n    if dimensions is not None:\n        clip = clip.resize(dimensions)\n\n    if rotate != 0:\n        clip = clip.rotate(rotate)\n\n    if monochrome:\n        clip = clip.fx(vfx.blackwhite)\n\n    return clip\n</code></pre>"},{"location":"docs/editors/#videoxt.editors.edit_clip_motion","title":"edit_clip_motion","text":"<pre><code>edit_clip_motion(clip, speed=None, reverse=None, bounce=None)\n</code></pre> <p>Edit the moving image properties of a VideoFileClip by adjusting its speed, reversing, and bouncing if specified and return the edited clip.</p>"},{"location":"docs/editors/#videoxt.editors.edit_clip_motion--args","title":"Args:","text":"<pre><code>`clip` (moviepy.editor.VideoFileClip):\n    The clip to edit.\n`speed` (float | None):\n    The speed multiplier. If None, the speed will not be adjusted.\n`reverse` (bool | None):\n    Whether to reverse the clip. If None, the clip will not be reversed.\n`bounce` (bool | None):\n    Whether to bounce the clip. If None, the clip will not be bounced.\n</code></pre>"},{"location":"docs/editors/#videoxt.editors.edit_clip_motion--returns","title":"Returns:","text":"<pre><code>`moviepy.editor.VideoFileClip`: The edited clip.\n</code></pre> Source code in <code>videoxt/editors.py</code> <pre><code>def edit_clip_motion(\n    clip: VideoFileClip,\n    speed: float | None = None,\n    reverse: bool | None = None,\n    bounce: bool | None = None,\n) -&gt; VideoFileClip:\n    \"\"\"\n    Edit the moving image properties of a VideoFileClip by adjusting its speed,\n    reversing, and bouncing if specified and return the edited clip.\n\n    Args:\n    -----\n        `clip` (moviepy.editor.VideoFileClip):\n            The clip to edit.\n        `speed` (float | None):\n            The speed multiplier. If None, the speed will not be adjusted.\n        `reverse` (bool | None):\n            Whether to reverse the clip. If None, the clip will not be reversed.\n        `bounce` (bool | None):\n            Whether to bounce the clip. If None, the clip will not be bounced.\n\n    Returns:\n    -----\n        `moviepy.editor.VideoFileClip`: The edited clip.\n    \"\"\"\n    if reverse:\n        clip = clip.fx(vfx.time_mirror)\n\n    if bounce:\n        clip = clip.fx(vfx.time_symmetrize)\n\n    if speed != 1.0:\n        clip = clip.fx(vfx.speedx, speed)\n\n    return clip\n</code></pre>"},{"location":"docs/editors/#videoxt.editors.edit_image","title":"edit_image","text":"<pre><code>edit_image(image, dimensions=None, rotate=None, monochrome=None)\n</code></pre> <p>Edit a numpy.ndarray image by resizing, rotating, and converting to monochrome if specified and return the edited image.</p>"},{"location":"docs/editors/#videoxt.editors.edit_image--args","title":"Args:","text":"<pre><code>`image` (np.ndarray[Any, Any]):\n    The image to edit.\n`dimensions` (tuple[int, int] | None):\n    The dimensions to resize the image to. If None, the image will not be\n    resized.\n`rotate` (int | None):\n    The degrees to rotate the image. If None, the image will not be rotated.\n`monochrome` (bool | None):\n    Whether to convert the image to monochrome. If None, the black and white\n    filter will not be applied.\n</code></pre>"},{"location":"docs/editors/#videoxt.editors.edit_image--returns","title":"Returns:","text":"<pre><code>`np.ndarray[Any, Any]`: The edited image.\n</code></pre> Source code in <code>videoxt/editors.py</code> <pre><code>def edit_image(\n    image: np.ndarray[Any, Any],\n    dimensions: tuple[int, int] | None = None,\n    rotate: int | None = None,\n    monochrome: bool | None = None,\n) -&gt; np.ndarray[Any, Any]:\n    \"\"\"\n    Edit a numpy.ndarray image by resizing, rotating, and converting to monochrome\n    if specified and return the edited image.\n\n    Args:\n    -----\n        `image` (np.ndarray[Any, Any]):\n            The image to edit.\n        `dimensions` (tuple[int, int] | None):\n            The dimensions to resize the image to. If None, the image will not be\n            resized.\n        `rotate` (int | None):\n            The degrees to rotate the image. If None, the image will not be rotated.\n        `monochrome` (bool | None):\n            Whether to convert the image to monochrome. If None, the black and white\n            filter will not be applied.\n\n    Returns:\n    -----\n        `np.ndarray[Any, Any]`: The edited image.\n    \"\"\"\n    if dimensions is not None and dimensions != image.shape:\n        image = cv2.resize(image, dimensions)\n\n    if rotate != 0 and rotate is not None:\n        try:\n            rotate_value = C.ROTATION_MAP[rotate]\n        except KeyError:\n            pass  # XXX: log\n        else:\n            image = cv2.rotate(image, rotate_value)\n\n    if monochrome:\n        image = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)\n\n    return image\n</code></pre>"},{"location":"docs/exceptions/","title":"exceptions","text":"<p>Contains custom exceptions raised by videoxt.</p>"},{"location":"docs/exceptions/#videoxt.exceptions.VideoXTError","title":"VideoXTError","text":"<p>             Bases: <code>Exception</code></p> <p>A videoxt specific error occurred.</p>"},{"location":"docs/exceptions/#videoxt.exceptions.InvalidExtractionMethod","title":"InvalidExtractionMethod","text":"<p>             Bases: <code>VideoXTError</code></p> <p>An invalid extraction method was requested.</p>"},{"location":"docs/exceptions/#videoxt.exceptions.ClosedVideoCaptureError","title":"ClosedVideoCaptureError","text":"<p>             Bases: <code>VideoXTError</code></p> <p>A <code>cv2.VideoCapture</code> was unexpectedly closed.</p>"},{"location":"docs/exceptions/#videoxt.exceptions.VideoValidationError","title":"VideoValidationError","text":"<p>             Bases: <code>VideoXTError</code></p> <p>A video file failed a validation step.</p>"},{"location":"docs/exceptions/#videoxt.exceptions.PreparationError","title":"PreparationError","text":"<p>             Bases: <code>VideoXTError</code></p> <p>An error occurred while preparing a request.</p>"},{"location":"docs/exceptions/#videoxt.exceptions.ValidationError","title":"ValidationError","text":"<p>             Bases: <code>VideoXTError</code></p> <p>A user input validation step failed.</p>"},{"location":"docs/exceptions/#videoxt.exceptions.NoAudioError","title":"NoAudioError","text":"<p>             Bases: <code>VideoXTError</code></p> <p>A video has no audio and it is required for the operation.</p>"},{"location":"docs/exceptions/#videoxt.exceptions.FrameReadError","title":"FrameReadError","text":"<p>             Bases: <code>VideoXTError</code></p> <p>An error occurred while reading a frame from a video using <code>cv2</code>.</p>"},{"location":"docs/exceptions/#videoxt.exceptions.VideoCaptureSetError","title":"VideoCaptureSetError","text":"<p>             Bases: <code>VideoXTError</code></p> <p>An error occurred while setting a VideoCapture property using <code>cv2</code>.</p>"},{"location":"docs/exceptions/#videoxt.exceptions.FrameWriteError","title":"FrameWriteError","text":"<p>             Bases: <code>VideoXTError</code></p> <p>An error occurred while writing a frame to file using <code>cv2</code>.</p>"},{"location":"docs/exceptions/#videoxt.exceptions.GifWriteError","title":"GifWriteError","text":"<p>             Bases: <code>VideoXTError</code></p> <p>An error occurred while writing a gif to file.</p>"},{"location":"docs/exceptions/#videoxt.exceptions.AudioWriteError","title":"AudioWriteError","text":"<p>             Bases: <code>VideoXTError</code></p> <p>An error occurred while writing an audio file.</p>"},{"location":"docs/exceptions/#videoxt.exceptions.ClipWriteError","title":"ClipWriteError","text":"<p>             Bases: <code>VideoXTError</code></p> <p>An error occurred while writing a clip to file.</p>"},{"location":"docs/exceptions/#videoxt.exceptions.BuildImagePathError","title":"BuildImagePathError","text":"<p>             Bases: <code>VideoXTError</code></p> <p>An error occurred while building an image path.</p>"},{"location":"docs/extractors/","title":"extractors","text":"<p>This module contains extractor objects that perform extractions.</p>"},{"location":"docs/extractors/#videoxt.extractors.Extractor","title":"Extractor","text":"<p>             Bases: <code>Protocol</code></p> <p>Protocol defining the interface for performing any extraction operation.</p>"},{"location":"docs/extractors/#videoxt.extractors.Extractor.extract","title":"extract","text":"<pre><code>extract()\n</code></pre> <p>Perform extraction and return the path to the extracted file or directory.</p>"},{"location":"docs/extractors/#videoxt.extractors.Extractor.extract--returns","title":"Returns:","text":"<pre><code>`Path`: The path to the extracted file or directory.\n</code></pre> Source code in <code>videoxt/extractors.py</code> <pre><code>def extract(self) -&gt; Path | None:\n    \"\"\"\n    Perform extraction and return the path to the extracted file or directory.\n\n    Returns:\n    -----\n        `Path`: The path to the extracted file or directory.\n    \"\"\"\n    ...\n</code></pre>"},{"location":"docs/extractors/#videoxt.extractors.AudioExtractor","title":"AudioExtractor  <code>dataclass</code>","text":"<p>Instantiate me with a <code>PreparedAudioRequest</code> and I'll provide you with an <code>extract()</code> method that will extract audio from the video file in the request, apply requested edits to the audio, and save it to disk.</p>"},{"location":"docs/extractors/#videoxt.extractors.AudioExtractor--fields","title":"Fields:","text":"<pre><code>`request` (PreparedAudioRequest):\n    Request parameters the extractor will use to perform the extraction.\n</code></pre>"},{"location":"docs/extractors/#videoxt.extractors.AudioExtractor--public-methods","title":"Public Methods:","text":"<pre><code>`extract()` -&gt; `Path`:\n    Execute audio extraction and return the path to the extracted audio\n    file.\n</code></pre>"},{"location":"docs/extractors/#videoxt.extractors.AudioExtractor.request","title":"request  <code>instance-attribute</code>","text":"<pre><code>request\n</code></pre>"},{"location":"docs/extractors/#videoxt.extractors.AudioExtractor.extract","title":"extract","text":"<pre><code>extract()\n</code></pre> <p>Extract audio from a video within a given time range and return the path to the saved audio file. Optional edits to audio are applied before saving to disk.</p>"},{"location":"docs/extractors/#videoxt.extractors.AudioExtractor.extract--returns","title":"Returns:","text":"<pre><code>`Path | None`:\n    The path to the extracted audio file if the write was successful.\n</code></pre> Source code in <code>videoxt/extractors.py</code> <pre><code>def extract(self) -&gt; Path:\n    \"\"\"\n    Extract audio from a video within a given time range and return the path to the\n    saved audio file. Optional edits to audio are applied before saving to disk.\n\n    Returns:\n    -----\n        `Path | None`:\n            The path to the extracted audio file if the write was successful.\n    \"\"\"\n    with VideoFileClip(str(self.request.video.filepath)) as clip:\n        subclip = self._edit_clip_audio(clip)\n        return self._write_audio_file(subclip)\n</code></pre>"},{"location":"docs/extractors/#videoxt.extractors.ClipExtractor","title":"ClipExtractor  <code>dataclass</code>","text":"<p>Instantiate me with a <code>PreparedClipRequest</code> and I'll provide you with an <code>extract()</code> method that will extract a subclip from the video file in the request, apply requested edits to the subclip, and save it to disk.</p>"},{"location":"docs/extractors/#videoxt.extractors.ClipExtractor--fields","title":"Fields:","text":"<pre><code>`request` (PreparedClipRequest):\n    Request parameters the extractor will use to perform the extraction.\n</code></pre>"},{"location":"docs/extractors/#videoxt.extractors.ClipExtractor--public-methods","title":"Public Methods:","text":"<pre><code>`extract()` -&gt; `Path`:\n    Execute subclip extraction and return the path to the extracted clip.\n</code></pre>"},{"location":"docs/extractors/#videoxt.extractors.ClipExtractor.request","title":"request  <code>instance-attribute</code>","text":"<pre><code>request\n</code></pre>"},{"location":"docs/extractors/#videoxt.extractors.ClipExtractor.extract","title":"extract","text":"<pre><code>extract()\n</code></pre> <p>Extract a subclip from a video within a given time range and return the file path to clip. Optional edits to the clip are applied before saving to disk.</p>"},{"location":"docs/extractors/#videoxt.extractors.ClipExtractor.extract--returns","title":"Returns:","text":"<pre><code>`Path`:\n    The path to the extracted clip if the write was successful.\n</code></pre> Source code in <code>videoxt/extractors.py</code> <pre><code>def extract(self) -&gt; Path:\n    \"\"\"\n    Extract a subclip from a video within a given time range and return the file\n    path to clip. Optional edits to the clip are applied before saving to disk.\n\n    Returns:\n    -----\n        `Path`:\n            The path to the extracted clip if the write was successful.\n    \"\"\"\n    with VideoFileClip(str(self.request.video.filepath)) as clip:\n        subclip = self._edit_clip(clip)\n        return self._write_subclip(subclip)\n</code></pre>"},{"location":"docs/extractors/#videoxt.extractors.FramesExtractor","title":"FramesExtractor  <code>dataclass</code>","text":"<p>Instantiate me with a <code>PreparedFramesRequest</code> and I'll provide you with an <code>extract()</code> method that will extract frames from the video file in the request, apply requested edits to the frames, and save them to disk as images in a directory.</p>"},{"location":"docs/extractors/#videoxt.extractors.FramesExtractor--fields","title":"Fields:","text":"<pre><code>`request` (PreparedFramesRequest):\n    The request to prepare and perform an extraction operation with.\n</code></pre>"},{"location":"docs/extractors/#videoxt.extractors.FramesExtractor--public-methods","title":"Public Methods:","text":"<pre><code>`extract()` -&gt; `Path`:\n    Execute frames extraction and return the path to the directory where the\n    extracted images were saved.\n</code></pre>"},{"location":"docs/extractors/#videoxt.extractors.FramesExtractor.request","title":"request  <code>instance-attribute</code>","text":"<pre><code>request\n</code></pre>"},{"location":"docs/extractors/#videoxt.extractors.FramesExtractor.extract","title":"extract","text":"<pre><code>extract()\n</code></pre> <p>Extract frames from a video, save them to disk as images, and return the path to the directory where the images were saved.</p>"},{"location":"docs/extractors/#videoxt.extractors.FramesExtractor.extract--returns","title":"Returns:","text":"<pre><code>`Path`: The directory where the extracted images were saved.\n</code></pre> Source code in <code>videoxt/extractors.py</code> <pre><code>def extract(self) -&gt; Path:\n    \"\"\"\n    Extract frames from a video, save them to disk as images, and return the path\n    to the directory where the images were saved.\n\n    Returns:\n    -----\n        `Path`: The directory where the extracted images were saved.\n    \"\"\"\n\n    # Create the destination directory if it doesn't exist.\n    self.request.destpath.mkdir(parents=True, exist_ok=True)\n\n    from rich.progress import track\n\n    # Open the video capture and iterate over the frames to write to disk.\n    with open_video_capture(self.request.video.filepath) as opencap:\n        for edited_frame, image_path in track(\n            self._preprocess_frames(opencap),\n            total=self.request.images_expected,\n            transient=True,\n            description=(\n                \"[yellow]Extracting frames...[/yellow]\\n\"\n                \"Press [red][bold]Ctrl+C[/red][/bold] to cancel.\"\n            ),\n        ):\n            self._write_image(edited_frame, image_path)\n\n    return self.request.destpath\n</code></pre>"},{"location":"docs/extractors/#videoxt.extractors.GifExtractor","title":"GifExtractor  <code>dataclass</code>","text":"<p>Instantiate me with a <code>PreparedGifRequest</code> and I'll provide you with an <code>extract()</code> method that will extract a gif from the video file in the request, apply requested edits to the gif, and save it to disk.</p>"},{"location":"docs/extractors/#videoxt.extractors.GifExtractor--attributes","title":"Attributes:","text":"<pre><code>`request` (PreparedGifRequest):\n    Request parameters the extractor will use to perform the extraction.\n</code></pre>"},{"location":"docs/extractors/#videoxt.extractors.GifExtractor--public-methods","title":"Public Methods:","text":"<pre><code>`extract()` -&gt; `Path`:\n    Execute gif extraction and return the path to the extracted gif.\n</code></pre>"},{"location":"docs/extractors/#videoxt.extractors.GifExtractor.request","title":"request  <code>instance-attribute</code>","text":"<pre><code>request\n</code></pre>"},{"location":"docs/extractors/#videoxt.extractors.GifExtractor.extract","title":"extract","text":"<pre><code>extract()\n</code></pre> <p>Extract a gif from a video within a given time range and return the file path the gif. Optional edits to the gif are applied before saving to disk.</p>"},{"location":"docs/extractors/#videoxt.extractors.GifExtractor.extract--returns","title":"Returns:","text":"<pre><code>`Path`:\n    The path to the extracted gif if the write was successful.\n</code></pre> Source code in <code>videoxt/extractors.py</code> <pre><code>def extract(self) -&gt; Path:\n    \"\"\"\n    Extract a gif from a video within a given time range and return the file path\n    the gif. Optional edits to the gif are applied before saving to disk.\n\n    Returns:\n    -----\n        `Path`:\n            The path to the extracted gif if the write was successful.\n    \"\"\"\n    with VideoFileClip(str(self.request.video.filepath)) as clip:\n        subclip = self._edit_clip(clip)\n        return self._write_gif(subclip)\n</code></pre>"},{"location":"docs/handlers/","title":"handlers","text":"<p>Contains factories for creating extraction objects and handlers for executing the extraction process.</p>"},{"location":"docs/handlers/#videoxt.handlers.ExtractionHandler","title":"ExtractionHandler","text":"<pre><code>ExtractionHandler(method)\n</code></pre> <p>Handles the extraction process by creating the necessary objects used to perform any extraction.</p>"},{"location":"docs/handlers/#videoxt.handlers.ExtractionHandler--attributes","title":"Attributes:","text":"<pre><code>`method` (ExtractionMethod):\n    The extraction method Enum to use (e.g., `ExtractionMethod.AUDIO`).\n</code></pre>"},{"location":"docs/handlers/#videoxt.handlers.ExtractionHandler--public-methods","title":"Public Methods:","text":"<pre><code>`execute` -&gt; `Result`:\n    Execute the video extraction process and return a `Result` object.\n</code></pre> <p>Set the objects to be used for extraction based on the chosen method.</p> Source code in <code>videoxt/handlers.py</code> <pre><code>def __init__(self, method: ExtractionMethod):\n    \"\"\"Set the objects to be used for extraction based on the chosen method.\"\"\"\n    self.method = method\n    self.object_factory = ObjectFactory(self.method)\n</code></pre>"},{"location":"docs/handlers/#videoxt.handlers.ExtractionHandler.method","title":"method  <code>instance-attribute</code>","text":"<pre><code>method = method\n</code></pre>"},{"location":"docs/handlers/#videoxt.handlers.ExtractionHandler.object_factory","title":"object_factory  <code>instance-attribute</code>","text":"<pre><code>object_factory = ObjectFactory(self.method)\n</code></pre>"},{"location":"docs/handlers/#videoxt.handlers.ExtractionHandler.execute","title":"execute","text":"<pre><code>execute(filepath, options=None, skip_validation=False)\n</code></pre> <p>Make the necessary objects used to perform the extraction and execute the extraction process.</p>"},{"location":"docs/handlers/#videoxt.handlers.ExtractionHandler.execute--args","title":"Args:","text":"<pre><code>`filepath` (Path | str):\n    Path to the video file with extension.\n`options` (dict[str, Any] | None):\n    Extraction options specific to the chosen extraction method. If None,\n    default options will be used.\n`skip_validation` (bool):\n    If True, skips validation of the extraction options. This can slightly\n    improve speed, but it is not recommended unless you are sure that the\n    options are valid.\n</code></pre>"},{"location":"docs/handlers/#videoxt.handlers.ExtractionHandler.execute--returns","title":"Returns:","text":"<pre><code>`Result`: A dataclass containing the extraction details.\n</code></pre> Source code in <code>videoxt/handlers.py</code> <pre><code>def execute(\n    self,\n    filepath: Path | str,\n    options: dict[str, Any] | None = None,\n    skip_validation: bool = False,\n) -&gt; Result:\n    \"\"\"\n    Make the necessary objects used to perform the extraction and execute the\n    extraction process.\n\n    Args:\n    -----\n        `filepath` (Path | str):\n            Path to the video file with extension.\n        `options` (dict[str, Any] | None):\n            Extraction options specific to the chosen extraction method. If None,\n            default options will be used.\n        `skip_validation` (bool):\n            If True, skips validation of the extraction options. This can slightly\n            improve speed, but it is not recommended unless you are sure that the\n            options are valid.\n    Returns:\n    -----\n        `Result`: A dataclass containing the extraction details.\n    \"\"\"\n    video = self.object_factory.make_video(filepath)\n    request = self.object_factory.make_prepared_request(\n        video, options, skip_validation\n    )\n    extractor = self.object_factory.make_extractor(request)\n    result = self.object_factory.make_result()\n\n    if request.is_verbose:\n        request.verbose_print(title=\"PreparedRequest\")\n\n    result = self._perform_extraction(extractor, result)\n\n    if request.is_verbose:\n        result.verbose_print(title=\"Result\")\n\n    return result\n</code></pre>"},{"location":"docs/handlers/#videoxt.handlers.ObjectFactory","title":"ObjectFactory","text":"<pre><code>ObjectFactory(method)\n</code></pre> <p>Factory for creating the necessary objects used to perform any extraction.</p>"},{"location":"docs/handlers/#videoxt.handlers.ObjectFactory--attributes","title":"Attributes:","text":"<pre><code>`method` (ExtractionMethod):\n    The extraction method Enum to use (e.g., `ExtractionMethod.AUDIO`).\n</code></pre>"},{"location":"docs/handlers/#videoxt.handlers.ObjectFactory--class-attributes","title":"Class Attributes:","text":"<pre><code>`REQUEST_MAP` (dict[ExtractionMethod, Type[Request]]):\n    Mapping of extraction methods to their corresponding request classes.\n`PREPARED_REQUEST_MAP` (dict[ExtractionMethod, Type[PreparedRequest]]):\n    Mapping of extraction methods to their corresponding prepared request\n    classes.\n`EXTRACTOR_MAP` (dict[ExtractionMethod, Type[Extractor]]):\n    Mapping of extraction methods to their corresponding extractor classes.\n</code></pre>"},{"location":"docs/handlers/#videoxt.handlers.ObjectFactory--public-methods","title":"Public Methods:","text":"<pre><code>`make_video` -&gt; `Video`:\n    Create a `Video` object.\n`make_prepared_request` -&gt; `PreparedRequest`:\n    Create a `PreparedRequest` object.\n`make_extractor` -&gt; `Extractor`:\n    Create an `Extractor` object.\n`make_result` -&gt; `Result`:\n    Create a `Result` object.\n</code></pre> <p>Set the objects to be used for extraction based on the chosen method.</p> Source code in <code>videoxt/handlers.py</code> <pre><code>def __init__(self, method: ExtractionMethod):\n    \"\"\"Set the objects to be used for extraction based on the chosen method.\"\"\"\n    self.method = method\n</code></pre>"},{"location":"docs/handlers/#videoxt.handlers.ObjectFactory.REQUEST_MAP","title":"REQUEST_MAP  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>REQUEST_MAP = {ExtractionMethod.AUDIO: AudioRequest, ExtractionMethod.CLIP: ClipRequest, ExtractionMethod.FRAMES: FramesRequest, ExtractionMethod.GIF: GifRequest}\n</code></pre>"},{"location":"docs/handlers/#videoxt.handlers.ObjectFactory.PREPARED_REQUEST_MAP","title":"PREPARED_REQUEST_MAP  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>PREPARED_REQUEST_MAP = {ExtractionMethod.AUDIO: PreparedAudioRequest, ExtractionMethod.CLIP: PreparedClipRequest, ExtractionMethod.FRAMES: PreparedFramesRequest, ExtractionMethod.GIF: PreparedGifRequest}\n</code></pre>"},{"location":"docs/handlers/#videoxt.handlers.ObjectFactory.EXTRACTOR_MAP","title":"EXTRACTOR_MAP  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>EXTRACTOR_MAP = {ExtractionMethod.AUDIO: AudioExtractor, ExtractionMethod.CLIP: ClipExtractor, ExtractionMethod.FRAMES: FramesExtractor, ExtractionMethod.GIF: GifExtractor}\n</code></pre>"},{"location":"docs/handlers/#videoxt.handlers.ObjectFactory.method","title":"method  <code>instance-attribute</code>","text":"<pre><code>method = method\n</code></pre>"},{"location":"docs/handlers/#videoxt.handlers.ObjectFactory.make_video","title":"make_video","text":"<pre><code>make_video(filepath)\n</code></pre> <p>Use the given video filepath to create a <code>Video</code> object.</p>"},{"location":"docs/handlers/#videoxt.handlers.ObjectFactory.make_video--args","title":"Args:","text":"<pre><code>`filepath` (Path | str): Path to the video file with extension.\n</code></pre>"},{"location":"docs/handlers/#videoxt.handlers.ObjectFactory.make_video--returns","title":"Returns:","text":"<pre><code>`Video`: A dataclass containing the video details.\n</code></pre> Source code in <code>videoxt/handlers.py</code> <pre><code>def make_video(self, filepath: Path | str) -&gt; Video:\n    \"\"\"\n    Use the given video filepath to create a `Video` object.\n\n    Args:\n    -----\n        `filepath` (Path | str): Path to the video file with extension.\n\n    Returns:\n    -----\n        `Video`: A dataclass containing the video details.\n    \"\"\"\n    return Video(Path(filepath))\n</code></pre>"},{"location":"docs/handlers/#videoxt.handlers.ObjectFactory.make_prepared_request","title":"make_prepared_request","text":"<pre><code>make_prepared_request(video, options=None, skip_validation=False)\n</code></pre> <p>Use the given video and options to create a <code>PreparedRequest</code> object.</p>"},{"location":"docs/handlers/#videoxt.handlers.ObjectFactory.make_prepared_request--args","title":"Args:","text":"<pre><code>`video` (Video):\n    The video object to use.\n`options` (dict[str, Any] | None):\n    Extraction options specific to the chosen extraction method. If None,\n    default options will be used.\n`skip_validation` (bool):\n    If True, skips validation of the extraction options. This can slightly\n    improve speed, but it is not recommended unless you are sure that the\n    options are valid.\n</code></pre>"},{"location":"docs/handlers/#videoxt.handlers.ObjectFactory.make_prepared_request--returns","title":"Returns:","text":"<pre><code>`PreparedRequest`: A dataclass containing the prepared request details.\n</code></pre> Source code in <code>videoxt/handlers.py</code> <pre><code>def make_prepared_request(\n    self,\n    video: Video,\n    options: dict[str, Any] | None = None,\n    skip_validation: bool = False,\n) -&gt; PreparedRequest:\n    \"\"\"\n    Use the given video and options to create a `PreparedRequest` object.\n\n    Args:\n    -----\n        `video` (Video):\n            The video object to use.\n        `options` (dict[str, Any] | None):\n            Extraction options specific to the chosen extraction method. If None,\n            default options will be used.\n        `skip_validation` (bool):\n            If True, skips validation of the extraction options. This can slightly\n            improve speed, but it is not recommended unless you are sure that the\n            options are valid.\n\n    Returns:\n    -----\n        `PreparedRequest`: A dataclass containing the prepared request details.\n    \"\"\"\n    if options is None:\n        return self.PREPARED_REQUEST_MAP[self.method](video).prepare()\n\n    if skip_validation:\n        return self.PREPARED_REQUEST_MAP[self.method](video, **options).prepare()\n\n    return self.REQUEST_MAP[self.method](**options).validate().prepare(video)\n</code></pre>"},{"location":"docs/handlers/#videoxt.handlers.ObjectFactory.make_extractor","title":"make_extractor","text":"<pre><code>make_extractor(prepared_request)\n</code></pre> <p>Use the given prepared request to create an <code>Extractor</code> object.</p>"},{"location":"docs/handlers/#videoxt.handlers.ObjectFactory.make_extractor--args","title":"Args:","text":"<pre><code>`prepared_request` (PreparedRequest): A type of prepared request to use.\n</code></pre>"},{"location":"docs/handlers/#videoxt.handlers.ObjectFactory.make_extractor--returns","title":"Returns:","text":"<pre><code>`Extractor`: A type of extractor object.\n</code></pre> Source code in <code>videoxt/handlers.py</code> <pre><code>def make_extractor(self, prepared_request: PreparedRequest) -&gt; Extractor:\n    \"\"\"\n    Use the given prepared request to create an `Extractor` object.\n\n    Args:\n    -----\n        `prepared_request` (PreparedRequest): A type of prepared request to use.\n\n    Returns:\n    -----\n        `Extractor`: A type of extractor object.\n    \"\"\"\n    return self.EXTRACTOR_MAP[self.method](prepared_request)\n</code></pre>"},{"location":"docs/handlers/#videoxt.handlers.ObjectFactory.make_result","title":"make_result","text":"<pre><code>make_result()\n</code></pre> <p>Create and return a <code>Result</code> object with the chosen extraction method.</p> Source code in <code>videoxt/handlers.py</code> <pre><code>def make_result(self) -&gt; Result:\n    \"\"\"Create and return a `Result` object with the chosen extraction method.\"\"\"\n    return Result(method=self.method.value)\n</code></pre>"},{"location":"docs/preppers/","title":"preppers","text":"<p>Contains functions, objects that prepare shared request values for extraction.</p>"},{"location":"docs/preppers/#videoxt.preppers.ExtractionRange","title":"ExtractionRange  <code>dataclass</code>","text":"<p>Container for variations of the user's requested extraction range.</p> <p>The range is represented in seconds, as timestamps, and frame numbers. Validations and preparations are run on init.</p>"},{"location":"docs/preppers/#videoxt.preppers.ExtractionRange--fields","title":"Fields:","text":"<pre><code>`duration_seconds` (float):\n    Duration of the video in seconds.\n`frame_count` (int):\n    Number of frames in the video.\n`start_time` (float | int | str):\n    Start time of the extraction in seconds or as a timestamp (`HH:MM:SS`).\n`stop_time` (float | int | str):\n    Stop time of the extraction in seconds or as a timestamp (`HH:MM:SS`).\n`fps` (float):\n    Frames per second to use for extraction.\n</code></pre>"},{"location":"docs/preppers/#videoxt.preppers.ExtractionRange--attributes","title":"Attributes:","text":"<pre><code>`start_second` (float):\n    Start time of the extraction in seconds.\n`stop_second` (float):\n    Stop time of the extraction in seconds.\n`start_timestamp` (str):\n    Start time of the extraction as a timestamp (`HH:MM:SS`).\n`stop_timestamp` (str):\n    Stop time of the extraction as a timestamp (`HH:MM:SS`).\n`start_frame` (int):\n    Start time of the extraction as a frame number.\n`stop_frame` (int):\n    Stop time of the extraction as a frame number.\n</code></pre>"},{"location":"docs/preppers/#videoxt.preppers.ExtractionRange--usage","title":"Usage:","text":"<pre><code>&gt;&gt;&gt; from videoxt.preppers import ExtractionRange\n&gt;&gt;&gt; extraction_range = ExtractionRange(\n...     duration_seconds=20,\n...     frame_count=600,\n...     start_time=10,\n...     stop_time=0,\n...     fps=30,\n... )\n&gt;&gt;&gt; extraction_range.start_second\n0\n&gt;&gt;&gt; extraction_range.stop_second\n10\n&gt;&gt;&gt; extraction_range.start_timestamp\n'0:00:00'\n&gt;&gt;&gt; extraction_range.stop_timestamp\n'0:00:10'\n&gt;&gt;&gt; extraction_range.start_frame\n0\n&gt;&gt;&gt; extraction_range.stop_frame\n300\n</code></pre>"},{"location":"docs/preppers/#videoxt.preppers.ExtractionRange.duration_seconds","title":"duration_seconds  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>duration_seconds = field(repr=False)\n</code></pre>"},{"location":"docs/preppers/#videoxt.preppers.ExtractionRange.frame_count","title":"frame_count  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>frame_count = field(repr=False)\n</code></pre>"},{"location":"docs/preppers/#videoxt.preppers.ExtractionRange.start_time","title":"start_time  <code>instance-attribute</code>","text":"<pre><code>start_time\n</code></pre>"},{"location":"docs/preppers/#videoxt.preppers.ExtractionRange.stop_time","title":"stop_time  <code>instance-attribute</code>","text":"<pre><code>stop_time\n</code></pre>"},{"location":"docs/preppers/#videoxt.preppers.ExtractionRange.fps","title":"fps  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>fps = field(repr=False)\n</code></pre>"},{"location":"docs/preppers/#videoxt.preppers.ExtractionRange.start_second","title":"start_second  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>start_second = field(init=False)\n</code></pre>"},{"location":"docs/preppers/#videoxt.preppers.ExtractionRange.stop_second","title":"stop_second  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>stop_second = field(init=False)\n</code></pre>"},{"location":"docs/preppers/#videoxt.preppers.ExtractionRange.start_timestamp","title":"start_timestamp  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>start_timestamp = field(init=False)\n</code></pre>"},{"location":"docs/preppers/#videoxt.preppers.ExtractionRange.stop_timestamp","title":"stop_timestamp  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>stop_timestamp = field(init=False)\n</code></pre>"},{"location":"docs/preppers/#videoxt.preppers.ExtractionRange.start_frame","title":"start_frame  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>start_frame = field(init=False)\n</code></pre>"},{"location":"docs/preppers/#videoxt.preppers.ExtractionRange.stop_frame","title":"stop_frame  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>stop_frame = field(init=False)\n</code></pre>"},{"location":"docs/preppers/#videoxt.preppers.ExtractionRange.to_dict","title":"to_dict","text":"<pre><code>to_dict()\n</code></pre> <p>Return a dictionary of the validated extraction start and stop points.</p> Source code in <code>videoxt/preppers.py</code> <pre><code>def to_dict(self) -&gt; dict[str, Any]:\n    \"\"\"Return a dictionary of the validated extraction start and stop points.\"\"\"\n    return {\n        \"start_second\": self.start_second,\n        \"stop_second\": self.stop_second,\n        \"start_timestamp\": self.start_timestamp,\n        \"stop_timestamp\": self.stop_timestamp,\n        \"start_frame\": self.start_frame,\n        \"stop_frame\": self.stop_frame,\n    }\n</code></pre>"},{"location":"docs/preppers/#videoxt.preppers.prepare_extraction_range","title":"prepare_extraction_range","text":"<pre><code>prepare_extraction_range(duration_seconds, frame_count, prepared_start_time=None, prepared_stop_time=None, prepared_fps=None)\n</code></pre> <p>Return a dictionary representing a validated extraction start and stop points.</p> <p>The dictionary contains variations of the requested start and stop times as seconds (float), timestamps (str), and frame numbers (int); including the requested values.</p>"},{"location":"docs/preppers/#videoxt.preppers.prepare_extraction_range--args","title":"Args:","text":"<pre><code>`duration_seconds` (float):\n    Duration of the video in seconds.\n`frame_count` (int):\n    Number of frames in the video.\n`prepared_start_time` (float | int | str | None):\n    Prepared start time of the extraction in seconds or as a timestamp\n    (`HH:MM:SS`).\n`request_stop_time` (float | int | str | None):\n    Prepared stop time of the extraction in seconds or as a timestamp\n    (`HH:MM:SS`).\n`prepared_fps` (float | None):\n    The prepared frames per second used to calculate the frame numbers.\n</code></pre>"},{"location":"docs/preppers/#videoxt.preppers.prepare_extraction_range--returns","title":"Returns:","text":"<pre><code>`dict[str, Any]`: Dictionary of validated extraction start and stop points.\n</code></pre>"},{"location":"docs/preppers/#videoxt.preppers.prepare_extraction_range--raises","title":"Raises:","text":"<pre><code>`PreparationError`: If the prepared start and stop times or fps are None.\n</code></pre> Source code in <code>videoxt/preppers.py</code> <pre><code>def prepare_extraction_range(\n    duration_seconds: float,\n    frame_count: int,\n    prepared_start_time: float | int | str | None = None,\n    prepared_stop_time: float | int | str | None = None,\n    prepared_fps: float | None = None,\n) -&gt; dict[str, Any]:\n    \"\"\"\n    Return a dictionary representing a validated extraction start and stop points.\n\n    The dictionary contains variations of the requested start and stop times as seconds\n    (float), timestamps (str), and frame numbers (int); including the requested values.\n\n    Args:\n    -----\n        `duration_seconds` (float):\n            Duration of the video in seconds.\n        `frame_count` (int):\n            Number of frames in the video.\n        `prepared_start_time` (float | int | str | None):\n            Prepared start time of the extraction in seconds or as a timestamp\n            (`HH:MM:SS`).\n        `request_stop_time` (float | int | str | None):\n            Prepared stop time of the extraction in seconds or as a timestamp\n            (`HH:MM:SS`).\n        `prepared_fps` (float | None):\n            The prepared frames per second used to calculate the frame numbers.\n\n    Returns:\n    -----\n        `dict[str, Any]`: Dictionary of validated extraction start and stop points.\n\n    Raises:\n    -----\n        `PreparationError`: If the prepared start and stop times or fps are None.\n    \"\"\"\n    if (\n        prepared_start_time is None\n        or prepared_stop_time is None\n        or prepared_fps is None\n    ):\n        raise PreparationError(\"Start time, stop time or fps are None.\")\n\n    extraction_range = ExtractionRange(\n        duration_seconds=duration_seconds,\n        frame_count=frame_count,\n        start_time=prepared_start_time,\n        stop_time=prepared_stop_time,\n        fps=prepared_fps,\n    )\n\n    return extraction_range.to_dict()\n</code></pre>"},{"location":"docs/preppers/#videoxt.preppers.prepare_dimensions","title":"prepare_dimensions","text":"<pre><code>prepare_dimensions(video_dimensions, request_dimensions=None, request_resize=None)\n</code></pre> <p>Return dimensions to use for extraction.</p>"},{"location":"docs/preppers/#videoxt.preppers.prepare_dimensions--args","title":"Args:","text":"<pre><code>`video_dimensions` (tuple[int, int]):\n    Dimensions of the video.\n`request_dimensions` (tuple[int, int] | None):\n    Optional dimensions that override the video's dimensions.\n`request_resize` (float | None):\n    Requested resize factor to apply to the video's dimensions.\n</code></pre>"},{"location":"docs/preppers/#videoxt.preppers.prepare_dimensions--returns","title":"Returns:","text":"<pre><code>`tuple[int, int]`: Dimensions to use for extraction.\n</code></pre> Source code in <code>videoxt/preppers.py</code> <pre><code>def prepare_dimensions(\n    video_dimensions: tuple[int, int],\n    request_dimensions: tuple[int, int] | None = None,\n    request_resize: float | None = None,\n) -&gt; tuple[int, int]:\n    \"\"\"\n    Return dimensions to use for extraction.\n\n    Args:\n    -----\n        `video_dimensions` (tuple[int, int]):\n            Dimensions of the video.\n        `request_dimensions` (tuple[int, int] | None):\n            Optional dimensions that override the video's dimensions.\n        `request_resize` (float | None):\n            Requested resize factor to apply to the video's dimensions.\n\n    Returns:\n    -----\n        `tuple[int, int]`: Dimensions to use for extraction.\n    \"\"\"\n    dims = request_dimensions or video_dimensions\n\n    if request_resize != 1.0 and request_resize is not None:\n        dims = (int(dims[0] * request_resize), int(dims[1] * request_resize))\n\n    return dims\n</code></pre>"},{"location":"docs/preppers/#videoxt.preppers.prepare_destpath","title":"prepare_destpath","text":"<pre><code>prepare_destpath(video_filepath, request_filename=None, request_destdir=None, prepared_suffix=None, prepared_overwrite=None)\n</code></pre> <p>Construct and return the destination path for the extracted file.</p>"},{"location":"docs/preppers/#videoxt.preppers.prepare_destpath--args","title":"Args:","text":"<pre><code>`video_filepath` (Path):\n    Path to the video file.\n`request_filename` (str | None):\n    Optional filename to use. Defaults to None.\n`request_destdir` (Path | None):\n    Optional directory to save the processed file. Defaults to None.\n`prepared_suffix` (str):\n    Required file suffix to use (with or without the leading '.').\n`prepared_overwrite` (bool):\n    If True, allows overwriting an existing file with the same name.\n    Defaults to False.\n</code></pre>"},{"location":"docs/preppers/#videoxt.preppers.prepare_destpath--returns","title":"Returns:","text":"<pre><code>`Path`: Path to the destination file.\n</code></pre>"},{"location":"docs/preppers/#videoxt.preppers.prepare_destpath--raises","title":"Raises:","text":"<pre><code>`PreparationError`: If the prepared suffix is None.\n</code></pre>"},{"location":"docs/preppers/#videoxt.preppers.prepare_destpath--notes","title":"Notes:","text":"<pre><code>- Uses `request_filename` with the specified `suffix` if provided; otherwise,\n    uses video file's name.\n- Saves the file in `request_destdir` if provided; otherwise, saves in the\n    video's directory.\n- Handles overwriting: if `overwrite` is True, may overwrite existing file with\n    the same name; if False, ensures a unique filename before saving.\n</code></pre> Source code in <code>videoxt/preppers.py</code> <pre><code>def prepare_destpath(\n    video_filepath: Path,\n    request_filename: str | None = None,\n    request_destdir: Path | None = None,\n    prepared_suffix: str | None = None,\n    prepared_overwrite: bool | None = None,\n) -&gt; Path:\n    \"\"\"\n    Construct and return the destination path for the extracted file.\n\n    Args:\n    -----\n        `video_filepath` (Path):\n            Path to the video file.\n        `request_filename` (str | None):\n            Optional filename to use. Defaults to None.\n        `request_destdir` (Path | None):\n            Optional directory to save the processed file. Defaults to None.\n        `prepared_suffix` (str):\n            Required file suffix to use (with or without the leading '.').\n        `prepared_overwrite` (bool):\n            If True, allows overwriting an existing file with the same name.\n            Defaults to False.\n\n    Returns:\n    -----\n        `Path`: Path to the destination file.\n\n    Raises:\n    -----\n        `PreparationError`: If the prepared suffix is None.\n\n    Notes:\n    -----\n        - Uses `request_filename` with the specified `suffix` if provided; otherwise,\n            uses video file's name.\n        - Saves the file in `request_destdir` if provided; otherwise, saves in the\n            video's directory.\n        - Handles overwriting: if `overwrite` is True, may overwrite existing file with\n            the same name; if False, ensures a unique filename before saving.\n    \"\"\"\n    if prepared_suffix is None:\n        raise PreparationError(\"Suffix is None.\")\n\n    base_dir = request_destdir or video_filepath.parent\n    suffix = (\n        prepared_suffix if prepared_suffix.startswith(\".\") else f\".{prepared_suffix}\"\n    )\n    filename = f\"{request_filename or video_filepath.stem}{suffix}\"\n    dest_path = base_dir / filename\n\n    if prepared_overwrite is True and dest_path != video_filepath:\n        return dest_path\n\n    return U.enumerate_filepath(dest_path, tag=\"_vxt\")\n</code></pre>"},{"location":"docs/preppers/#videoxt.preppers.prepare_start_time","title":"prepare_start_time","text":"<pre><code>prepare_start_time(request_start_time=None)\n</code></pre> <p>Return the start time requested or 0 if not provided.</p>"},{"location":"docs/preppers/#videoxt.preppers.prepare_start_time--args","title":"Args:","text":"<pre><code>`request_start_time` (float | int | str | None):\n    Optional start time requested. Defaults to None.\n</code></pre>"},{"location":"docs/preppers/#videoxt.preppers.prepare_start_time--returns","title":"Returns:","text":"<pre><code>`float | int | str`: The start time requested or 0 if not provided.\n</code></pre> Source code in <code>videoxt/preppers.py</code> <pre><code>def prepare_start_time(\n    request_start_time: float | int | str | None = None,\n) -&gt; float | int | str:\n    \"\"\"\n    Return the start time requested or 0 if not provided.\n\n    Args:\n    -----\n        `request_start_time` (float | int | str | None):\n            Optional start time requested. Defaults to None.\n\n    Returns:\n    -----\n        `float | int | str`: The start time requested or 0 if not provided.\n    \"\"\"\n    return request_start_time if request_start_time is not None else 0\n</code></pre>"},{"location":"docs/preppers/#videoxt.preppers.prepare_stop_time","title":"prepare_stop_time","text":"<pre><code>prepare_stop_time(video_duration_seconds, request_stop_time=None)\n</code></pre> <p>Return the stop time requested or the video's duration if not provided.</p>"},{"location":"docs/preppers/#videoxt.preppers.prepare_stop_time--args","title":"Args:","text":"<pre><code>`video_duration_seconds` (float):\n    Duration of the video in seconds.\n`request_stop_time` (float | int | str | None):\n    Optional stop time requested. Defaults to None.\n</code></pre>"},{"location":"docs/preppers/#videoxt.preppers.prepare_stop_time--returns","title":"Returns:","text":"<pre><code>`float | int | str`: The stop time requested or the video's duration if not\n    provided.\n</code></pre> Source code in <code>videoxt/preppers.py</code> <pre><code>def prepare_stop_time(\n    video_duration_seconds: float, request_stop_time: float | int | str | None = None\n) -&gt; float | int | str:\n    \"\"\"\n    Return the stop time requested or the video's duration if not provided.\n\n    Args:\n    -----\n        `video_duration_seconds` (float):\n            Duration of the video in seconds.\n        `request_stop_time` (float | int | str | None):\n            Optional stop time requested. Defaults to None.\n\n    Returns:\n    -----\n        `float | int | str`: The stop time requested or the video's duration if not\n            provided.\n    \"\"\"\n    return (\n        request_stop_time if request_stop_time is not None else video_duration_seconds\n    )\n</code></pre>"},{"location":"docs/preppers/#videoxt.preppers.prepare_fps","title":"prepare_fps","text":"<pre><code>prepare_fps(video_fps, request_fps=None)\n</code></pre> <p>Return the frames per second requested or the video's fps if not provided.</p>"},{"location":"docs/preppers/#videoxt.preppers.prepare_fps--args","title":"Args:","text":"<pre><code>`video_fps` (float):\n    Frames per second of the video.\n`request_fps` (float | None):\n    Optional frames per second requested. Defaults to None.\n</code></pre>"},{"location":"docs/preppers/#videoxt.preppers.prepare_fps--returns","title":"Returns:","text":"<pre><code>`float`: The frames per second requested or the video's fps if not provided.\n</code></pre> Source code in <code>videoxt/preppers.py</code> <pre><code>def prepare_fps(video_fps: float, request_fps: float | None = None) -&gt; float:\n    \"\"\"\n    Return the frames per second requested or the video's fps if not provided.\n\n    Args:\n    -----\n        `video_fps` (float):\n            Frames per second of the video.\n        `request_fps` (float | None):\n            Optional frames per second requested. Defaults to None.\n\n    Returns:\n    -----\n        `float`: The frames per second requested or the video's fps if not provided.\n    \"\"\"\n    return request_fps if request_fps is not None else video_fps\n</code></pre>"},{"location":"docs/preppers/#videoxt.preppers.prepare_destpath_frames","title":"prepare_destpath_frames","text":"<pre><code>prepare_destpath_frames(video_filepath, request_destdir=None, prepared_overwrite=None)\n</code></pre> <p>Return the directory extracted images will be saved in.</p> <p>If no specific <code>destdir</code> is requested, the images will be saved in a directory created in the same location as the video file. The directory will share the video file's name and have a '_frames' suffix.</p>"},{"location":"docs/preppers/#videoxt.preppers.prepare_destpath_frames--returns","title":"Returns:","text":"<pre><code>`Path`: The directory for saving images extracted from the video.\n</code></pre> Source code in <code>videoxt/preppers.py</code> <pre><code>def prepare_destpath_frames(\n    video_filepath: Path,\n    request_destdir: Path | None = None,\n    prepared_overwrite: bool | None = None,\n) -&gt; Path:\n    \"\"\"\n    Return the directory extracted images will be saved in.\n\n    If no specific `destdir` is requested, the images will be saved in a directory\n    created in the same location as the video file. The directory will share the\n    video file's name and have a '_frames' suffix.\n\n    Returns:\n    -----\n        `Path`: The directory for saving images extracted from the video.\n    \"\"\"\n    if request_destdir is not None and request_destdir != video_filepath:\n        return request_destdir\n\n    default_destdir = video_filepath.parent / video_filepath.name\n\n    if prepared_overwrite is True:\n        return default_destdir.with_name(f\"{video_filepath.name}_frames\")\n\n    return U.enumerate_dir(default_destdir, tag=\"_frames\")\n</code></pre>"},{"location":"docs/preppers/#videoxt.preppers.prepare_images_expected","title":"prepare_images_expected","text":"<pre><code>prepare_images_expected(start_frame=None, stop_frame=None, capture_rate=None)\n</code></pre> <p>Return the number of images (frames) expected to be written to disk.</p>"},{"location":"docs/preppers/#videoxt.preppers.prepare_images_expected--args","title":"Args:","text":"<pre><code>`start_frame` (int | None):\n    The frame number to start extraction from.\n`stop_frame` (int | None):\n    The frame number to stop extraction at.\n`capture_rate` (int | None):\n    The number of frames to increment by.\n</code></pre>"},{"location":"docs/preppers/#videoxt.preppers.prepare_images_expected--returns","title":"Returns:","text":"<pre><code>`int`: The number of images expected to be extracted.\n</code></pre>"},{"location":"docs/preppers/#videoxt.preppers.prepare_images_expected--raises","title":"Raises:","text":"<pre><code>`PreparationError`:\n- If the start frame, stop frame or capture rate is None\n- If the capture rate is zero.\n</code></pre> Source code in <code>videoxt/preppers.py</code> <pre><code>def prepare_images_expected(\n    start_frame: int | None = None,\n    stop_frame: int | None = None,\n    capture_rate: int | None = None,\n) -&gt; int:\n    \"\"\"\n    Return the number of images (frames) expected to be written to disk.\n\n    Args:\n    -----\n        `start_frame` (int | None):\n            The frame number to start extraction from.\n        `stop_frame` (int | None):\n            The frame number to stop extraction at.\n        `capture_rate` (int | None):\n            The number of frames to increment by.\n\n    Returns:\n    -----\n        `int`: The number of images expected to be extracted.\n\n    Raises:\n    -----\n        `PreparationError`:\n        - If the start frame, stop frame or capture rate is None\n        - If the capture rate is zero.\n    \"\"\"\n    if start_frame is None or stop_frame is None or capture_rate is None:\n        raise PreparationError(\"Start frame, stop frame or capture rate is None.\")\n\n    try:\n        return math.ceil((stop_frame - start_frame) / capture_rate)\n    except ZeroDivisionError as e:\n        raise PreparationError(\"Capture rate is zero.\") from e\n</code></pre>"},{"location":"docs/requesters/","title":"requesters","text":"<p>Contains Request models that validate and prepare a request for extraction.</p>"},{"location":"docs/requesters/#videoxt.requesters.Request","title":"Request  <code>dataclass</code>","text":"<p>             Bases: <code>ABC</code></p> <p>Protocol defining the interface for validating and preparing extraction requests.</p>"},{"location":"docs/requesters/#videoxt.requesters.Request--public-methods","title":"Public Methods:","text":"<pre><code>`validate()` -&gt; `Request`:\n    Validate fields if specified and return a validated request of the same\n    type.\n`prepare()` -&gt; `PreparedRequest`:\n    Construct and return a prepared request using a video and a validated\n    request of some type. A prepared request is required by an extractor of the\n    same type.\n</code></pre>"},{"location":"docs/requesters/#videoxt.requesters.Request--properties","title":"Properties:","text":"<pre><code>`is_validated` (bool): If the request has been validated.\n</code></pre>"},{"location":"docs/requesters/#videoxt.requesters.Request.is_validated","title":"is_validated  <code>abstractmethod</code> <code>property</code>","text":"<pre><code>is_validated\n</code></pre> <p>Return True if <code>Request</code> has been validated, False otherwise.</p>"},{"location":"docs/requesters/#videoxt.requesters.Request.validate","title":"validate  <code>abstractmethod</code>","text":"<pre><code>validate()\n</code></pre> <p>Validate fields if specified and return a validated request of the same type.</p> Source code in <code>videoxt/requesters.py</code> <pre><code>@abstractmethod\ndef validate(self) -&gt; \"Request\":\n    \"\"\"\n    Validate fields if specified and return a validated request of the same type.\n    \"\"\"\n    ...\n</code></pre>"},{"location":"docs/requesters/#videoxt.requesters.Request.prepare","title":"prepare  <code>abstractmethod</code>","text":"<pre><code>prepare(video)\n</code></pre> <p>Construct and return a prepared request using a video and a validated request of some type. A prepared request is required by an extractor of the same type.</p> Source code in <code>videoxt/requesters.py</code> <pre><code>@abstractmethod\ndef prepare(self, video: Video) -&gt; \"PreparedRequest\":\n    \"\"\"\n    Construct and return a prepared request using a video and a validated request\n    of some type. A prepared request is required by an extractor of the same type.\n    \"\"\"\n    ...\n</code></pre>"},{"location":"docs/requesters/#videoxt.requesters.BaseRequest","title":"BaseRequest  <code>dataclass</code>","text":"<p>             Bases: <code>Request</code></p> <p>Stores, validates and prepares extraction request arguments shared by all methods.</p>"},{"location":"docs/requesters/#videoxt.requesters.BaseRequest--fields","title":"Fields","text":"<pre><code>`start_time` (float | int | str | None):\n    Specify the extraction's start time in seconds, or as a string in \"HH:MM:SS\"\n    format. Defaults to 0 if not specified.\n`stop_time` (float | int | str | None):\n    Specify the extraction's stop time in seconds, or as a string in \"HH:MM:SS\"\n    format. Defaults to the video duration if not specified.\n`destdir` (Path | None):\n    Specify the directory you want to save output to. Defaults to the video's\n    directory if not specified.\n`filename` (str | None):\n    Specify the name of the extracted file(s). Defaults to the video filename\n    if not specified.\n`verbose` (bool | None):\n    If True, the prepared request and extraction results will be printed as JSON\n    to console. Defaults to False if not specified.\n`overwrite` (bool | None):\n    If True, permits overwriting the destination path if the file or directory\n    already exists. Defaults to False if not specified.\n`fps` (float | None):\n    Override the frames per second (fps) value obtained from `cv2` when reading\n    the video. This value is used to set the start and stop frames for the\n    extraction range. This option should be used only in rare cases where `cv2`\n    fails to accurately read the fps. If not specified, it defaults to the fps\n    of the video as read by `cv2`.\n</code></pre>"},{"location":"docs/requesters/#videoxt.requesters.BaseRequest--public-methods","title":"Public Methods","text":"<pre><code>- `validate()` -&gt; `BaseRequest`:\n    Validate fields if specified and return a validated `BaseRequest`.\n- `prepare()` -&gt; `PreparedBaseRequest`:\n    Construct and return a prepared base request using a video and a base\n    request. A prepared base request is not used by any extractor. Its sole\n    purpose is to validate and prepare the shared request arguments.\n</code></pre>"},{"location":"docs/requesters/#videoxt.requesters.BaseRequest--properties","title":"Properties","text":"<pre><code>- `is_validated` -&gt; `bool`: If the request has been validated.\n</code></pre>"},{"location":"docs/requesters/#videoxt.requesters.BaseRequest.start_time","title":"start_time  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>start_time = None\n</code></pre>"},{"location":"docs/requesters/#videoxt.requesters.BaseRequest.stop_time","title":"stop_time  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>stop_time = None\n</code></pre>"},{"location":"docs/requesters/#videoxt.requesters.BaseRequest.destdir","title":"destdir  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>destdir = None\n</code></pre>"},{"location":"docs/requesters/#videoxt.requesters.BaseRequest.filename","title":"filename  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>filename = None\n</code></pre>"},{"location":"docs/requesters/#videoxt.requesters.BaseRequest.verbose","title":"verbose  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>verbose = None\n</code></pre>"},{"location":"docs/requesters/#videoxt.requesters.BaseRequest.overwrite","title":"overwrite  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>overwrite = None\n</code></pre>"},{"location":"docs/requesters/#videoxt.requesters.BaseRequest.fps","title":"fps  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>fps = None\n</code></pre>"},{"location":"docs/requesters/#videoxt.requesters.BaseRequest.is_validated","title":"is_validated  <code>property</code>","text":"<pre><code>is_validated\n</code></pre> <p>Return True if <code>Request</code> has been validated, False otherwise.</p>"},{"location":"docs/requesters/#videoxt.requesters.BaseRequest.validate","title":"validate","text":"<pre><code>validate()\n</code></pre> <p>Validate fields if specified and return a validated <code>BaseRequest</code>.</p> Source code in <code>videoxt/requesters.py</code> <pre><code>def validate(self) -&gt; \"BaseRequest\":\n    \"\"\"Validate fields if specified and return a validated `BaseRequest`.\"\"\"\n    self._validate_start_time()\n    self._validate_stop_time()\n    self._validate_fps()\n    self._validate_destdir()\n    self._validate_filename()\n    return self\n</code></pre>"},{"location":"docs/requesters/#videoxt.requesters.BaseRequest.prepare","title":"prepare","text":"<pre><code>prepare(video)\n</code></pre> <p>Construct and return a <code>PreparedBaseRequest</code> using self and a <code>Video</code>.</p>"},{"location":"docs/requesters/#videoxt.requesters.BaseRequest.prepare--args","title":"Args:","text":"<pre><code>`video` (Video): Contains video metadata used to prepare request.\n</code></pre>"},{"location":"docs/requesters/#videoxt.requesters.BaseRequest.prepare--returns","title":"Returns:","text":"<pre><code>`PreparedBaseRequest`: A prepared base extraction request.\n</code></pre> Source code in <code>videoxt/requesters.py</code> <pre><code>def prepare(self, video: Video) -&gt; \"PreparedBaseRequest\":\n    \"\"\"\n    Construct and return a `PreparedBaseRequest` using self and a `Video`.\n\n    Args:\n    -----\n        `video` (Video): Contains video metadata used to prepare request.\n\n    Returns:\n    -----\n        `PreparedBaseRequest`: A prepared base extraction request.\n    \"\"\"\n    p = PreparedBaseRequest(\n        video=video,\n        start_time=self.start_time,\n        stop_time=self.stop_time,\n        fps=self.fps,\n        destdir=self.destdir,\n        filename=self.filename,\n        verbose=self.verbose,\n    )\n    p.prepare()\n    return p\n</code></pre>"},{"location":"docs/requesters/#videoxt.requesters.AudioRequest","title":"AudioRequest  <code>dataclass</code>","text":"<p>             Bases: <code>BaseRequest</code></p> <p>Stores, validates and prepares 'audio' extraction request arguments.</p>"},{"location":"docs/requesters/#videoxt.requesters.AudioRequest--fields","title":"Fields","text":"<pre><code>`start_time` (float | int | str | None):\n    Specify the extraction's start time in seconds, or as a string in \"HH:MM:SS\"\n    format. Defaults to 0 if not specified.\n`stop_time` (float | int | str | None):\n    Specify the extraction's stop time in seconds, or as a string in \"HH:MM:SS\"\n    format. Defaults to the video duration if not specified.\n`destdir` (Path | None):\n    Specify the directory you want to save output to. Defaults to the video's\n    directory if not specified.\n`filename` (str | None):\n    Specify the name of the extracted file(s). Defaults to the video filename\n    if not specified.\n`verbose` (bool | None):\n    If True, the prepared request and extraction results will be printed as JSON\n    to console. Defaults to False if not specified.\n`overwrite` (bool | None):\n    If True, permits overwriting the destination path if the file or directory\n    already exists. Defaults to False if not specified.\n`fps` (float | None):\n    Override the frames per second (fps) value obtained from `cv2` when reading\n    the video. This value is used to set the start and stop frames for the\n    extraction range. This option should be used only in rare cases where `cv2`\n    fails to accurately read the fps. If not specified, it defaults to the fps\n    of the video as read by `cv2`.\n`audio_format` (str | None):\n    Set the extracted audio file format. Defaults to 'mp3' if not specified.\n    See: `videoxt.constants.SUPPORTED_AUDIO_FORMATS`.\n`speed` (float | None):\n    Set the speed of the extracted audio. A value of 0.5 will halve the speed of\n    the extracted audio. Defaults to 1.0 if not specified (no change).\n`bounce` (bool | None):\n    If True, bounce the extracted audio bommerang-style. Defaults to False if\n    not specified.\n`reverse` (bool | None):\n    If True, reverse the extracted audio. Defaults to False if not specified.\n`volume` (float | None):\n    Set the volume of the extracted audio. A value of 0.5 will halve the volume\n    of the extracted audio. Defaults to 1.0 if not specified (no change).\n`normalize` (bool | None):\n    If True, normalize the audio. Normalization adjusts the gain of the audio to\n    ensure consistent levels, preventing distortion and enhancing clarity in\n    some cases. Defaults to False if not specified.\n</code></pre>"},{"location":"docs/requesters/#videoxt.requesters.AudioRequest--public-methods","title":"Public Methods","text":"<pre><code>- `validate()` -&gt; `AudioRequest`:\n    Validate fields if specified and return a validated `AudioRequest`.\n- `prepare()` -&gt; `PreparedAudioRequest`:\n    Construct and return a prepared audio request using a video and a validated\n    `AudioRequest`. A prepared audio request is required by an `AudioExtractor`.\n</code></pre>"},{"location":"docs/requesters/#videoxt.requesters.AudioRequest--properties","title":"Properties","text":"<pre><code>- `is_validated` -&gt; `bool`: If the request has been validated.\n</code></pre>"},{"location":"docs/requesters/#videoxt.requesters.AudioRequest.audio_format","title":"audio_format  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>audio_format = None\n</code></pre>"},{"location":"docs/requesters/#videoxt.requesters.AudioRequest.speed","title":"speed  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>speed = None\n</code></pre>"},{"location":"docs/requesters/#videoxt.requesters.AudioRequest.bounce","title":"bounce  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>bounce = None\n</code></pre>"},{"location":"docs/requesters/#videoxt.requesters.AudioRequest.reverse","title":"reverse  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>reverse = None\n</code></pre>"},{"location":"docs/requesters/#videoxt.requesters.AudioRequest.volume","title":"volume  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>volume = None\n</code></pre>"},{"location":"docs/requesters/#videoxt.requesters.AudioRequest.normalize","title":"normalize  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>normalize = None\n</code></pre>"},{"location":"docs/requesters/#videoxt.requesters.AudioRequest.validate","title":"validate","text":"<pre><code>validate()\n</code></pre> <p>Validate fields if specified and return a validated <code>AudioRequest</code>.</p> Source code in <code>videoxt/requesters.py</code> <pre><code>def validate(self) -&gt; \"AudioRequest\":\n    \"\"\"Validate fields if specified and return a validated `AudioRequest`.\"\"\"\n    super().validate()\n    self._validate_audio_format()\n    self._validate_speed()\n    self._validate_volume()\n    self._is_validated = True\n    return self\n</code></pre>"},{"location":"docs/requesters/#videoxt.requesters.AudioRequest.prepare","title":"prepare","text":"<pre><code>prepare(video)\n</code></pre> <p>Construct and return a <code>PreparedAudioRequest</code> using self and a <code>Video</code>.</p> <p>Fields will validate before preparation if not validated.</p>"},{"location":"docs/requesters/#videoxt.requesters.AudioRequest.prepare--args","title":"Args:","text":"<pre><code>`video` (Video): Contains video metadata used to prepare request.\n</code></pre>"},{"location":"docs/requesters/#videoxt.requesters.AudioRequest.prepare--returns","title":"Returns:","text":"<pre><code>`PreparedAudioRequest`:\n    A prepared audio extraction request, required by an `AudioExtractor`.\n</code></pre> Source code in <code>videoxt/requesters.py</code> <pre><code>def prepare(self, video: Video) -&gt; \"PreparedAudioRequest\":\n    \"\"\"\n    Construct and return a `PreparedAudioRequest` using self and a `Video`.\n\n    Fields will validate before preparation if not validated.\n\n    Args:\n    -----\n        `video` (Video): Contains video metadata used to prepare request.\n\n    Returns:\n    -----\n        `PreparedAudioRequest`:\n            A prepared audio extraction request, required by an `AudioExtractor`.\n    \"\"\"\n    if not self.is_validated:\n        self.validate()  # XXX: log\n\n    p = PreparedAudioRequest(\n        video=video,\n        start_time=self.start_time,\n        stop_time=self.stop_time,\n        destdir=self.destdir,\n        filename=self.filename,\n        verbose=self.verbose,\n        overwrite=self.overwrite,\n        fps=self.fps,\n        audio_format=self.audio_format,\n        speed=self.speed,\n        bounce=self.bounce,\n        reverse=self.reverse,\n        volume=self.volume,\n        normalize=self.normalize,\n    )\n    p.prepare()\n    return p\n</code></pre>"},{"location":"docs/requesters/#videoxt.requesters.ClipRequest","title":"ClipRequest  <code>dataclass</code>","text":"<p>             Bases: <code>BaseRequest</code></p> <p>Stores, validates and prepares 'clip' extraction request arguments.</p> <p>Recommended usage: Set a short extraction range. The process can be slow for long or high-resolution videos.</p>"},{"location":"docs/requesters/#videoxt.requesters.ClipRequest--fields","title":"Fields","text":"<pre><code>`start_time` (float | int | str | None):\n    Specify the extraction's start time in seconds, or as a string in \"HH:MM:SS\"\n    format. Defaults to 0 if not specified.\n`stop_time` (float | int | str | None):\n    Specify the extraction's stop time in seconds, or as a string in \"HH:MM:SS\"\n    format. Defaults to the video duration if not specified.\n`destdir` (Path | None):\n    Specify the directory you want to save output to. Defaults to the video's\n    directory if not specified.\n`filename` (str | None):\n    Specify the name of the extracted file(s). Defaults to the video filename\n    if not specified.\n`verbose` (bool | None):\n    If True, the prepared request and extraction results will be printed as JSON\n    to console. Defaults to False if not specified.\n`overwrite` (bool | None):\n    If True, permits overwriting the destination path if the file or directory\n    already exists. Defaults to False if not specified.\n`fps` (float | None):\n    Override the frames per second (fps) value obtained from `cv2` when reading\n    the video. This value is used to set the start and stop frames for the\n    extraction range. This option should be used only in rare cases where `cv2`\n    fails to accurately read the fps. If not specified, it defaults to the fps\n    of the video as read by `cv2`.\n`dimensions` (tuple[int, int] | None):\n    Specify the dimensions (frame width, frame height) of the clip. Defaults to\n    the video dimensions if not specified.\n`resize` (float | None):\n    Resize the dimensions of the clip by a factor of `n`. A value of 0.5\n    will halve the dimensions. If you specify `dimensions`, `resize` will apply\n    to the dimensions you specify. Defaults to 1.0 if not specified (no change).\n`rotate` (int | None):\n    Rotate the clip by `n` degrees. Allowed values: 0, 90, 180 or 270. Defaults\n    to 0 if not specified (no change).\n`speed` (float | None):\n    Set the speed of the extracted clip. A value of 0.5 will halve the playback\n    speed of the clip. Defaults to 1.0 if not specified (no change).\n`bounce` (bool | None):\n    If True, bounce the extracted clip bommerang-style. Defaults to False if\n    not specified.\n`reverse` (bool | None):\n    If True, reverse the extracted clip. Defaults to False if not specified.\n`monochrome` (bool | None):\n    If True, apply a black-and-white filter to the clip. Defaults to False if\n    not specified.\n`volume` (float | None):\n    Set the volume of the extracted clip's audio. A value of 0.5 will halve the\n    volume of the clip's audio. Defaults to 1.0 if not specified (no change).\n`normalize` (bool | None):\n    If True, normalize the audio. Normalization adjusts the gain of the audio to\n    ensure consistent levels, preventing distortion and enhancing clarity in\n    some cases. Defaults to False if not specified.\n</code></pre>"},{"location":"docs/requesters/#videoxt.requesters.ClipRequest--public-methods","title":"Public Methods","text":"<pre><code>- `validate()` -&gt; `ClipRequest`:\n    Validate fields if specified and return a validated `ClipRequest`.\n- `prepare()` -&gt; `PreparedClipRequest`:\n    Construct and return a prepared clip request using a video and a validated\n    `ClipRequest`. A prepared clip request is required by a `ClipExtractor`.\n</code></pre>"},{"location":"docs/requesters/#videoxt.requesters.ClipRequest--properties","title":"Properties","text":"<pre><code>- `is_validated` -&gt; `bool`: If the request has been validated.\n</code></pre>"},{"location":"docs/requesters/#videoxt.requesters.ClipRequest.dimensions","title":"dimensions  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>dimensions = None\n</code></pre>"},{"location":"docs/requesters/#videoxt.requesters.ClipRequest.resize","title":"resize  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>resize = None\n</code></pre>"},{"location":"docs/requesters/#videoxt.requesters.ClipRequest.rotate","title":"rotate  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>rotate = None\n</code></pre>"},{"location":"docs/requesters/#videoxt.requesters.ClipRequest.speed","title":"speed  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>speed = None\n</code></pre>"},{"location":"docs/requesters/#videoxt.requesters.ClipRequest.bounce","title":"bounce  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>bounce = None\n</code></pre>"},{"location":"docs/requesters/#videoxt.requesters.ClipRequest.reverse","title":"reverse  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>reverse = None\n</code></pre>"},{"location":"docs/requesters/#videoxt.requesters.ClipRequest.monochrome","title":"monochrome  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>monochrome = None\n</code></pre>"},{"location":"docs/requesters/#videoxt.requesters.ClipRequest.volume","title":"volume  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>volume = None\n</code></pre>"},{"location":"docs/requesters/#videoxt.requesters.ClipRequest.normalize","title":"normalize  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>normalize = None\n</code></pre>"},{"location":"docs/requesters/#videoxt.requesters.ClipRequest.validate","title":"validate","text":"<pre><code>validate()\n</code></pre> <p>Validate fields if specified and return a validated <code>ClipRequest</code>.</p> Source code in <code>videoxt/requesters.py</code> <pre><code>def validate(self) -&gt; \"ClipRequest\":\n    \"\"\"Validate fields if specified and return a validated `ClipRequest`.\"\"\"\n    super().validate()\n    self._validate_resize()\n    self._validate_dimensions()\n    self._validate_rotate()\n    self._validate_speed()\n    self._validate_volume()\n    self._is_validated = True\n    return self\n</code></pre>"},{"location":"docs/requesters/#videoxt.requesters.ClipRequest.prepare","title":"prepare","text":"<pre><code>prepare(video)\n</code></pre> <p>Construct and return a <code>PreparedClipRequest</code> using self and a <code>Video</code>.</p> <p>Fields will validate before preparation if not validated.</p>"},{"location":"docs/requesters/#videoxt.requesters.ClipRequest.prepare--args","title":"Args:","text":"<pre><code>`video` (Video): Contains video metadata used to prepare request.\n</code></pre>"},{"location":"docs/requesters/#videoxt.requesters.ClipRequest.prepare--returns","title":"Returns:","text":"<pre><code>`PreparedClipRequest`:\n    A prepared clip extraction request, required by a `ClipExtractor`.\n</code></pre> Source code in <code>videoxt/requesters.py</code> <pre><code>def prepare(self, video: Video) -&gt; \"PreparedClipRequest\":\n    \"\"\"\n    Construct and return a `PreparedClipRequest` using self and a `Video`.\n\n    Fields will validate before preparation if not validated.\n\n    Args:\n    -----\n        `video` (Video): Contains video metadata used to prepare request.\n\n    Returns:\n    -----\n        `PreparedClipRequest`:\n            A prepared clip extraction request, required by a `ClipExtractor`.\n    \"\"\"\n    if not self.is_validated:\n        self.validate()  # XXX: log\n\n    p = PreparedClipRequest(\n        video=video,\n        start_time=self.start_time,\n        stop_time=self.stop_time,\n        destdir=self.destdir,\n        filename=self.filename,\n        verbose=self.verbose,\n        overwrite=self.overwrite,\n        fps=self.fps,\n        dimensions=self.dimensions,\n        resize=self.resize,\n        rotate=self.rotate,\n        speed=self.speed,\n        bounce=self.bounce,\n        reverse=self.reverse,\n        monochrome=self.monochrome,\n        volume=self.volume,\n        normalize=self.normalize,\n    )\n    p.prepare()\n    return p\n</code></pre>"},{"location":"docs/requesters/#videoxt.requesters.FramesRequest","title":"FramesRequest  <code>dataclass</code>","text":"<p>             Bases: <code>BaseRequest</code></p> <p>Stores, validates and prepares 'frames' extraction request arguments.</p> <p>The images are saved to a directory named after the video file, or to a directory you specify.</p>"},{"location":"docs/requesters/#videoxt.requesters.FramesRequest--fields","title":"Fields","text":"<pre><code>`start_time` (float | int | str | None):\n    Specify the extraction's start time in seconds, or as a string in \"HH:MM:SS\"\n    format. Defaults to 0 if not specified.\n`stop_time` (float | int | str | None):\n    Specify the extraction's stop time in seconds, or as a string in \"HH:MM:SS\"\n    format. Defaults to the video duration if not specified.\n`destdir` (Path | None):\n    Specify the directory you want to save output to. Defaults to the video's\n    directory if not specified.\n`filename` (str | None):\n    Specify the name of the extracted file(s). Defaults to the video filename\n    if not specified.\n`verbose` (bool | None):\n    If True, the prepared request and extraction results will be printed as JSON\n    to console. Defaults to False if not specified.\n`overwrite` (bool | None):\n    If True, permits overwriting the destination path if the file or directory\n    already exists. Defaults to False if not specified.\n`fps` (float | None):\n    Override the frames per second (fps) value obtained from `cv2` when reading\n    the video. This value is used to set the start and stop frames for the\n    extraction range. This option should be used only in rare cases where `cv2`\n    fails to accurately read the fps. If not specified, it defaults to the fps\n    of the video as read by `cv2`.\n`image_format` (str | None):\n    Set the extracted image file format. Defaults to 'jpg' if not specified.\n    See: `videoxt.constants.SUPPORTED_IMAGE_FORMATS`.\n`capture_rate` (int | None):\n    Capture every Nth video frame. Defaults to 1 if not specified, which\n    extracts every frame within the extraction range.\n`dimensions` (tuple[int, int] | None):\n    Specify the dimensions (frame width, frame height) of the images. Defaults\n    to the video dimensions if not specified.\n`resize` (float | None):\n    Resize the dimensions of the images by a factor of `n`. A value of 0.5\n    will halve the dimensions. If you specify `dimensions`, `resize` will apply\n    to the dimensions you specify. Defaults to 1.0 if not specified (no change).\n`rotate` (int | None):\n    Rotate the images by `n` degrees. Allowed values: 0, 90, 180 or 270.\n    Defaults to 0 if not specified (no change).\n`monochrome` (bool | None):\n    If True, apply a black-and-white filter to the images. Defaults to False if\n    not specified.\n</code></pre>"},{"location":"docs/requesters/#videoxt.requesters.FramesRequest--public-methods","title":"Public Methods","text":"<pre><code>- `validate()` -&gt; `FramesRequest`:\n    Validate fields if specified and return a validated `FramesRequest`.\n- `prepare()` -&gt; `PreparedFramesRequest`:\n    Construct and return a prepared frames request using a video and a validated\n    `FramesRequest`. A prepared frames request is required by a\n    `FramesExtractor`.\n</code></pre>"},{"location":"docs/requesters/#videoxt.requesters.FramesRequest--properties","title":"Properties","text":"<pre><code>- `is_validated` -&gt; `bool`: If the request has been validated.\n</code></pre>"},{"location":"docs/requesters/#videoxt.requesters.FramesRequest.image_format","title":"image_format  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>image_format = None\n</code></pre>"},{"location":"docs/requesters/#videoxt.requesters.FramesRequest.capture_rate","title":"capture_rate  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>capture_rate = None\n</code></pre>"},{"location":"docs/requesters/#videoxt.requesters.FramesRequest.dimensions","title":"dimensions  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>dimensions = None\n</code></pre>"},{"location":"docs/requesters/#videoxt.requesters.FramesRequest.resize","title":"resize  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>resize = None\n</code></pre>"},{"location":"docs/requesters/#videoxt.requesters.FramesRequest.rotate","title":"rotate  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>rotate = None\n</code></pre>"},{"location":"docs/requesters/#videoxt.requesters.FramesRequest.monochrome","title":"monochrome  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>monochrome = None\n</code></pre>"},{"location":"docs/requesters/#videoxt.requesters.FramesRequest.validate","title":"validate","text":"<pre><code>validate()\n</code></pre> <p>Validate fields if specified and return a validated <code>FramesRequest</code>.</p> Source code in <code>videoxt/requesters.py</code> <pre><code>def validate(self) -&gt; \"FramesRequest\":\n    \"\"\"Validate fields if specified and return a validated `FramesRequest`.\"\"\"\n    super().validate()\n    self._validate_image_format()\n    self._validate_capture_rate()\n    self._validate_resize()\n    self._validate_dimensions()\n    self._validate_rotate()\n    self._is_validated = True\n    return self\n</code></pre>"},{"location":"docs/requesters/#videoxt.requesters.FramesRequest.prepare","title":"prepare","text":"<pre><code>prepare(video)\n</code></pre> <p>Construct and return a <code>PreparedFramesRequest</code> using self and a <code>Video</code>.</p> <p>Fields will validate before preparation if not validated.</p>"},{"location":"docs/requesters/#videoxt.requesters.FramesRequest.prepare--args","title":"Args:","text":"<pre><code>`video` (Video): Contains video metadata used to prepare request.\n</code></pre>"},{"location":"docs/requesters/#videoxt.requesters.FramesRequest.prepare--returns","title":"Returns:","text":"<pre><code>`PreparedFramesRequest`:\n    A prepared frames extraction request, required by a `FramesExtractor`.\n</code></pre> Source code in <code>videoxt/requesters.py</code> <pre><code>def prepare(self, video: Video) -&gt; \"PreparedFramesRequest\":\n    \"\"\"\n    Construct and return a `PreparedFramesRequest` using self and a `Video`.\n\n    Fields will validate before preparation if not validated.\n\n    Args:\n    -----\n        `video` (Video): Contains video metadata used to prepare request.\n\n    Returns:\n    -----\n        `PreparedFramesRequest`:\n            A prepared frames extraction request, required by a `FramesExtractor`.\n    \"\"\"\n    if not self.is_validated:\n        self.validate()  # XXX: log\n\n    p = PreparedFramesRequest(\n        video=video,\n        start_time=self.start_time,\n        stop_time=self.stop_time,\n        destdir=self.destdir,\n        filename=self.filename,\n        verbose=self.verbose,\n        overwrite=self.overwrite,\n        fps=self.fps,\n        image_format=self.image_format,\n        capture_rate=self.capture_rate,\n        dimensions=self.dimensions,\n        resize=self.resize,\n        rotate=self.rotate,\n        monochrome=self.monochrome,\n    )\n    p.prepare()\n    return p\n</code></pre>"},{"location":"docs/requesters/#videoxt.requesters.GifRequest","title":"GifRequest  <code>dataclass</code>","text":"<p>             Bases: <code>BaseRequest</code></p> <p>Stores, validates and prepares 'gif' extraction request arguments.</p> <p>Recommended usage: Set a short extraction range. The process can be slow for long or high-resolution videos.</p>"},{"location":"docs/requesters/#videoxt.requesters.GifRequest--fields","title":"Fields","text":"<pre><code>`start_time` (float | int | str | None):\n    Specify the extraction's start time in seconds, or as a string in \"HH:MM:SS\"\n    format. Defaults to 0 if not specified.\n`stop_time` (float | int | str | None):\n    Specify the extraction's stop time in seconds, or as a string in \"HH:MM:SS\"\n    format. Defaults to the video duration if not specified.\n`destdir` (Path | None):\n    Specify the directory you want to save output to. Defaults to the video's\n    directory if not specified.\n`filename` (str | None):\n    Specify the name of the extracted file(s). Defaults to the video filename\n    if not specified.\n`verbose` (bool | None):\n    If True, the prepared request and extraction results will be printed as JSON\n    to console. Defaults to False if not specified.\n`overwrite` (bool | None):\n    If True, permits overwriting the destination path if the file or directory\n    already exists. Defaults to False if not specified.\n`fps` (float | None):\n    Override the frames per second (fps) value obtained from `cv2` when reading\n    the video. This value is used to set the start and stop frames for the\n    extraction range. This option should be used only in rare cases where `cv2`\n    fails to accurately read the fps. If not specified, it defaults to the fps\n    of the video as read by `cv2`.\n`dimensions` (tuple[int, int] | None):\n    Specify the dimensions (frame width, frame height) of the gif. Defaults to\n    the video dimensions if not specified.\n`resize` (float | None):\n    Resize the dimensions of the gif by a factor of `n`. A value of 0.5\n    will halve the dimensions. If you specify `dimensions`, `resize` will apply\n    to the dimensions you specify. Defaults to 1.0 if not specified (no change).\n`rotate` (int | None):\n    Rotate the gif by `n` degrees. Allowed values: 0, 90, 180 or 270. Defaults\n    to 0 if not specified (no change).\n`speed` (float | None):\n    Set the speed of the extracted gif. A value of 0.5 will halve the playback\n    speed of the gif. Defaults to 1.0 if not specified (no change).\n`bounce` (bool | None):\n    If True, bounce the extracted gif bommerang-style. Defaults to False if\n    not specified.\n`reverse` (bool | None):\n    If True, reverse the extracted gif. Defaults to False if not specified.\n`monochrome` (bool | None):\n    If True, apply a black-and-white filter to the gif. Defaults to False if\n    not specified.\n</code></pre>"},{"location":"docs/requesters/#videoxt.requesters.GifRequest--public-methods","title":"Public Methods","text":"<pre><code>- `validate()` -&gt; `GifRequest`:\n    Validate fields if specified and return a validated `GifRequest`.\n- `prepare()` -&gt; `PreparedGifRequest`:\n    Construct and return a prepared gif request using a video and a validated\n    `GifRequest`. A prepared gif request is required by a `GifExtractor`.\n</code></pre>"},{"location":"docs/requesters/#videoxt.requesters.GifRequest--properties","title":"Properties","text":"<pre><code>- `is_validated` -&gt; `bool`: If the request has been validated.\n</code></pre>"},{"location":"docs/requesters/#videoxt.requesters.GifRequest.dimensions","title":"dimensions  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>dimensions = None\n</code></pre>"},{"location":"docs/requesters/#videoxt.requesters.GifRequest.resize","title":"resize  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>resize = None\n</code></pre>"},{"location":"docs/requesters/#videoxt.requesters.GifRequest.rotate","title":"rotate  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>rotate = None\n</code></pre>"},{"location":"docs/requesters/#videoxt.requesters.GifRequest.speed","title":"speed  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>speed = None\n</code></pre>"},{"location":"docs/requesters/#videoxt.requesters.GifRequest.bounce","title":"bounce  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>bounce = None\n</code></pre>"},{"location":"docs/requesters/#videoxt.requesters.GifRequest.reverse","title":"reverse  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>reverse = None\n</code></pre>"},{"location":"docs/requesters/#videoxt.requesters.GifRequest.monochrome","title":"monochrome  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>monochrome = None\n</code></pre>"},{"location":"docs/requesters/#videoxt.requesters.GifRequest.validate","title":"validate","text":"<pre><code>validate()\n</code></pre> <p>Validate fields if specified and return a validated <code>GifRequest</code>.</p> Source code in <code>videoxt/requesters.py</code> <pre><code>def validate(self) -&gt; \"GifRequest\":\n    \"\"\"Validate fields if specified and return a validated `GifRequest`.\"\"\"\n    super().validate()\n    self._validate_resize()\n    self._validate_dimensions()\n    self._validate_rotate()\n    self._validate_speed()\n    self._is_validated = True\n    return self\n</code></pre>"},{"location":"docs/requesters/#videoxt.requesters.GifRequest.prepare","title":"prepare","text":"<pre><code>prepare(video)\n</code></pre> <p>Construct and return a <code>PreparedGifRequest</code> using self and a <code>Video</code>.</p> <p>Fields will validate before preparation if not validated.</p>"},{"location":"docs/requesters/#videoxt.requesters.GifRequest.prepare--args","title":"Args:","text":"<pre><code>`video` (Video): Contains video metadata used to prepare request.\n</code></pre>"},{"location":"docs/requesters/#videoxt.requesters.GifRequest.prepare--returns","title":"Returns:","text":"<pre><code>`PreparedGifRequest`:\n    A prepared gif extraction request, required by a `GifExtractor`.\n</code></pre> Source code in <code>videoxt/requesters.py</code> <pre><code>def prepare(self, video: Video) -&gt; \"PreparedGifRequest\":\n    \"\"\"\n    Construct and return a `PreparedGifRequest` using self and a `Video`.\n\n    Fields will validate before preparation if not validated.\n\n    Args:\n    -----\n        `video` (Video): Contains video metadata used to prepare request.\n\n    Returns:\n    -----\n        `PreparedGifRequest`:\n            A prepared gif extraction request, required by a `GifExtractor`.\n    \"\"\"\n    if not self.is_validated:\n        self.validate()  # XXX: log\n\n    p = PreparedGifRequest(\n        video=video,\n        start_time=self.start_time,\n        stop_time=self.stop_time,\n        destdir=self.destdir,\n        filename=self.filename,\n        verbose=self.verbose,\n        overwrite=self.overwrite,\n        fps=self.fps,\n        dimensions=self.dimensions,\n        resize=self.resize,\n        rotate=self.rotate,\n        speed=self.speed,\n        bounce=self.bounce,\n        reverse=self.reverse,\n        monochrome=self.monochrome,\n    )\n    p.prepare()\n    return p\n</code></pre>"},{"location":"docs/requesters/#videoxt.requesters.PreparedRequest","title":"PreparedRequest  <code>dataclass</code>","text":"<p>             Bases: <code>ABC</code>, <code>ToJsonMixin</code></p> <p>Protocol defining the interface for preparing requests for extraction.</p>"},{"location":"docs/requesters/#videoxt.requesters.PreparedRequest--public-methods","title":"Public Methods:","text":"<pre><code>- `prepare()` -&gt; `PreparedRequest`:\n    Prepare fields and return a fully prepared request of some type.\n- `json()` -&gt; `str`:\n    Return a JSON string representation of the prepared request type.\n- `verbose_print()` -&gt; `None`:\n    Print the JSON string to console with a title, without private keys.\n</code></pre>"},{"location":"docs/requesters/#videoxt.requesters.PreparedRequest--properties","title":"Properties:","text":"<pre><code>- `is_prepared` -&gt; `bool`: If the request has been prepared.\n- `is_verbose` -&gt; `bool | None`: Return the state of the verbose field.\n</code></pre>"},{"location":"docs/requesters/#videoxt.requesters.PreparedRequest.is_prepared","title":"is_prepared  <code>abstractmethod</code> <code>property</code>","text":"<pre><code>is_prepared\n</code></pre> <p>Return True if the request has been prepared, False otherwise.</p>"},{"location":"docs/requesters/#videoxt.requesters.PreparedRequest.is_verbose","title":"is_verbose  <code>abstractmethod</code> <code>property</code>","text":"<pre><code>is_verbose\n</code></pre> <p>Return the state of the verbose field.</p>"},{"location":"docs/requesters/#videoxt.requesters.PreparedRequest.prepare","title":"prepare  <code>abstractmethod</code>","text":"<pre><code>prepare()\n</code></pre> <p>Prepare fields and return a fully prepared request of some type.</p> Source code in <code>videoxt/requesters.py</code> <pre><code>@abstractmethod\ndef prepare(self) -&gt; \"PreparedRequest\":\n    \"\"\"Prepare fields and return a fully prepared request of some type.\"\"\"\n    ...\n</code></pre>"},{"location":"docs/requesters/#videoxt.requesters.PreparedBaseRequest","title":"PreparedBaseRequest  <code>dataclass</code>","text":"<p>             Bases: <code>PreparedRequest</code></p> <p>Prepares and stores request arguments shared by all extraction methods.</p>"},{"location":"docs/requesters/#videoxt.requesters.PreparedBaseRequest--fields","title":"Fields","text":"<pre><code>`video` (Video):\n    The object containing video metadata used to prepare the request.\n`start_time` (float | int | str | None):\n    Specify the extraction's start time in seconds, or as a string in \"HH:MM:SS\"\n    format. Defaults to 0 if not specified.\n`stop_time` (float | int | str | None):\n    Specify the extraction's stop time in seconds, or as a string in \"HH:MM:SS\"\n    format. Defaults to the video duration if not specified.\n`destdir` (Path | None):\n    Specify the directory you want to save output to. Defaults to the video's\n    directory if not specified.\n`filename` (str | None):\n    Specify the name of the extracted file(s). Defaults to the video filename\n    if not specified.\n`verbose` (bool | None):\n    If True, the prepared request and extraction results will be printed as JSON\n    to console. Defaults to False if not specified.\n`overwrite` (bool | None):\n    If True, permits overwriting the destination path if the file or directory\n    already exists. Defaults to False if not specified.\n`fps` (float | None):\n    Override the frames per second (fps) value obtained from `cv2` when reading\n    the video. This value is used to set the start and stop frames for the\n    extraction range. This option should be used only in rare cases where `cv2`\n    fails to accurately read the fps. If not specified, it defaults to the fps\n    of the video as read by `cv2`.\n`destpath` (Path):\n    The destination path of the extracted file or directory. Not initialized.\n`extraction_range` (dict):\n    The range represented as seconds, as timestamps, and frame numbers.\n    Not initialized.\n</code></pre>"},{"location":"docs/requesters/#videoxt.requesters.PreparedBaseRequest--public-methods","title":"Public Methods","text":"<pre><code>- `prepare()` -&gt; `PreparedBaseRequest`:\n    Prepare fields and return a fully prepared base request.\n- `json()` -&gt; `str`:\n    Return a JSON string representation of the prepared base request.\n- `verbose_print()` -&gt; `None`:\n    Print the JSON string to console with a title, without private keys.\n</code></pre>"},{"location":"docs/requesters/#videoxt.requesters.PreparedBaseRequest--properties","title":"Properties:","text":"<pre><code>- `is_prepared` -&gt; `bool`: If the request has been prepared.\n- `is_verbose` -&gt; `bool | None`: Return the state of the verbose field.\n</code></pre>"},{"location":"docs/requesters/#videoxt.requesters.PreparedBaseRequest.video","title":"video  <code>instance-attribute</code>","text":"<pre><code>video\n</code></pre>"},{"location":"docs/requesters/#videoxt.requesters.PreparedBaseRequest.start_time","title":"start_time  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>start_time = None\n</code></pre>"},{"location":"docs/requesters/#videoxt.requesters.PreparedBaseRequest.stop_time","title":"stop_time  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>stop_time = None\n</code></pre>"},{"location":"docs/requesters/#videoxt.requesters.PreparedBaseRequest.destdir","title":"destdir  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>destdir = None\n</code></pre>"},{"location":"docs/requesters/#videoxt.requesters.PreparedBaseRequest.filename","title":"filename  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>filename = None\n</code></pre>"},{"location":"docs/requesters/#videoxt.requesters.PreparedBaseRequest.verbose","title":"verbose  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>verbose = None\n</code></pre>"},{"location":"docs/requesters/#videoxt.requesters.PreparedBaseRequest.overwrite","title":"overwrite  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>overwrite = None\n</code></pre>"},{"location":"docs/requesters/#videoxt.requesters.PreparedBaseRequest.fps","title":"fps  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>fps = None\n</code></pre>"},{"location":"docs/requesters/#videoxt.requesters.PreparedBaseRequest.destpath","title":"destpath  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>destpath = field(init=False)\n</code></pre>"},{"location":"docs/requesters/#videoxt.requesters.PreparedBaseRequest.extraction_range","title":"extraction_range  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>extraction_range = field(init=False, default_factory=dict)\n</code></pre>"},{"location":"docs/requesters/#videoxt.requesters.PreparedBaseRequest.is_prepared","title":"is_prepared  <code>property</code>","text":"<pre><code>is_prepared\n</code></pre> <p>Return True if the request has been prepared, False otherwise.</p>"},{"location":"docs/requesters/#videoxt.requesters.PreparedBaseRequest.is_verbose","title":"is_verbose  <code>property</code>","text":"<pre><code>is_verbose\n</code></pre> <p>Return the state of the verbose field.</p>"},{"location":"docs/requesters/#videoxt.requesters.PreparedBaseRequest.prepare","title":"prepare","text":"<pre><code>prepare()\n</code></pre> <p>Prepare fields and return a <code>PreparedBaseRequest</code>.</p> Source code in <code>videoxt/requesters.py</code> <pre><code>def prepare(self) -&gt; \"PreparedBaseRequest\":\n    \"\"\"Prepare fields and return a `PreparedBaseRequest`.\"\"\"\n    self._prepare_start_time()\n    self._prepare_stop_time()\n    self._prepare_fps()\n    self._prepare_extraction_range()\n    self._prepare_verbose()\n    self._prepare_overwrite()\n    return self\n</code></pre>"},{"location":"docs/requesters/#videoxt.requesters.PreparedAudioRequest","title":"PreparedAudioRequest  <code>dataclass</code>","text":"<p>             Bases: <code>PreparedBaseRequest</code></p> <p>Prepares and stores 'audio' extraction request arguments.</p>"},{"location":"docs/requesters/#videoxt.requesters.PreparedAudioRequest--fields","title":"Fields","text":"<pre><code>`video` (Video):\n    The object containing video metadata used to prepare the request.\n`start_time` (float | int | str | None):\n    Specify the extraction's start time in seconds, or as a string in \"HH:MM:SS\"\n    format. Defaults to 0 if not specified.\n`stop_time` (float | int | str | None):\n    Specify the extraction's stop time in seconds, or as a string in \"HH:MM:SS\"\n    format. Defaults to the video duration if not specified.\n`destdir` (Path | None):\n    Specify the directory you want to save output to. Defaults to the video's\n    directory if not specified.\n`filename` (str | None):\n    Specify the name of the extracted file(s). Defaults to the video filename\n    if not specified.\n`verbose` (bool | None):\n    If True, the prepared request and extraction results will be printed as JSON\n    to console. Defaults to False if not specified.\n`overwrite` (bool | None):\n    If True, permits overwriting the destination path if the file or directory\n    already exists. Defaults to False if not specified.\n`fps` (float | None):\n    Override the frames per second (fps) value obtained from `cv2` when reading\n    the video. This value is used to set the start and stop frames for the\n    extraction range. This option should be used only in rare cases where `cv2`\n    fails to accurately read the fps. If not specified, it defaults to the fps\n    of the video as read by `cv2`.\n`destpath` (Path):\n    The destination path of the extracted file or directory. Not initialized.\n`extraction_range` (dict):\n    The range represented as seconds, as timestamps, and frame numbers.\n    Not initialized.\n`audio_format` (str | None):\n    Set the extracted audio file format. Defaults to 'mp3' if not specified.\n    See: `videoxt.constants.SUPPORTED_AUDIO_FORMATS`.\n`speed` (float | None):\n    Set the speed of the extracted audio. A value of 0.5 will halve the speed of\n    the extracted audio. Defaults to 1.0 if not specified (no change).\n`bounce` (bool | None):\n    If True, bounce the extracted audio bommerang-style. Defaults to False if\n    not specified.\n`reverse` (bool | None):\n    If True, reverse the extracted audio. Defaults to False if not specified.\n`volume` (float | None):\n    Set the volume of the extracted audio. A value of 0.5 will halve the volume\n    of the extracted audio. Defaults to 1.0 if not specified (no change).\n`normalize` (bool | None):\n    If True, normalize the audio. Normalization adjusts the gain of the audio to\n    ensure consistent levels, preventing distortion and enhancing clarity in\n    some cases. Defaults to False if not specified.\n</code></pre>"},{"location":"docs/requesters/#videoxt.requesters.PreparedAudioRequest--public-methods","title":"Public Methods","text":"<pre><code>- `prepare()` -&gt; `PreparedAudioRequest`:\n    Prepare fields and return a fully prepared audio request, required by an\n    `AudioExtractor`.\n- `json()` -&gt; `str`:\n    Return a JSON string representation of the prepared audio request.\n- `verbose_print()` -&gt; `None`:\n    Print the JSON string to console with a title, without private keys.\n</code></pre>"},{"location":"docs/requesters/#videoxt.requesters.PreparedAudioRequest--properties","title":"Properties:","text":"<pre><code>- `is_prepared` -&gt; `bool`: If the request has been prepared.\n- `is_verbose` -&gt; `bool | None`: Return the state of the verbose field.\n</code></pre>"},{"location":"docs/requesters/#videoxt.requesters.PreparedAudioRequest.audio_format","title":"audio_format  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>audio_format = None\n</code></pre>"},{"location":"docs/requesters/#videoxt.requesters.PreparedAudioRequest.speed","title":"speed  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>speed = None\n</code></pre>"},{"location":"docs/requesters/#videoxt.requesters.PreparedAudioRequest.bounce","title":"bounce  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>bounce = None\n</code></pre>"},{"location":"docs/requesters/#videoxt.requesters.PreparedAudioRequest.reverse","title":"reverse  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>reverse = None\n</code></pre>"},{"location":"docs/requesters/#videoxt.requesters.PreparedAudioRequest.volume","title":"volume  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>volume = None\n</code></pre>"},{"location":"docs/requesters/#videoxt.requesters.PreparedAudioRequest.normalize","title":"normalize  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>normalize = None\n</code></pre>"},{"location":"docs/requesters/#videoxt.requesters.PreparedAudioRequest.prepare","title":"prepare","text":"<pre><code>prepare()\n</code></pre> <p>Prepare request fields and return a <code>PreparedAudioRequest</code>, required by an <code>AudioExtractor</code>.</p> Source code in <code>videoxt/requesters.py</code> <pre><code>def prepare(self) -&gt; \"PreparedAudioRequest\":\n    \"\"\"\n    Prepare request fields and return a `PreparedAudioRequest`, required by an\n    `AudioExtractor`.\n    \"\"\"\n    self._check_video_has_audio()\n    super().prepare()\n    self._prepare_audio_format()\n    self._prepare_destpath()\n    self._prepare_speed()\n    self._prepare_bounce()\n    self._prepare_reverse()\n    self._prepare_volume()\n    self._prepare_normalize()\n    self._is_prepared = True\n    return self\n</code></pre>"},{"location":"docs/requesters/#videoxt.requesters.PreparedClipRequest","title":"PreparedClipRequest  <code>dataclass</code>","text":"<p>             Bases: <code>PreparedBaseRequest</code></p> <p>Prepares and stores 'clip' extraction request arguments.</p>"},{"location":"docs/requesters/#videoxt.requesters.PreparedClipRequest--fields","title":"Fields","text":"<pre><code>`video` (Video):\n    The object containing video metadata used to prepare the request.\n`start_time` (float | int | str | None):\n    Specify the extraction's start time in seconds, or as a string in \"HH:MM:SS\"\n    format. Defaults to 0 if not specified.\n`stop_time` (float | int | str | None):\n    Specify the extraction's stop time in seconds, or as a string in \"HH:MM:SS\"\n    format. Defaults to the video duration if not specified.\n`destdir` (Path | None):\n    Specify the directory you want to save output to. Defaults to the video's\n    directory if not specified.\n`filename` (str | None):\n    Specify the name of the extracted file(s). Defaults to the video filename\n    if not specified.\n`verbose` (bool | None):\n    If True, the prepared request and extraction results will be printed as JSON\n    to console. Defaults to False if not specified.\n`overwrite` (bool | None):\n    If True, permits overwriting the destination path if the file or directory\n    already exists. Defaults to False if not specified.\n`fps` (float | None):\n    Override the frames per second (fps) value obtained from `cv2` when reading\n    the video. This value is used to set the start and stop frames for the\n    extraction range. This option should be used only in rare cases where `cv2`\n    fails to accurately read the fps. If not specified, it defaults to the fps\n    of the video as read by `cv2`.\n`destpath` (Path):\n    The destination path of the extracted file or directory. Not initialized.\n`extraction_range` (dict):\n    The range represented as seconds, as timestamps, and frame numbers.\n    Not initialized.\n`dimensions` (tuple[int, int] | None):\n    Specify the dimensions (frame width, frame height) of the clip. Defaults to\n    the video dimensions if not specified.\n`resize` (float | None):\n    Resize the dimensions of the clip by a factor of `n`. A value of 0.5\n    will halve the dimensions. If you specify `dimensions`, `resize` will apply\n    to the dimensions you specify. Defaults to 1.0 if not specified (no change).\n`rotate` (int | None):\n    Rotate the clip by `n` degrees. Allowed values: 0, 90, 180 or 270. Defaults\n    to 0 if not specified (no change).\n`speed` (float | None):\n    Set the speed of the extracted clip. A value of 0.5 will halve the playback\n    speed of the clip. Defaults to 1.0 if not specified (no change).\n`bounce` (bool | None):\n    If True, bounce the extracted clip bommerang-style. Defaults to False if\n    not specified.\n`reverse` (bool | None):\n    If True, reverse the extracted clip. Defaults to False if not specified.\n`monochrome` (bool | None):\n    If True, apply a black-and-white filter to the clip. Defaults to False if\n    not specified.\n`volume` (float | None):\n    Set the volume of the extracted clip's audio. A value of 0.5 will halve the\n    volume of the clip's audio. Defaults to 1.0 if not specified (no change).\n`normalize` (bool | None):\n    If True, normalize the audio. Normalization adjusts the gain of the audio to\n    ensure consistent levels, preventing distortion and enhancing clarity in\n    some cases. Defaults to False if not specified.\n</code></pre>"},{"location":"docs/requesters/#videoxt.requesters.PreparedClipRequest--public-methods","title":"Public Methods","text":"<pre><code>- `prepare()` -&gt; `PreparedClipRequest`:\n    Prepare fields and return a fully prepared clip request, required by a\n    `ClipExtractor`.\n- `json()` -&gt; `str`:\n    Return a JSON string representation of the prepared clip request.\n- `verbose_print()` -&gt; `None`:\n    Print the JSON string to console with a title, without private keys.\n</code></pre>"},{"location":"docs/requesters/#videoxt.requesters.PreparedClipRequest--properties","title":"Properties:","text":"<pre><code>- `is_prepared` -&gt; `bool`: If the request has been prepared.\n- `is_verbose` -&gt; `bool | None`: Return the state of the verbose field.\n</code></pre>"},{"location":"docs/requesters/#videoxt.requesters.PreparedClipRequest.dimensions","title":"dimensions  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>dimensions = None\n</code></pre>"},{"location":"docs/requesters/#videoxt.requesters.PreparedClipRequest.resize","title":"resize  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>resize = None\n</code></pre>"},{"location":"docs/requesters/#videoxt.requesters.PreparedClipRequest.rotate","title":"rotate  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>rotate = None\n</code></pre>"},{"location":"docs/requesters/#videoxt.requesters.PreparedClipRequest.speed","title":"speed  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>speed = None\n</code></pre>"},{"location":"docs/requesters/#videoxt.requesters.PreparedClipRequest.bounce","title":"bounce  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>bounce = None\n</code></pre>"},{"location":"docs/requesters/#videoxt.requesters.PreparedClipRequest.reverse","title":"reverse  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>reverse = None\n</code></pre>"},{"location":"docs/requesters/#videoxt.requesters.PreparedClipRequest.monochrome","title":"monochrome  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>monochrome = None\n</code></pre>"},{"location":"docs/requesters/#videoxt.requesters.PreparedClipRequest.volume","title":"volume  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>volume = None\n</code></pre>"},{"location":"docs/requesters/#videoxt.requesters.PreparedClipRequest.normalize","title":"normalize  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>normalize = None\n</code></pre>"},{"location":"docs/requesters/#videoxt.requesters.PreparedClipRequest.prepare","title":"prepare","text":"<pre><code>prepare()\n</code></pre> <p>Prepare request fields and return a <code>PreparedClipRequest</code>, required by a <code>ClipExtractor</code>.</p> Source code in <code>videoxt/requesters.py</code> <pre><code>def prepare(self) -&gt; \"PreparedClipRequest\":\n    \"\"\"\n    Prepare request fields and return a `PreparedClipRequest`, required by a\n    `ClipExtractor`.\n    \"\"\"\n    super().prepare()\n    self._prepare_destpath()\n    self._prepare_resize()\n    self._prepare_dimensions()\n    self._prepare_rotate()\n    self._prepare_speed()\n    self._prepare_bounce()\n    self._prepare_reverse()\n    self._prepare_monochrome()\n    self._prepare_volume()\n    self._prepare_normalize()\n    self._is_prepared = True\n    return self\n</code></pre>"},{"location":"docs/requesters/#videoxt.requesters.PreparedFramesRequest","title":"PreparedFramesRequest  <code>dataclass</code>","text":"<p>             Bases: <code>PreparedBaseRequest</code></p> <p>Prepares and stores 'frames' extraction request arguments.</p>"},{"location":"docs/requesters/#videoxt.requesters.PreparedFramesRequest--fields","title":"Fields","text":"<pre><code>`video` (Video):\n    The object containing video metadata used to prepare the request.\n`start_time` (float | int | str | None):\n    Specify the extraction's start time in seconds, or as a string in \"HH:MM:SS\"\n    format. Defaults to 0 if not specified.\n`stop_time` (float | int | str | None):\n    Specify the extraction's stop time in seconds, or as a string in \"HH:MM:SS\"\n    format. Defaults to the video duration if not specified.\n`destdir` (Path | None):\n    Specify the directory you want to save output to. Defaults to the video's\n    directory if not specified.\n`filename` (str | None):\n    Specify the name of the extracted file(s). Defaults to the video filename\n    if not specified.\n`verbose` (bool | None):\n    If True, the prepared request and extraction results will be printed as JSON\n    to console. Defaults to False if not specified.\n`overwrite` (bool | None):\n    If True, permits overwriting the destination path if the file or directory\n    already exists. Defaults to False if not specified.\n`fps` (float | None):\n    Override the frames per second (fps) value obtained from `cv2` when reading\n    the video. This value is used to set the start and stop frames for the\n    extraction range. This option should be used only in rare cases where `cv2`\n    fails to accurately read the fps. If not specified, it defaults to the fps\n    of the video as read by `cv2`.\n`image_format` (str | None):\n    Set the extracted image file format. Defaults to 'jpg' if not specified.\n    See: `videoxt.constants.SUPPORTED_IMAGE_FORMATS`.\n`capture_rate` (int | None):\n    Capture every Nth video frame. Defaults to 1 if not specified, which\n    extracts every frame within the extraction range.\n`dimensions` (tuple[int, int] | None):\n    Specify the dimensions (frame width, frame height) of the images. Defaults\n    to the video dimensions if not specified.\n`resize` (float | None):\n    Resize the dimensions of the images by a factor of `n`. A value of 0.5\n    will halve the dimensions. If you specify `dimensions`, `resize` will apply\n    to the dimensions you specify. Defaults to 1.0 if not specified (no change).\n`rotate` (int | None):\n    Rotate the images by `n` degrees. Allowed values: 0, 90, 180 or 270.\n    Defaults to 0 if not specified (no change).\n`monochrome` (bool | None):\n    If True, apply a black-and-white filter to the images. Defaults to False if\n    not specified.\n`images_expected` (int):\n    The number of images expected to be written to disk. Not initialized.\n</code></pre>"},{"location":"docs/requesters/#videoxt.requesters.PreparedFramesRequest--public-methods","title":"Public Methods","text":"<pre><code>- `prepare()` -&gt; `PreparedFramesRequest`:\n    Prepare fields and return a fully prepared frames request, required by a\n    `FramesExtractor`.\n- `json()` -&gt; `str`:\n    Return a JSON string representation of the prepared frames request.\n- `verbose_print()` -&gt; `None`:\n    Print the JSON string to console with a title, without private keys.\n</code></pre>"},{"location":"docs/requesters/#videoxt.requesters.PreparedFramesRequest--properties","title":"Properties:","text":"<pre><code>- `is_prepared` -&gt; `bool`: If the request has been prepared.\n- `is_verbose` -&gt; `bool | None`: Return the state of the verbose field.\n</code></pre>"},{"location":"docs/requesters/#videoxt.requesters.PreparedFramesRequest.image_format","title":"image_format  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>image_format = None\n</code></pre>"},{"location":"docs/requesters/#videoxt.requesters.PreparedFramesRequest.capture_rate","title":"capture_rate  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>capture_rate = None\n</code></pre>"},{"location":"docs/requesters/#videoxt.requesters.PreparedFramesRequest.dimensions","title":"dimensions  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>dimensions = None\n</code></pre>"},{"location":"docs/requesters/#videoxt.requesters.PreparedFramesRequest.resize","title":"resize  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>resize = None\n</code></pre>"},{"location":"docs/requesters/#videoxt.requesters.PreparedFramesRequest.rotate","title":"rotate  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>rotate = None\n</code></pre>"},{"location":"docs/requesters/#videoxt.requesters.PreparedFramesRequest.monochrome","title":"monochrome  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>monochrome = None\n</code></pre>"},{"location":"docs/requesters/#videoxt.requesters.PreparedFramesRequest.images_expected","title":"images_expected  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>images_expected = field(init=False)\n</code></pre>"},{"location":"docs/requesters/#videoxt.requesters.PreparedFramesRequest.prepare","title":"prepare","text":"<pre><code>prepare()\n</code></pre> <p>Prepare request fields and return a <code>PreparedFramesRequest</code>, required by a <code>FramesExtractor</code>.</p> Source code in <code>videoxt/requesters.py</code> <pre><code>def prepare(self) -&gt; \"PreparedFramesRequest\":\n    \"\"\"\n    Prepare request fields and return a `PreparedFramesRequest`, required by a\n    `FramesExtractor`.\n    \"\"\"\n    super().prepare()\n    self._prepare_destpath()\n    self._prepare_filename()\n    self._prepare_image_format()\n    self._prepare_capture_rate()\n    self._prepare_resize()\n    self._prepare_dimensions()\n    self._prepare_rotate()\n    self._prepare_monochrome()\n    self._prepare_images_expected()\n    self._is_prepared = True\n    return self\n</code></pre>"},{"location":"docs/requesters/#videoxt.requesters.PreparedGifRequest","title":"PreparedGifRequest  <code>dataclass</code>","text":"<p>             Bases: <code>PreparedBaseRequest</code></p> <p>Prepares and stores 'gif' extraction request arguments.</p>"},{"location":"docs/requesters/#videoxt.requesters.PreparedGifRequest--fields","title":"Fields","text":"<pre><code>`video` (Video):\n    The object containing video metadata used to prepare the request.\n`start_time` (float | int | str | None):\n    Specify the extraction's start time in seconds, or as a string in \"HH:MM:SS\"\n    format. Defaults to 0 if not specified.\n`stop_time` (float | int | str | None):\n    Specify the extraction's stop time in seconds, or as a string in \"HH:MM:SS\"\n    format. Defaults to the video duration if not specified.\n`destdir` (Path | None):\n    Specify the directory you want to save output to. Defaults to the video's\n    directory if not specified.\n`filename` (str | None):\n    Specify the name of the extracted file(s). Defaults to the video filename\n    if not specified.\n`verbose` (bool | None):\n    If True, the prepared request and extraction results will be printed as JSON\n    to console. Defaults to False if not specified.\n`overwrite` (bool | None):\n    If True, permits overwriting the destination path if the file or directory\n    already exists. Defaults to False if not specified.\n`fps` (float | None):\n    Override the frames per second (fps) value obtained from `cv2` when reading\n    the video. This value is used to set the start and stop frames for the\n    extraction range. This option should be used only in rare cases where `cv2`\n    fails to accurately read the fps. If not specified, it defaults to the fps\n    of the video as read by `cv2`.\n`dimensions` (tuple[int, int] | None):\n    Specify the dimensions (frame width, frame height) of the gif. Defaults to\n    the video dimensions if not specified.\n`resize` (float | None):\n    Resize the dimensions of the gif by a factor of `n`. A value of 0.5\n    will halve the dimensions. If you specify `dimensions`, `resize` will apply\n    to the dimensions you specify. Defaults to 1.0 if not specified (no change).\n`rotate` (int | None):\n    Rotate the gif by `n` degrees. Allowed values: 0, 90, 180 or 270. Defaults\n    to 0 if not specified (no change).\n`speed` (float | None):\n    Set the speed of the extracted gif. A value of 0.5 will halve the playback\n    speed of the gif. Defaults to 1.0 if not specified (no change).\n`bounce` (bool | None):\n    If True, bounce the extracted gif bommerang-style. Defaults to False if\n    not specified.\n`reverse` (bool | None):\n    If True, reverse the extracted gif. Defaults to False if not specified.\n`monochrome` (bool | None):\n    If True, apply a black-and-white filter to the gif. Defaults to False if\n    not specified.\n</code></pre>"},{"location":"docs/requesters/#videoxt.requesters.PreparedGifRequest--public-methods","title":"Public Methods","text":"<pre><code>- `prepare()` -&gt; `PreparedGifRequest`:\n    Prepare fields and return a fully prepared gif request, required by a\n    `GifExtractor`.\n- `json()` -&gt; `str`:\n    Return a JSON string representation of the prepared gif request.\n- `verbose_print()` -&gt; `None`:\n    Print the JSON string to console with a title, without private keys.\n</code></pre>"},{"location":"docs/requesters/#videoxt.requesters.PreparedGifRequest--properties","title":"Properties:","text":"<pre><code>- `is_prepared` -&gt; `bool`: If the request has been prepared.\n- `is_verbose` -&gt; `bool | None`: Return the state of the verbose field.\n</code></pre>"},{"location":"docs/requesters/#videoxt.requesters.PreparedGifRequest.dimensions","title":"dimensions  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>dimensions = None\n</code></pre>"},{"location":"docs/requesters/#videoxt.requesters.PreparedGifRequest.resize","title":"resize  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>resize = None\n</code></pre>"},{"location":"docs/requesters/#videoxt.requesters.PreparedGifRequest.rotate","title":"rotate  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>rotate = None\n</code></pre>"},{"location":"docs/requesters/#videoxt.requesters.PreparedGifRequest.speed","title":"speed  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>speed = None\n</code></pre>"},{"location":"docs/requesters/#videoxt.requesters.PreparedGifRequest.bounce","title":"bounce  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>bounce = None\n</code></pre>"},{"location":"docs/requesters/#videoxt.requesters.PreparedGifRequest.reverse","title":"reverse  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>reverse = None\n</code></pre>"},{"location":"docs/requesters/#videoxt.requesters.PreparedGifRequest.monochrome","title":"monochrome  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>monochrome = None\n</code></pre>"},{"location":"docs/requesters/#videoxt.requesters.PreparedGifRequest.prepare","title":"prepare","text":"<pre><code>prepare()\n</code></pre> <p>Prepare request fields and return a <code>PreparedGifRequest</code>, required by a <code>GifExtractor</code>.</p> Source code in <code>videoxt/requesters.py</code> <pre><code>def prepare(self) -&gt; \"PreparedGifRequest\":\n    \"\"\"\n    Prepare request fields and return a `PreparedGifRequest`, required by a\n    `GifExtractor`.\n    \"\"\"\n    super().prepare()\n    self._prepare_destpath()\n    self._prepare_resize()\n    self._prepare_dimensions()\n    self._prepare_rotate()\n    self._prepare_speed()\n    self._prepare_bounce()\n    self._prepare_monochrome()\n    self._prepare_reverse()\n    self._is_prepared = True\n    return self\n</code></pre>"},{"location":"docs/result/","title":"result","text":"<p>Containers for extraction results.</p>"},{"location":"docs/result/#videoxt.result.Result","title":"Result  <code>dataclass</code>","text":"<p>             Bases: <code>ToJsonMixin</code></p> <p>A container for the result of an extraction.</p>"},{"location":"docs/result/#videoxt.result.Result--attributes","title":"Attributes:","text":"<pre><code>`success` (bool | None):\n    Whether the extraction was successful.\n`method` (str | None):\n    The name of the method that was called.\n`message` (str | None):\n    A message describing the result of the extraction.\n`destpath` (Path | None):\n    The path to the destination file or directory.\n`elapsed_time` (float | None):\n    The number of seconds it took to complete the extraction.\n</code></pre>"},{"location":"docs/result/#videoxt.result.Result--methods","title":"Methods:","text":"<pre><code>- `json()` -&gt; `str`: Return a JSON string representation of the request.\n</code></pre>"},{"location":"docs/result/#videoxt.result.Result.success","title":"success  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>success = None\n</code></pre>"},{"location":"docs/result/#videoxt.result.Result.method","title":"method  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>method = None\n</code></pre>"},{"location":"docs/result/#videoxt.result.Result.message","title":"message  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>message = None\n</code></pre>"},{"location":"docs/result/#videoxt.result.Result.destpath","title":"destpath  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>destpath = None\n</code></pre>"},{"location":"docs/result/#videoxt.result.Result.elapsed_time","title":"elapsed_time  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>elapsed_time = None\n</code></pre>"},{"location":"docs/utils/","title":"utils","text":"<p>Utility functions and classes used throughout the library.</p>"},{"location":"docs/utils/#videoxt.utils.CustomJSONEncoder","title":"CustomJSONEncoder","text":"<p>             Bases: <code>JSONEncoder</code></p> <p>A custom JSON encoder for types that are not JSON serializable.</p>"},{"location":"docs/utils/#videoxt.utils.CustomJSONEncoder.default","title":"default","text":"<pre><code>default(obj)\n</code></pre> <p>Return a JSON serializable representation of the object.</p> Source code in <code>videoxt/utils.py</code> <pre><code>def default(self, obj: Any) -&gt; Any:\n    \"\"\"Return a JSON serializable representation of the object.\"\"\"\n    if isinstance(obj, Path):\n        return obj.resolve().as_posix()\n    if isinstance(obj, timedelta):\n        return str(obj)\n    if isinstance(obj, ExtractionMethod):\n        return obj.value\n    return super().default(obj)\n</code></pre>"},{"location":"docs/utils/#videoxt.utils.ToJsonMixin","title":"ToJsonMixin  <code>dataclass</code>","text":"<p>A mixin for dataclasses that can be represented as JSON.</p>"},{"location":"docs/utils/#videoxt.utils.ToJsonMixin.json","title":"json","text":"<pre><code>json(skip_private_keys=False)\n</code></pre> <p>Return a JSON string representation of the dataclass.</p>"},{"location":"docs/utils/#videoxt.utils.ToJsonMixin.json--args","title":"Args:","text":"<pre><code>`skip_private_keys` (bool):\n    If True, private keys (keys starting with '_') are not included in the\n    JSON string.\n</code></pre>"},{"location":"docs/utils/#videoxt.utils.ToJsonMixin.json--returns","title":"Returns:","text":"<pre><code>`str`: JSON string representation of the dataclass.\n</code></pre> Source code in <code>videoxt/utils.py</code> <pre><code>def json(self, skip_private_keys: bool = False) -&gt; str:\n    \"\"\"\n    Return a JSON string representation of the dataclass.\n\n    Args:\n    -----\n        `skip_private_keys` (bool):\n            If True, private keys (keys starting with '_') are not included in the\n            JSON string.\n\n    Returns:\n    -----\n        `str`: JSON string representation of the dataclass.\n    \"\"\"\n    d = remove_private_keys(asdict(self)) if skip_private_keys else asdict(self)\n    return json.dumps(d, indent=2, cls=CustomJSONEncoder)\n</code></pre>"},{"location":"docs/utils/#videoxt.utils.ToJsonMixin.verbose_print","title":"verbose_print","text":"<pre><code>verbose_print(title)\n</code></pre> <p>Print the public keys of the JSON to console with a title.</p> Source code in <code>videoxt/utils.py</code> <pre><code>def verbose_print(self, title: str) -&gt; None:\n    \"\"\"Print the public keys of the JSON to console with a title.\"\"\"\n    color_map = {\n        \"PreparedRequest\": \"bright_magenta\",\n        \"Result\": \"yellow\",\n    }\n    color = color_map.get(title, \"white\")\n    print(f\"&lt;[{color}]{title}[/{color}]&gt;\\n{self.json(skip_private_keys=True)}\")\n</code></pre>"},{"location":"docs/utils/#videoxt.utils.DataclassType","title":"DataclassType","text":"<p>             Bases: <code>Protocol</code></p> <p>Protocol representing dataclass attributes for type-hinting purposes.</p>"},{"location":"docs/utils/#videoxt.utils.timestamp_to_seconds","title":"timestamp_to_seconds","text":"<pre><code>timestamp_to_seconds(timestamp)\n</code></pre> <p>Convert a timestamp string to the total number of seconds (float) it represents.</p> <p>Accepts the formats \"HH:MM:SS\", \"H:MM:SS\", \"MM:SS\", \"M:SS\", \"SS\" or \"S\". Microseconds are truncated.</p>"},{"location":"docs/utils/#videoxt.utils.timestamp_to_seconds--usage","title":"Usage:","text":"<pre><code>&gt;&gt;&gt; from videoxt.utils import timestamp_to_seconds\n&gt;&gt;&gt; timestamp_to_seconds(\"1:01\")\n61.0\n&gt;&gt;&gt; timestamp_to_seconds(\"1:01.987654321\")\n61.0\n&gt;&gt;&gt; timestamp_to_seconds(\"10:00\")\n600.0\n&gt;&gt;&gt; timestamp_to_seconds(\"1:00:00\")\n3600.0\n</code></pre>"},{"location":"docs/utils/#videoxt.utils.timestamp_to_seconds--args","title":"Args:","text":"<pre><code>`timestamp` (str):\n    A timestamp string in the format \"HH:MM:SS\", \"H:MM:SS\", \"MM:SS\", \"M:SS\",\n    \"SS\" or \"S\"\n</code></pre>"},{"location":"docs/utils/#videoxt.utils.timestamp_to_seconds--returns","title":"Returns:","text":"<pre><code>`float`: The number of seconds converted from the timestamp string.\n</code></pre> Source code in <code>videoxt/utils.py</code> <pre><code>def timestamp_to_seconds(timestamp: str) -&gt; float:\n    \"\"\"\n    Convert a timestamp string to the total number of seconds (float) it represents.\n\n    Accepts the formats \"HH:MM:SS\", \"H:MM:SS\", \"MM:SS\", \"M:SS\", \"SS\" or \"S\".\n    Microseconds are truncated.\n\n    Usage:\n    -----\n    ```python\n    &gt;&gt;&gt; from videoxt.utils import timestamp_to_seconds\n    &gt;&gt;&gt; timestamp_to_seconds(\"1:01\")\n    61.0\n    &gt;&gt;&gt; timestamp_to_seconds(\"1:01.987654321\")\n    61.0\n    &gt;&gt;&gt; timestamp_to_seconds(\"10:00\")\n    600.0\n    &gt;&gt;&gt; timestamp_to_seconds(\"1:00:00\")\n    3600.0\n    ```\n\n    Args:\n    -----\n        `timestamp` (str):\n            A timestamp string in the format \"HH:MM:SS\", \"H:MM:SS\", \"MM:SS\", \"M:SS\",\n            \"SS\" or \"S\"\n\n    Returns:\n    -----\n        `float`: The number of seconds converted from the timestamp string.\n    \"\"\"\n    timestamp = timestamp.split(\".\")[0]\n    time_parts = timestamp.split(\":\")\n    total_seconds: float = sum(\n        float(part) * 60**exponent for exponent, part in enumerate(reversed(time_parts))\n    )\n\n    return total_seconds\n</code></pre>"},{"location":"docs/utils/#videoxt.utils.seconds_to_timestamp","title":"seconds_to_timestamp","text":"<pre><code>seconds_to_timestamp(seconds)\n</code></pre> <p>Convert seconds to a time duration string in the format \"HH:MM:SS\" or \"H:MM:SS\".</p> <p>Microseconds are truncated.</p>"},{"location":"docs/utils/#videoxt.utils.seconds_to_timestamp--usage","title":"Usage:","text":"<pre><code>&gt;&gt;&gt; from videoxt.utils import seconds_to_timestamp\n&gt;&gt;&gt; seconds_to_timestamp(60)\n'0:01:00'\n&gt;&gt;&gt; seconds_to_timestamp(60.987654321)\n'0:01:00'\n&gt;&gt;&gt; seconds_to_timestamp(600)\n'0:10:00'\n&gt;&gt;&gt; seconds_to_timestamp(3600)\n'1:00:00'\n</code></pre>"},{"location":"docs/utils/#videoxt.utils.seconds_to_timestamp--args","title":"Args:","text":"<pre><code>`seconds` (float): The number of seconds to convert to a timestamp.\n</code></pre>"},{"location":"docs/utils/#videoxt.utils.seconds_to_timestamp--returns","title":"Returns:","text":"<pre><code>`str`: A timestamp string in the format \"HH:MM:SS\" or \"H:MM:SS\".\n</code></pre> Source code in <code>videoxt/utils.py</code> <pre><code>def seconds_to_timestamp(seconds: float) -&gt; str:\n    \"\"\"\n    Convert seconds to a time duration string in the format \"HH:MM:SS\" or \"H:MM:SS\".\n\n    Microseconds are truncated.\n\n    Usage:\n    -----\n    ```python\n    &gt;&gt;&gt; from videoxt.utils import seconds_to_timestamp\n    &gt;&gt;&gt; seconds_to_timestamp(60)\n    '0:01:00'\n    &gt;&gt;&gt; seconds_to_timestamp(60.987654321)\n    '0:01:00'\n    &gt;&gt;&gt; seconds_to_timestamp(600)\n    '0:10:00'\n    &gt;&gt;&gt; seconds_to_timestamp(3600)\n    '1:00:00'\n    ```\n\n    Args:\n    -----\n        `seconds` (float): The number of seconds to convert to a timestamp.\n\n    Returns:\n    -----\n        `str`: A timestamp string in the format \"HH:MM:SS\" or \"H:MM:SS\".\n    \"\"\"\n    if seconds &lt;= 0:\n        return \"0:00:00\"\n\n    return str(timedelta(seconds=int(seconds)))\n</code></pre>"},{"location":"docs/utils/#videoxt.utils.timedelta_to_timestamp","title":"timedelta_to_timestamp","text":"<pre><code>timedelta_to_timestamp(duration)\n</code></pre> <p>Convert a timedelta to a time duration string in the format \"HH:MM:SS\".</p> <p>Microseconds are truncated.</p>"},{"location":"docs/utils/#videoxt.utils.timedelta_to_timestamp--usage","title":"Usage:","text":"<pre><code>&gt;&gt;&gt; from videoxt.utils import timedelta_to_timestamp\n&gt;&gt;&gt; timedelta_to_timestamp(timedelta(seconds=59))\n'00:00:59'\n&gt;&gt;&gt; timedelta_to_timestamp(timedelta(seconds=61.987654321))\n'00:01:01'\n&gt;&gt;&gt; timedelta_to_timestamp(timedelta(seconds=600))\n'00:10:00'\n</code></pre>"},{"location":"docs/utils/#videoxt.utils.timedelta_to_timestamp--args","title":"Args:","text":"<pre><code>`duration` (datetime.timedelta): The duration to convert to a timestamp.\n</code></pre>"},{"location":"docs/utils/#videoxt.utils.timedelta_to_timestamp--returns","title":"Returns:","text":"<pre><code>`str`: A timestamp string in the format \"HH:MM:SS\".\n</code></pre>"},{"location":"docs/utils/#videoxt.utils.timedelta_to_timestamp--raises","title":"Raises:","text":"<pre><code>`ValueError`: If the duration is negative.\n</code></pre> Source code in <code>videoxt/utils.py</code> <pre><code>def timedelta_to_timestamp(duration: timedelta) -&gt; str:\n    \"\"\"\n    Convert a timedelta to a time duration string in the format \"HH:MM:SS\".\n\n    Microseconds are truncated.\n\n    Usage:\n    -----\n    ```python\n    &gt;&gt;&gt; from videoxt.utils import timedelta_to_timestamp\n    &gt;&gt;&gt; timedelta_to_timestamp(timedelta(seconds=59))\n    '00:00:59'\n    &gt;&gt;&gt; timedelta_to_timestamp(timedelta(seconds=61.987654321))\n    '00:01:01'\n    &gt;&gt;&gt; timedelta_to_timestamp(timedelta(seconds=600))\n    '00:10:00'\n    ```\n\n    Args:\n    -----\n        `duration` (datetime.timedelta): The duration to convert to a timestamp.\n\n    Returns:\n    -----\n        `str`: A timestamp string in the format \"HH:MM:SS\".\n\n    Raises:\n    -----\n        `ValueError`: If the duration is negative.\n    \"\"\"\n    total_seconds = duration.total_seconds()\n\n    if total_seconds &lt; 0:\n        raise ValueError(\n            f\"Invalid duration: timedelta must be non-negative: {duration}\"\n        )\n\n    hours, remainder = divmod(total_seconds, 3600)\n    minutes, seconds = divmod(remainder, 60)\n\n    return f\"{int(hours):02}:{int(minutes):02}:{int(seconds):02}\"\n</code></pre>"},{"location":"docs/utils/#videoxt.utils.append_enumeration","title":"append_enumeration","text":"<pre><code>append_enumeration(index, tag=None)\n</code></pre> <p>Return an enumerated file name with the given index and optional tag.</p> <p>The returned string is intended to be appended to a file name or directory name. If the tag is None, only the index is used to enumerate the file name starting from 1. If a tag is provided, the tag is appended to the file name before the index. Mimics the behavior of Windows when creating a file or directory with the same name as an existing file or directory.</p>"},{"location":"docs/utils/#videoxt.utils.append_enumeration--usage","title":"Usage:","text":"<pre><code>&gt;&gt;&gt; from videoxt.utils import append_enumeration\n&gt;&gt;&gt; append_enumeration(1)\n' (1)'\n&gt;&gt;&gt; append_enumeration(2)\n' (2)'\n&gt;&gt;&gt; append_enumeration(1, tag=\"_vxt\")\n'_vxt'\n&gt;&gt;&gt; append_enumeration(2, tag=\"_vxt\")\n'_vxt (2)'\n</code></pre>"},{"location":"docs/utils/#videoxt.utils.append_enumeration--args","title":"Args:","text":"<pre><code>`index` (int):\n    The enumeration index. Must be greater than 0.\n`tag` (str | None):\n    The tag to enumerate. If None, only the index is used.\n</code></pre>"},{"location":"docs/utils/#videoxt.utils.append_enumeration--returns","title":"Returns:","text":"<pre><code>`str`: The enumerated string to append to a file name or directory name.\n</code></pre> Source code in <code>videoxt/utils.py</code> <pre><code>def append_enumeration(index: int, tag: str | None = None) -&gt; str:\n    \"\"\"\n    Return an enumerated file name with the given index and optional tag.\n\n    The returned string is intended to be appended to a file name or directory name.\n    If the tag is None, only the index is used to enumerate the file name starting\n    from 1. If a tag is provided, the tag is appended to the file name before the\n    index. Mimics the behavior of Windows when creating a file or directory with the\n    same name as an existing file or directory.\n\n    Usage:\n    -----\n    ```python\n    &gt;&gt;&gt; from videoxt.utils import append_enumeration\n    &gt;&gt;&gt; append_enumeration(1)\n    ' (1)'\n    &gt;&gt;&gt; append_enumeration(2)\n    ' (2)'\n    &gt;&gt;&gt; append_enumeration(1, tag=\"_vxt\")\n    '_vxt'\n    &gt;&gt;&gt; append_enumeration(2, tag=\"_vxt\")\n    '_vxt (2)'\n    ```\n\n    Args:\n    -----\n        `index` (int):\n            The enumeration index. Must be greater than 0.\n        `tag` (str | None):\n            The tag to enumerate. If None, only the index is used.\n\n    Returns:\n    -----\n        `str`: The enumerated string to append to a file name or directory name.\n    \"\"\"\n    index = 1 if index &lt; 1 else index\n\n    if tag is None:\n        return f\" ({index})\"\n\n    # Ensure the tag doesn't contain invalid characters for a file name.\n    tag = valid_filename(tag)\n\n    return f\"{tag} ({index})\" if index &gt; 1 else tag\n</code></pre>"},{"location":"docs/utils/#videoxt.utils.enumerate_dir","title":"enumerate_dir","text":"<pre><code>enumerate_dir(directory, tag=None)\n</code></pre> <p>Return a non-existent, potentially enumerated directory path.</p> <p>See <code>videoxt.utils.append_enumeration</code> for more information on how the directory name is enumerated with or without a tag.</p>"},{"location":"docs/utils/#videoxt.utils.enumerate_dir--usage","title":"Usage:","text":"<pre><code>&gt;&gt;&gt; from videoxt.utils import\n&gt;&gt;&gt; from pathlib import Path\n&gt;&gt;&gt; path = Path(\"test_dir\")  # Assume 'test_dir' doesn't exist.\n&gt;&gt;&gt; enumerate_dir(path, tag=\"_frames\")\nPath('test_dir')\n&gt;&gt;&gt; enumerate_dir(path, tag=\"_frames\")\nPath('test_dir_frames')\n&gt;&gt;&gt; enumerate_dir(path, tag=\"_frames\")\nPath('test_dir_frames (2)')\n</code></pre>"},{"location":"docs/utils/#videoxt.utils.enumerate_dir--args","title":"Args:","text":"<pre><code>`directory`:\n    The path to the directory to potentially enumerate.\n`tag` (str | None):\n    The tag to enumerate. If None, only the index is used.\n</code></pre>"},{"location":"docs/utils/#videoxt.utils.enumerate_dir--returns","title":"Returns:","text":"<pre><code>`Path`: The path to a non-existent directory.\n</code></pre> Source code in <code>videoxt/utils.py</code> <pre><code>def enumerate_dir(directory: Path, tag: str | None = None) -&gt; Path:\n    \"\"\"\n    Return a non-existent, potentially enumerated directory path.\n\n    See `videoxt.utils.append_enumeration` for more information on how the directory\n    name is enumerated with or without a tag.\n\n    Usage:\n    -----\n    ```python\n    &gt;&gt;&gt; from videoxt.utils import\n    &gt;&gt;&gt; from pathlib import Path\n    &gt;&gt;&gt; path = Path(\"test_dir\")  # Assume 'test_dir' doesn't exist.\n    &gt;&gt;&gt; enumerate_dir(path, tag=\"_frames\")\n    Path('test_dir')\n    &gt;&gt;&gt; enumerate_dir(path, tag=\"_frames\")\n    Path('test_dir_frames')\n    &gt;&gt;&gt; enumerate_dir(path, tag=\"_frames\")\n    Path('test_dir_frames (2)')\n    ```\n\n    Args:\n    -----\n        `directory`:\n            The path to the directory to potentially enumerate.\n        `tag` (str | None):\n            The tag to enumerate. If None, only the index is used.\n\n    Returns:\n    -----\n        `Path`: The path to a non-existent directory.\n    \"\"\"\n    if not directory.exists():\n        return directory\n\n    index = 1\n    while True:\n        append_str = append_enumeration(index, tag=tag)\n        new_dir = directory.with_name(f\"{directory.name}{append_str}\")\n        if not new_dir.exists():\n            return new_dir\n        index += 1\n</code></pre>"},{"location":"docs/utils/#videoxt.utils.enumerate_filepath","title":"enumerate_filepath","text":"<pre><code>enumerate_filepath(filepath, tag=None)\n</code></pre> <p>Return a non-existent, potentially enumerated file path.</p> <p>See <code>videoxt.utils.append_enumeration</code> for more information on how the file name is enumerated with or without a tag.</p>"},{"location":"docs/utils/#videoxt.utils.enumerate_filepath--usage","title":"Usage:","text":"<pre><code>&gt;&gt;&gt; from videoxt.utils import enumerate_filepath\n&gt;&gt;&gt; from pathlib import Path\n&gt;&gt;&gt; filepath = Path('test.mp4')  # Assume 'test.mp4' doesn't exist.\n&gt;&gt;&gt; enumerate_filepath(filepath, tag=\"_vxt\")\nPath('test.mp4')\n&gt;&gt;&gt; enumerate_filepath(filepath, tag=\"_vxt\")\nPath('test_vxt.mp4')\n&gt;&gt;&gt; enumerate_filepath(filepath, tag=\"_vxt\")\nPath('test_vxt (2).mp4')\n</code></pre>"},{"location":"docs/utils/#videoxt.utils.enumerate_filepath--args","title":"Args:","text":"<pre><code>`filepath` (Path): The path to the file to potentially enumerate.\n</code></pre>"},{"location":"docs/utils/#videoxt.utils.enumerate_filepath--returns","title":"Returns:","text":"<pre><code>`Path`: The path to a non-existent file.\n</code></pre> Source code in <code>videoxt/utils.py</code> <pre><code>def enumerate_filepath(filepath: Path, tag: str | None = None) -&gt; Path:\n    \"\"\"\n    Return a non-existent, potentially enumerated file path.\n\n    See `videoxt.utils.append_enumeration` for more information on how the file name\n    is enumerated with or without a tag.\n\n    Usage:\n    -----\n    ```python\n    &gt;&gt;&gt; from videoxt.utils import enumerate_filepath\n    &gt;&gt;&gt; from pathlib import Path\n    &gt;&gt;&gt; filepath = Path('test.mp4')  # Assume 'test.mp4' doesn't exist.\n    &gt;&gt;&gt; enumerate_filepath(filepath, tag=\"_vxt\")\n    Path('test.mp4')\n    &gt;&gt;&gt; enumerate_filepath(filepath, tag=\"_vxt\")\n    Path('test_vxt.mp4')\n    &gt;&gt;&gt; enumerate_filepath(filepath, tag=\"_vxt\")\n    Path('test_vxt (2).mp4')\n    ```\n\n    Args:\n    -----\n        `filepath` (Path): The path to the file to potentially enumerate.\n\n    Returns:\n    -----\n        `Path`: The path to a non-existent file.\n    \"\"\"\n    if not filepath.exists():\n        return filepath\n\n    index = 1\n    while True:\n        append_str = append_enumeration(index, tag)\n        new_filename = f\"{filepath.stem}{append_str}{filepath.suffix}\"\n        new_filepath = filepath.with_name(new_filename)\n\n        if not new_filepath.exists():\n            return new_filepath\n\n        index += 1\n</code></pre>"},{"location":"docs/utils/#videoxt.utils.calculate_duration","title":"calculate_duration","text":"<pre><code>calculate_duration(frame_count, fps)\n</code></pre> <p>Return a timedelta representing the duration of a video using frame count and fps.</p>"},{"location":"docs/utils/#videoxt.utils.calculate_duration--args","title":"Args:","text":"<pre><code>`frame_count` (int):\n    The total number of frames in the video.\n`fps` (float):\n    The frames per second of the video.\n</code></pre>"},{"location":"docs/utils/#videoxt.utils.calculate_duration--returns","title":"Returns:","text":"<pre><code>`datetime.timedelta`: The duration of the video.\n</code></pre> Source code in <code>videoxt/utils.py</code> <pre><code>def calculate_duration(frame_count: int, fps: float) -&gt; timedelta:\n    \"\"\"\n    Return a timedelta representing the duration of a video using frame count and fps.\n\n    Args:\n    -----\n        `frame_count` (int):\n            The total number of frames in the video.\n        `fps` (float):\n            The frames per second of the video.\n\n    Returns:\n    -----\n        `datetime.timedelta`: The duration of the video.\n    \"\"\"\n    frame_count = positive_int(frame_count)\n    fps = positive_float(fps)\n    return timedelta(seconds=frame_count / fps)\n</code></pre>"},{"location":"docs/utils/#videoxt.utils.convert_bytes","title":"convert_bytes","text":"<pre><code>convert_bytes(n)\n</code></pre> <p>Convert n bytes (int) to a human readable string.</p>"},{"location":"docs/utils/#videoxt.utils.convert_bytes--usage","title":"Usage:","text":"<pre><code>&gt;&gt;&gt; from videoxt.utils import convert_bytes\n&gt;&gt;&gt; convert_bytes(1)\n'1.00 bytes'\n&gt;&gt;&gt; convert_bytes(1024)\n'1.00 KB'\n&gt;&gt;&gt; convert_bytes(1024**2)\n'1.00 MB'\n&gt;&gt;&gt; convert_bytes(1024**3)\n'1.00 GB'\n&gt;&gt;&gt; convert_bytes(1024**4)\n'1.00 TB'\n&gt;&gt;&gt; convert_bytes(1024**5)\n'1.00 PB'\n</code></pre>"},{"location":"docs/utils/#videoxt.utils.convert_bytes--args","title":"Args:","text":"<pre><code>`n` (int): The number of bytes to convert.\n</code></pre>"},{"location":"docs/utils/#videoxt.utils.convert_bytes--returns","title":"Returns:","text":"<pre><code>`str`: A human readable string representing the number of bytes.\n</code></pre> Source code in <code>videoxt/utils.py</code> <pre><code>def convert_bytes(n: int) -&gt; str:\n    \"\"\"\n    Convert n bytes (int) to a human readable string.\n\n    Usage:\n    -----\n    ```python\n    &gt;&gt;&gt; from videoxt.utils import convert_bytes\n    &gt;&gt;&gt; convert_bytes(1)\n    '1.00 bytes'\n    &gt;&gt;&gt; convert_bytes(1024)\n    '1.00 KB'\n    &gt;&gt;&gt; convert_bytes(1024**2)\n    '1.00 MB'\n    &gt;&gt;&gt; convert_bytes(1024**3)\n    '1.00 GB'\n    &gt;&gt;&gt; convert_bytes(1024**4)\n    '1.00 TB'\n    &gt;&gt;&gt; convert_bytes(1024**5)\n    '1.00 PB'\n    ```\n\n    Args:\n    -----\n        `n` (int): The number of bytes to convert.\n\n    Returns:\n    -----\n        `str`: A human readable string representing the number of bytes.\n    \"\"\"\n    n = positive_int(n)\n    for size in [\"bytes\", \"KB\", \"MB\", \"GB\", \"TB\"]:\n        if n &lt; 1024.0:\n            return f\"{n:.2f} {size}\"\n        n /= 1024.0\n\n    return f\"{n:.2f} PB\"\n</code></pre>"},{"location":"docs/utils/#videoxt.utils.remove_private_keys","title":"remove_private_keys","text":"<pre><code>remove_private_keys(d)\n</code></pre> <p>Return a copy of the dictionary without private keys (keys starting with '_').</p>"},{"location":"docs/utils/#videoxt.utils.remove_private_keys--args","title":"Args:","text":"<pre><code>`d` (dict): The dictionary you want to remove private keys from.\n</code></pre>"},{"location":"docs/utils/#videoxt.utils.remove_private_keys--returns","title":"Returns:","text":"<pre><code>`dict[str, Any]`: A new dictionary containing public keys only.\n</code></pre> Source code in <code>videoxt/utils.py</code> <pre><code>def remove_private_keys(d: dict[str, Any]) -&gt; dict[str, Any]:\n    \"\"\"\n    Return a copy of the dictionary without private keys (keys starting with '_').\n\n    Args:\n    -----\n        `d` (dict): The dictionary you want to remove private keys from.\n\n    Returns:\n    -----\n        `dict[str, Any]`: A new dictionary containing public keys only.\n    \"\"\"\n    copied_dict: defaultdict[str, Any] = defaultdict(dict)\n    for k, v in d.items():\n        if not k.startswith(\"_\"):\n            copied_dict[k] = remove_private_keys(v) if isinstance(v, dict) else v\n    return dict(copied_dict)\n</code></pre>"},{"location":"docs/utils/#videoxt.utils.parse_kwargs","title":"parse_kwargs","text":"<pre><code>parse_kwargs(kwargs, obj)\n</code></pre> <p>Return the keys and values in <code>kwargs</code> present in the <code>obj</code> dataclass attributes.</p>"},{"location":"docs/utils/#videoxt.utils.parse_kwargs--usage","title":"Usage:","text":"<pre><code>&gt;&gt;&gt; from videoxt.utils import parse_kwargs\n&gt;&gt;&gt; from dataclasses import dataclass\n&gt;&gt;&gt; @dataclass\n... class Test:\n...     a: int\n...     b: int\n&gt;&gt;&gt; parse_kwargs({\"a\": 1, \"b\": 2, \"c\": 3}, Test)\n{'a': 1, 'b': 2}\n</code></pre>"},{"location":"docs/utils/#videoxt.utils.parse_kwargs--args","title":"Args:","text":"<pre><code>`kwargs` (dict[str, Any]):\n    A dictionary to filter down to keys present in the `obj` attributes.\n`obj` (dataclasses.dataclass):\n    A dataclass to filter the `kwargs` dictionary with.\n</code></pre>"},{"location":"docs/utils/#videoxt.utils.parse_kwargs--returns","title":"Returns:","text":"<pre><code>`dict`: A dictionary of keyword arguments present in the `obj` attributes.\n</code></pre> Source code in <code>videoxt/utils.py</code> <pre><code>def parse_kwargs(kwargs: dict[str, Any], obj: DataclassType) -&gt; dict[str, Any]:\n    \"\"\"\n    Return the keys and values in `kwargs` present in the `obj` dataclass attributes.\n\n    Usage:\n    -----\n    ```python\n    &gt;&gt;&gt; from videoxt.utils import parse_kwargs\n    &gt;&gt;&gt; from dataclasses import dataclass\n    &gt;&gt;&gt; @dataclass\n    ... class Test:\n    ...     a: int\n    ...     b: int\n    &gt;&gt;&gt; parse_kwargs({\"a\": 1, \"b\": 2, \"c\": 3}, Test)\n    {'a': 1, 'b': 2}\n    ```\n\n    Args:\n    -----\n        `kwargs` (dict[str, Any]):\n            A dictionary to filter down to keys present in the `obj` attributes.\n        `obj` (dataclasses.dataclass):\n            A dataclass to filter the `kwargs` dictionary with.\n\n    Returns:\n    -----\n        `dict`: A dictionary of keyword arguments present in the `obj` attributes.\n    \"\"\"\n    return {k: v for k, v in kwargs.items() if k in obj.__dataclass_fields__}\n</code></pre>"},{"location":"docs/validators/","title":"validators","text":"<p>Contains functions to validate user input and other data.</p>"},{"location":"docs/validators/#videoxt.validators.positive_int","title":"positive_int","text":"<pre><code>positive_int(n)\n</code></pre> <p>Return a positive integer from a float, integer or string.</p>"},{"location":"docs/validators/#videoxt.validators.positive_int--args","title":"Args:","text":"<pre><code>`n` (float | int | str): The number to validate.\n</code></pre>"},{"location":"docs/validators/#videoxt.validators.positive_int--returns","title":"Returns:","text":"<pre><code>`int`: The number as an integer if positive.\n</code></pre>"},{"location":"docs/validators/#videoxt.validators.positive_int--raises","title":"Raises:","text":"<pre><code>`ValidationError`: If the number is not a positive integer.\n</code></pre> Source code in <code>videoxt/validators.py</code> <pre><code>def positive_int(n: float | int | str) -&gt; int:\n    \"\"\"\n    Return a positive integer from a float, integer or string.\n\n    Args:\n    -----\n        `n` (float | int | str): The number to validate.\n\n    Returns:\n    -----\n        `int`: The number as an integer if positive.\n\n    Raises:\n    -----\n        `ValidationError`: If the number is not a positive integer.\n    \"\"\"\n    try:\n        value = float(n)\n    except (ValueError, TypeError):\n        raise ValidationError(f\"Expected integer, got {n!r}\")\n\n    if not value.is_integer():\n        raise ValidationError(f\"Expected integer, got {n}\")\n\n    if value &lt;= 0:\n        raise ValidationError(f\"Expected positive integer, got {n}\")\n\n    return int(value)\n</code></pre>"},{"location":"docs/validators/#videoxt.validators.positive_float","title":"positive_float","text":"<pre><code>positive_float(n)\n</code></pre> <p>Return a positive float from a float, integer or string.</p>"},{"location":"docs/validators/#videoxt.validators.positive_float--args","title":"Args:","text":"<pre><code>`n` (float | int | str): The number to validate.\n</code></pre>"},{"location":"docs/validators/#videoxt.validators.positive_float--returns","title":"Returns:","text":"<pre><code>`float`: The number as a float if positive.\n</code></pre>"},{"location":"docs/validators/#videoxt.validators.positive_float--raises","title":"Raises:","text":"<pre><code>`ValidationError`: If the number is not a positive float.\n</code></pre> Source code in <code>videoxt/validators.py</code> <pre><code>def positive_float(n: float | int | str) -&gt; float:\n    \"\"\"\n    Return a positive float from a float, integer or string.\n\n    Args:\n    -----\n        `n` (float | int | str): The number to validate.\n\n    Returns:\n    -----\n        `float`: The number as a float if positive.\n\n    Raises:\n    -----\n        `ValidationError`: If the number is not a positive float.\n    \"\"\"\n    try:\n        value = float(n)\n    except (ValueError, TypeError):\n        raise ValidationError(f\"Expected numeric value, got {n!r}\")\n\n    if value &lt;= 0:\n        raise ValidationError(f\"Expected positive number, got {n}\")\n\n    return value\n</code></pre>"},{"location":"docs/validators/#videoxt.validators.non_negative_int","title":"non_negative_int","text":"<pre><code>non_negative_int(n)\n</code></pre> <p>Return a non-negative integer from a float, integer or string.</p>"},{"location":"docs/validators/#videoxt.validators.non_negative_int--args","title":"Args:","text":"<pre><code>`n` (float | int | str): The number to validate.\n</code></pre>"},{"location":"docs/validators/#videoxt.validators.non_negative_int--returns","title":"Returns:","text":"<pre><code>`int`: The number as an integer if non-negative.\n</code></pre>"},{"location":"docs/validators/#videoxt.validators.non_negative_int--raises","title":"Raises:","text":"<pre><code>`ValidationError`: If the number is not a non-negative integer.\n</code></pre> Source code in <code>videoxt/validators.py</code> <pre><code>def non_negative_int(n: float | int | str) -&gt; int:\n    \"\"\"\n    Return a non-negative integer from a float, integer or string.\n\n    Args:\n    -----\n        `n` (float | int | str): The number to validate.\n\n    Returns:\n    -----\n        `int`: The number as an integer if non-negative.\n\n    Raises:\n    -----\n        `ValidationError`: If the number is not a non-negative integer.\n    \"\"\"\n    try:\n        value = float(n)\n    except (ValueError, TypeError):\n        raise ValidationError(f\"Expected integer, got {n!r}\")\n\n    if not value.is_integer():\n        raise ValidationError(f\"Expected integer, got {n!r}\")\n\n    if value &lt; 0:\n        raise ValidationError(f\"Expected non-negative integer, got {n}\")\n\n    return int(value)\n</code></pre>"},{"location":"docs/validators/#videoxt.validators.non_negative_float","title":"non_negative_float","text":"<pre><code>non_negative_float(n)\n</code></pre> <p>Return a non-negative float from a float, integer or string.</p>"},{"location":"docs/validators/#videoxt.validators.non_negative_float--args","title":"Args:","text":"<pre><code>`n` (float | int | str): The number to validate.\n</code></pre>"},{"location":"docs/validators/#videoxt.validators.non_negative_float--returns","title":"Returns:","text":"<pre><code>`float`: The number as a float if non-negative.\n</code></pre>"},{"location":"docs/validators/#videoxt.validators.non_negative_float--raises","title":"Raises:","text":"<pre><code>`ValidationError`: If the number is not a non-negative float.\n</code></pre> Source code in <code>videoxt/validators.py</code> <pre><code>def non_negative_float(n: float | int | str) -&gt; float:\n    \"\"\"\n    Return a non-negative float from a float, integer or string.\n\n    Args:\n    -----\n        `n` (float | int | str): The number to validate.\n\n    Returns:\n    -----\n        `float`: The number as a float if non-negative.\n\n    Raises:\n    -----\n        `ValidationError`: If the number is not a non-negative float.\n    \"\"\"\n    try:\n        value = float(n)\n    except (ValueError, TypeError):\n        raise ValidationError(f\"Expected numeric value, got {n!r}\")\n\n    if value &lt; 0:\n        raise ValidationError(f\"Expected non-negative number, got {n}\")\n\n    return value\n</code></pre>"},{"location":"docs/validators/#videoxt.validators.valid_dir","title":"valid_dir","text":"<pre><code>valid_dir(directory)\n</code></pre> <p>Validate a path is a directory and exists and return it.</p>"},{"location":"docs/validators/#videoxt.validators.valid_dir--args","title":"Args:","text":"<pre><code>`directory` (Path | str): The directory to validate.\n</code></pre>"},{"location":"docs/validators/#videoxt.validators.valid_dir--returns","title":"Returns:","text":"<pre><code>`Path`: The directory as a Path object if valid.\n</code></pre>"},{"location":"docs/validators/#videoxt.validators.valid_dir--raises","title":"Raises:","text":"<pre><code>`ValidationError`: If the path is not a directory or does not exist.\n</code></pre> Source code in <code>videoxt/validators.py</code> <pre><code>def valid_dir(directory: Path | str) -&gt; Path:\n    \"\"\"\n    Validate a path is a directory and exists and return it.\n\n    Args:\n    -----\n        `directory` (Path | str): The directory to validate.\n\n    Returns:\n    -----\n        `Path`: The directory as a Path object if valid.\n\n    Raises:\n    -----\n        `ValidationError`: If the path is not a directory or does not exist.\n    \"\"\"\n    if directory is None:\n        raise ValidationError(f\"Directory cannot be None, got {directory!r}\")\n\n    dir_path = Path(directory)\n\n    if not dir_path.is_dir():\n        raise ValidationError(f\"Directory not found, got {directory!r}\")\n\n    if dir_path == Path(\"/\"):\n        raise ValidationError(f\"Invalid directory, got {directory!r}\")\n\n    if dir_path == Path(\".\"):\n        dir_path = Path.cwd()\n\n    if dir_path == Path(\"..\"):\n        dir_path = Path.cwd().parent\n\n    return dir_path\n</code></pre>"},{"location":"docs/validators/#videoxt.validators.valid_filepath","title":"valid_filepath","text":"<pre><code>valid_filepath(filepath, is_video=False)\n</code></pre> <p>Validate a path is a file and exists and return it.</p>"},{"location":"docs/validators/#videoxt.validators.valid_filepath--args","title":"Args:","text":"<pre><code>`filepath` (Path | str):\n    The filepath to validate.\n`is_video` (bool) :\n    If True, the filepath is checked against a set of supported video file\n    suffixes.\n</code></pre>"},{"location":"docs/validators/#videoxt.validators.valid_filepath--returns","title":"Returns:","text":"<pre><code>`Path`: The filepath as a Path object if it is a file and exists.\n</code></pre>"},{"location":"docs/validators/#videoxt.validators.valid_filepath--raises","title":"Raises:","text":"<pre><code>`ValidationError`: If the path is not a file or does not exist.\n</code></pre> Source code in <code>videoxt/validators.py</code> <pre><code>def valid_filepath(filepath: Path | str, is_video: bool = False) -&gt; Path:\n    \"\"\"\n    Validate a path is a file and exists and return it.\n\n    Args:\n    -----\n        `filepath` (Path | str):\n            The filepath to validate.\n        `is_video` (bool) :\n            If True, the filepath is checked against a set of supported video file\n            suffixes.\n\n    Returns:\n    -----\n        `Path`: The filepath as a Path object if it is a file and exists.\n\n    Raises:\n    -----\n        `ValidationError`: If the path is not a file or does not exist.\n    \"\"\"\n    if filepath is None:\n        raise ValidationError(f\"Filepath cannot be None, got {filepath!r}\")\n\n    try:\n        fp = Path(filepath)\n    except TypeError:\n        raise ValidationError(f\"Invalid filepath, got {filepath!r}\")\n\n    if not fp.exists():\n        raise ValidationError(f\"File not found, got {filepath!r}\")\n\n    if not fp.is_file():\n        raise ValidationError(f\"Filepath provided is not a file, got {filepath!r}\")\n\n    if is_video:\n        valid_video_file_suffix(fp.suffix)\n\n    return fp\n</code></pre>"},{"location":"docs/validators/#videoxt.validators.valid_filename","title":"valid_filename","text":"<pre><code>valid_filename(filename)\n</code></pre> <p>Validate a filename does not contain invalid characters and return it.</p> <p>In the context of <code>videoxt</code>, a filename refers to a Path().stem.</p>"},{"location":"docs/validators/#videoxt.validators.valid_filename--args","title":"Args:","text":"<pre><code>`filename` (str): The filename to validate.\n</code></pre>"},{"location":"docs/validators/#videoxt.validators.valid_filename--returns","title":"Returns:","text":"<pre><code>`str`: The filename if it does not contain invalid characters.\n</code></pre>"},{"location":"docs/validators/#videoxt.validators.valid_filename--raises","title":"Raises:","text":"<pre><code>`ValidationError`: If the filename is None, empty or contains invalid chars.\n</code></pre> Source code in <code>videoxt/validators.py</code> <pre><code>def valid_filename(filename: str) -&gt; str:\n    \"\"\"\n    Validate a filename does not contain invalid characters and return it.\n\n    In the context of `videoxt`, a filename refers to a Path().stem.\n\n    Args:\n    -----\n        `filename` (str): The filename to validate.\n\n    Returns:\n    -----\n        `str`: The filename if it does not contain invalid characters.\n\n    Raises:\n    -----\n        `ValidationError`: If the filename is None, empty or contains invalid chars.\n    \"\"\"\n    if filename is None:\n        raise ValidationError(f\"Invalid filename, got {filename!r}\")\n\n    if not filename:\n        raise ValidationError(f\"Invalid filename, got {filename!r}\")\n\n    invalid_chars = r\"[\\\\/:*?\\\"&lt;&gt;|]\"\n    if re.search(invalid_chars, filename):\n        raise ValidationError(\n            f\"Invalid filename, got {filename!r}\\n\"\n            f\"filename can't contain any of the following characters: \\\\/:*?\\\"&lt;&gt;|\"\n        )\n\n    return filename\n</code></pre>"},{"location":"docs/validators/#videoxt.validators.valid_timestamp","title":"valid_timestamp","text":"<pre><code>valid_timestamp(timestamp)\n</code></pre> <p>Validate a timestamp is in the correct format and return it if valid.</p> <p>In the context of <code>videoxt</code> a timestamp is one typically seen during playback on video sharing or streaming platforms. Microseconds are truncated.</p> <p>Valid:  <code>M:SS</code>, <code>MM:SS</code>, <code>H:MM:SS</code>, <code>HH:MM:SS</code>. Invalid: <code>S</code>, <code>SS</code>, <code>H:M:S</code>, values greater than 59 for hours, minutes or seconds.</p>"},{"location":"docs/validators/#videoxt.validators.valid_timestamp--args","title":"Args:","text":"<pre><code>`timestamp` (str): The timestamp to validate.\n</code></pre>"},{"location":"docs/validators/#videoxt.validators.valid_timestamp--returns","title":"Returns:","text":"<pre><code>`str`: The timestamp if valid.\n</code></pre>"},{"location":"docs/validators/#videoxt.validators.valid_timestamp--raises","title":"Raises:","text":"<pre><code>`ValidationError`:\n    If the timestamp is None, empty, or does not match the regex pattern.\n</code></pre> Source code in <code>videoxt/validators.py</code> <pre><code>def valid_timestamp(timestamp: str) -&gt; str:\n    \"\"\"\n    Validate a timestamp is in the correct format and return it if valid.\n\n    In the context of `videoxt` a timestamp is one typically seen during playback on\n    video sharing or streaming platforms. Microseconds are truncated.\n\n    Valid:  `M:SS`, `MM:SS`, `H:MM:SS`, `HH:MM:SS`.\n    Invalid: `S`, `SS`, `H:M:S`, values greater than 59 for hours, minutes or seconds.\n\n    Args:\n    -----\n        `timestamp` (str): The timestamp to validate.\n\n    Returns:\n    -----\n        `str`: The timestamp if valid.\n\n    Raises:\n    -----\n        `ValidationError`:\n            If the timestamp is None, empty, or does not match the regex pattern.\n    \"\"\"\n    if timestamp is None or not timestamp:\n        raise ValidationError(f\"Timestamp string is empty or None, got {timestamp!r}\")\n\n    timestamp = timestamp.split(\".\")[0]\n\n    regex = r\"^([0-9]|[0-5][0-9])(:[0-5][0-9]){1,2}$\"\n    if not bool(re.match(regex, timestamp)):\n        raise ValidationError(\n            f\"Invalid timestamp format, got {timestamp!r}\\n\"\n            f\"Allowed: 'M:SS', 'MM:SS', 'H:MM:SS', 'HH:MM:SS'\"\n        )\n\n    return timestamp\n</code></pre>"},{"location":"docs/validators/#videoxt.validators.valid_start_timestamp","title":"valid_start_timestamp","text":"<pre><code>valid_start_timestamp(start_timestamp)\n</code></pre> <p>Validate a start timestamp is in the correct format and return it if valid.</p> <p>Valid:  <code>M:SS</code>, <code>MM:SS</code>, <code>H:MM:SS</code>, <code>HH:MM:SS</code>. Invalid: <code>S</code>, <code>SS</code>, <code>H:M:S</code>, values greater than 59 for hours, minutes or seconds.</p> <p>See <code>valid_timestamp</code> for more information on how timestamps are validated.</p>"},{"location":"docs/validators/#videoxt.validators.valid_start_timestamp--args","title":"Args:","text":"<pre><code>`start_timestamp` (str) : The timestamp to validate (Ex: '12:34').\n</code></pre>"},{"location":"docs/validators/#videoxt.validators.valid_start_timestamp--returns","title":"Returns:","text":"<pre><code>`str`: The timestamp as a string if valid.\n</code></pre> Source code in <code>videoxt/validators.py</code> <pre><code>def valid_start_timestamp(start_timestamp: str) -&gt; str:\n    \"\"\"\n    Validate a start timestamp is in the correct format and return it if valid.\n\n    Valid:  `M:SS`, `MM:SS`, `H:MM:SS`, `HH:MM:SS`.\n    Invalid: `S`, `SS`, `H:M:S`, values greater than 59 for hours, minutes or seconds.\n\n    See `valid_timestamp` for more information on how timestamps are validated.\n\n    Args:\n    -----\n        `start_timestamp` (str) : The timestamp to validate (Ex: '12:34').\n\n    Returns:\n    -----\n        `str`: The timestamp as a string if valid.\n    \"\"\"\n    timestamp = valid_timestamp(start_timestamp)\n    timestamp_as_seconds = U.timestamp_to_seconds(timestamp)\n    timestamp_as_seconds = (\n        non_negative_float(timestamp)\n        if timestamp_as_seconds is None\n        else non_negative_float(timestamp_as_seconds)\n    )\n\n    return timestamp\n</code></pre>"},{"location":"docs/validators/#videoxt.validators.valid_stop_timestamp","title":"valid_stop_timestamp","text":"<pre><code>valid_stop_timestamp(stop_timestamp)\n</code></pre> <p>Validate a stop timestamp is in the correct format and return it if valid.</p> <p>Valid:  <code>M:SS</code>, <code>MM:SS</code>, <code>H:MM:SS</code>, <code>HH:MM:SS</code>. Invalid: <code>S</code>, <code>SS</code>, <code>H:M:S</code>, values greater than 59 for hours, minutes or seconds.</p> <p>See <code>valid_timestamp</code> for more information on how timestamps are validated.</p>"},{"location":"docs/validators/#videoxt.validators.valid_stop_timestamp--args","title":"Args:","text":"<pre><code>`stop_timestamp` (str): The timestamp to validate (Ex: '12:34').\n</code></pre>"},{"location":"docs/validators/#videoxt.validators.valid_stop_timestamp--returns","title":"Returns:","text":"<pre><code>`str`: The timestamp as a string if valid.\n</code></pre> Source code in <code>videoxt/validators.py</code> <pre><code>def valid_stop_timestamp(stop_timestamp: str) -&gt; str:\n    \"\"\"\n    Validate a stop timestamp is in the correct format and return it if valid.\n\n    Valid:  `M:SS`, `MM:SS`, `H:MM:SS`, `HH:MM:SS`.\n    Invalid: `S`, `SS`, `H:M:S`, values greater than 59 for hours, minutes or seconds.\n\n    See `valid_timestamp` for more information on how timestamps are validated.\n\n    Args:\n    -----\n        `stop_timestamp` (str): The timestamp to validate (Ex: '12:34').\n\n    Returns:\n    -----\n        `str`: The timestamp as a string if valid.\n    \"\"\"\n    timestamp = valid_timestamp(stop_timestamp)\n    timestamp_as_seconds = U.timestamp_to_seconds(timestamp)\n    timestamp_as_seconds = (\n        positive_float(timestamp)\n        if timestamp_as_seconds is None\n        else positive_float(timestamp_as_seconds)\n    )\n\n    return timestamp\n</code></pre>"},{"location":"docs/validators/#videoxt.validators.valid_start_time","title":"valid_start_time","text":"<pre><code>valid_start_time(start_time)\n</code></pre> <p>Validate the start time param is a not negative or a properly formatted timestamp.</p> <p>If start_time is <code>str</code> it is expected to be a timestamp (ex: 'HH:MM:SS') and is returned slightly modified if valid (microseconds are truncated, if any). Otherwise, a number must be greater than or equal to 0 and is returned as a float if valid.</p>"},{"location":"docs/validators/#videoxt.validators.valid_start_time--args","title":"Args:","text":"<pre><code>`start_time` (float | int | str): The start time request parameter.\n</code></pre>"},{"location":"docs/validators/#videoxt.validators.valid_start_time--returns","title":"Returns:","text":"<pre><code>`float | str`: The passed in, slightly modified start time if valid.\n</code></pre>"},{"location":"docs/validators/#videoxt.validators.valid_start_time--raises","title":"Raises:","text":"<pre><code>`ValidationError`:\n    If start time an unaccepted timestamp string, not 0 or greater, or None.\n</code></pre> Source code in <code>videoxt/validators.py</code> <pre><code>def valid_start_time(start_time: float | int | str) -&gt; float | str:\n    \"\"\"\n    Validate the start time param is a not negative or a properly formatted timestamp.\n\n    If start_time is `str` it is expected to be a timestamp (ex: 'HH:MM:SS') and is\n    returned slightly modified if valid (microseconds are truncated, if any). Otherwise,\n    a number must be greater than or equal to 0 and is returned as a float if valid.\n\n    Args:\n    -----\n        `start_time` (float | int | str): The start time request parameter.\n\n    Returns:\n    -----\n        `float | str`: The passed in, slightly modified start time if valid.\n\n    Raises:\n    -----\n        `ValidationError`:\n            If start time an unaccepted timestamp string, not 0 or greater, or None.\n    \"\"\"\n    if start_time is None:\n        raise ValidationError(\"Start time cannot be None.\")\n\n    try:\n        start_time_float = float(start_time)\n    except ValueError:\n        try:\n            return valid_start_timestamp(str(start_time))\n        except ValidationError:\n            raise ValidationError(\n                f\"Invalid start time, got {start_time!r}\\n\"\n                \"Start time must be a non-negative number or a properly formatted \"\n                \"timestamp (Ex: 'HH:MM:SS').\"\n            )\n    else:\n        try:\n            return non_negative_float(start_time_float)\n        except ValidationError:\n            raise ValidationError(\n                f\"Invalid start time, got {start_time!r}\\n\"\n                \"Start time must be a non-negative number or a properly formatted \"\n                \"timestamp (Ex: 'HH:MM:SS').\"\n            )\n</code></pre>"},{"location":"docs/validators/#videoxt.validators.valid_stop_time","title":"valid_stop_time","text":"<pre><code>valid_stop_time(stop_time)\n</code></pre> <p>Validate the stop time param is a positive number or a properly formatted timestamp.</p> <p>If stop_time is <code>str</code> it is expected to be a timestamp (ex: 'HH:MM:SS') and is returned slightly modified if valid (microseconds are truncated, if any). Otherwise, a number must be greater than 0 and is returned as a float if valid.</p>"},{"location":"docs/validators/#videoxt.validators.valid_stop_time--args","title":"Args:","text":"<pre><code>`stop_time` (float | int | str): The stop time request parameter.\n</code></pre>"},{"location":"docs/validators/#videoxt.validators.valid_stop_time--returns","title":"Returns:","text":"<pre><code>`float | str`: The passed in, slightly modified stop time if valid.\n</code></pre>"},{"location":"docs/validators/#videoxt.validators.valid_stop_time--raises","title":"Raises:","text":"<pre><code>`ValidationError`:\n    If stop time an unaccepted timestamp string, not greater than 0, or None.\n</code></pre> Source code in <code>videoxt/validators.py</code> <pre><code>def valid_stop_time(stop_time: float | int | str) -&gt; float | str:\n    \"\"\"\n    Validate the stop time param is a positive number or a properly formatted timestamp.\n\n    If stop_time is `str` it is expected to be a timestamp (ex: 'HH:MM:SS') and is\n    returned slightly modified if valid (microseconds are truncated, if any). Otherwise,\n    a number must be greater than 0 and is returned as a float if valid.\n\n    Args:\n    -----\n        `stop_time` (float | int | str): The stop time request parameter.\n\n    Returns:\n    -----\n        `float | str`: The passed in, slightly modified stop time if valid.\n\n    Raises:\n    -----\n        `ValidationError`:\n            If stop time an unaccepted timestamp string, not greater than 0, or None.\n    \"\"\"\n    if stop_time is None:\n        raise ValidationError(\"Stop time cannot be None.\")\n\n    try:\n        stop_time_float = float(stop_time)\n    except ValueError:\n        try:\n            return valid_stop_timestamp(str(stop_time))\n        except ValidationError:\n            raise ValidationError(\n                f\"Invalid stop time, got {stop_time!r}\\n\"\n                \"Stop time must be a positive number or a properly formatted \"\n                \"timestamp (Ex: 'HH:MM:SS').\"\n            )\n    else:\n        try:\n            return positive_float(stop_time_float)\n        except ValidationError:\n            raise ValidationError(\n                f\"Invalid stop time, got {stop_time!r}\\n\"\n                \"Stop time must be a positive number or a properly formatted \"\n                \"timestamp (Ex: 'HH:MM:SS').\"\n            )\n</code></pre>"},{"location":"docs/validators/#videoxt.validators.valid_extraction_range","title":"valid_extraction_range","text":"<pre><code>valid_extraction_range(start, stop, duration)\n</code></pre> <p>Validate the extraction range against the video's duration and return it if valid.</p>"},{"location":"docs/validators/#videoxt.validators.valid_extraction_range--args","title":"Args:","text":"<pre><code>`start` (float):\n    Extraction start second.\n`stop` (float):\n    Extraction stop second.\n`duration` (float):\n    Duration of the video in seconds.\n</code></pre>"},{"location":"docs/validators/#videoxt.validators.valid_extraction_range--returns","title":"Returns:","text":"<pre><code>`Tuple[float, float, float]`:\n    The start, stop and duration if valid (start, stop, duration).\n</code></pre>"},{"location":"docs/validators/#videoxt.validators.valid_extraction_range--raises","title":"Raises:","text":"<pre><code>`ValidationError`:\n- If the start time is greater than or equal to the video duration.\n- If the stop time is less than or equal to the start time.\n</code></pre> Source code in <code>videoxt/validators.py</code> <pre><code>def valid_extraction_range(\n    start: float, stop: float, duration: float\n) -&gt; tuple[float, float, float]:\n    \"\"\"\n    Validate the extraction range against the video's duration and return it if valid.\n\n    Args:\n    -----\n        `start` (float):\n            Extraction start second.\n        `stop` (float):\n            Extraction stop second.\n        `duration` (float):\n            Duration of the video in seconds.\n\n    Returns:\n    -----\n        `Tuple[float, float, float]`:\n            The start, stop and duration if valid (start, stop, duration).\n\n    Raises:\n    -----\n        `ValidationError`:\n        - If the start time is greater than or equal to the video duration.\n        - If the stop time is less than or equal to the start time.\n    \"\"\"\n    if stop &gt; duration:\n        stop = duration\n\n    if start &lt; 0:\n        start = 0\n\n    if start &gt;= duration:\n        raise ValidationError(\n            f\"Start second ({start}) is &gt;= video duration ({duration})\"\n        )\n\n    if stop &lt;= start:\n        raise ValidationError(\n            f\"Stop second ({stop}) must be greater than start second ({start})\"\n        )\n\n    return start, stop, duration\n</code></pre>"},{"location":"docs/validators/#videoxt.validators.valid_dimensions","title":"valid_dimensions","text":"<pre><code>valid_dimensions(dimensions)\n</code></pre> <p>Validate values in a dimensions tuple are positive integers and return it.</p>"},{"location":"docs/validators/#videoxt.validators.valid_dimensions--args","title":"Args:","text":"<pre><code>`dimensions` (tuple[int, int]): The dimensions to validate.\n</code></pre>"},{"location":"docs/validators/#videoxt.validators.valid_dimensions--returns","title":"Returns:","text":"<pre><code>`tuple[int, int]`: The dimensions if both integers are positive.\n</code></pre>"},{"location":"docs/validators/#videoxt.validators.valid_dimensions--raises","title":"Raises:","text":"<pre><code>`ValidationError`:\n    If the length of the tuple isn't 2 or one or more of the values are not\n    positive integers\n</code></pre> Source code in <code>videoxt/validators.py</code> <pre><code>def valid_dimensions(dimensions: tuple[int, int]) -&gt; tuple[int, int]:\n    \"\"\"\n    Validate values in a dimensions tuple are positive integers and return it.\n\n    Args:\n    -----\n        `dimensions` (tuple[int, int]): The dimensions to validate.\n\n    Returns:\n    -----\n        `tuple[int, int]`: The dimensions if both integers are positive.\n\n    Raises:\n    -----\n        `ValidationError`:\n            If the length of the tuple isn't 2 or one or more of the values are not\n            positive integers\n    \"\"\"\n    if len(dimensions) != 2:\n        raise ValidationError(f\"Invalid dimensions, got {dimensions!r}\")\n\n    dims = tuple([positive_int(dim) for dim in list(dimensions)])\n\n    return cast(tuple[int, int], dims)\n</code></pre>"},{"location":"docs/validators/#videoxt.validators.valid_rotate_value","title":"valid_rotate_value","text":"<pre><code>valid_rotate_value(n)\n</code></pre> <p>Validate a rotate value is either 0, 90, 180 or 270.</p>"},{"location":"docs/validators/#videoxt.validators.valid_rotate_value--args","title":"Args:","text":"<pre><code>`n` (float | int | str): The rotate value to validate.\n</code></pre>"},{"location":"docs/validators/#videoxt.validators.valid_rotate_value--returns","title":"Returns:","text":"<pre><code>`int`: The rotate value if 0, 90, 180, or 270.\n</code></pre>"},{"location":"docs/validators/#videoxt.validators.valid_rotate_value--raises","title":"Raises:","text":"<pre><code>`ValidationError`: If the rotate value is invalid.\n</code></pre> Source code in <code>videoxt/validators.py</code> <pre><code>def valid_rotate_value(n: float | int | str) -&gt; int:\n    \"\"\"\n    Validate a rotate value is either 0, 90, 180 or 270.\n\n    Args:\n    -----\n        `n` (float | int | str): The rotate value to validate.\n\n    Returns:\n    -----\n        `int`: The rotate value if 0, 90, 180, or 270.\n\n    Raises:\n    -----\n        `ValidationError`: If the rotate value is invalid.\n    \"\"\"\n    try:\n        val = int(n)\n    except ValueError:\n        raise ValidationError(\n            f\"Invalid rotate value, got {n!r}\\n\"\n            f\"Allowed values: {C.VALID_ROTATE_VALUES}\"\n        )\n\n    if val not in C.VALID_ROTATE_VALUES:\n        raise ValidationError(\n            f\"Invalid rotate value, got {n}\\n\"\n            f\"Allowed values: {C.VALID_ROTATE_VALUES}\"\n        )\n\n    return val\n</code></pre>"},{"location":"docs/validators/#videoxt.validators.valid_audio_format","title":"valid_audio_format","text":"<pre><code>valid_audio_format(audio_format)\n</code></pre> <p>Validate audio format is supported by <code>videoxt</code> and return it if so.</p> <p>Input is converted to lowercase and stripped of any leading periods. <code>Mp3</code> and <code>.MP3</code> would both be considered valid and returned as <code>mp3</code>.</p> <p>See supported formats here: <code>videoxt.constants.SUPPORTED_AUDIO_FORMATS</code>.</p>"},{"location":"docs/validators/#videoxt.validators.valid_audio_format--args","title":"Args:","text":"<pre><code>`audio_format` (str): The audio format to validate.\n</code></pre>"},{"location":"docs/validators/#videoxt.validators.valid_audio_format--returns","title":"Returns:","text":"<pre><code>`str`: The audio format if supported.\n</code></pre>"},{"location":"docs/validators/#videoxt.validators.valid_audio_format--raises","title":"Raises:","text":"<pre><code>`ValidationError`: If the audio format is not supported.\n</code></pre> Source code in <code>videoxt/validators.py</code> <pre><code>def valid_audio_format(audio_format: str) -&gt; str:\n    \"\"\"\n    Validate audio format is supported by `videoxt` and return it if so.\n\n    Input is converted to lowercase and stripped of any leading periods. `Mp3` and\n    `.MP3` would both be considered valid and returned as `mp3`.\n\n    See supported formats here: `videoxt.constants.SUPPORTED_AUDIO_FORMATS`.\n\n    Args:\n    -----\n        `audio_format` (str): The audio format to validate.\n\n    Returns:\n    -----\n        `str`: The audio format if supported.\n\n    Raises:\n    -----\n        `ValidationError`: If the audio format is not supported.\n    \"\"\"\n    fmt = audio_format.lower().lstrip(\".\")\n    if fmt not in C.SUPPORTED_AUDIO_FORMATS:\n        raise ValidationError(\n            f\"Unsupported audio format, got {audio_format!r}\\n\"\n            f\"Supported formats: {C.SUPPORTED_AUDIO_FORMATS}\"\n        )\n\n    return fmt\n</code></pre>"},{"location":"docs/validators/#videoxt.validators.valid_image_format","title":"valid_image_format","text":"<pre><code>valid_image_format(image_format)\n</code></pre> <p>Validate image format is supported by <code>videoxt</code> and return it if so.</p> <p>Input is converted to lowercase and stripped of any leading periods. <code>jpG</code> and <code>.JPG</code> would both be considered valid and returned as <code>jpg</code>.</p> <p>See supported formats here: <code>videoxt.constants.SUPPORTED_IMAGE_FORMATS</code>.</p>"},{"location":"docs/validators/#videoxt.validators.valid_image_format--args","title":"Args:","text":"<pre><code>`image_format` (str): The image format to validate.\n</code></pre>"},{"location":"docs/validators/#videoxt.validators.valid_image_format--returns","title":"Returns:","text":"<pre><code>`str`: The image format if valid.\n</code></pre>"},{"location":"docs/validators/#videoxt.validators.valid_image_format--raises","title":"Raises:","text":"<pre><code>`ValidationError`: If the image format is not supported.\n</code></pre> Source code in <code>videoxt/validators.py</code> <pre><code>def valid_image_format(image_format: str) -&gt; str:\n    \"\"\"\n    Validate image format is supported by `videoxt` and return it if so.\n\n    Input is converted to lowercase and stripped of any leading periods. `jpG` and\n    `.JPG` would both be considered valid and returned as `jpg`.\n\n    See supported formats here: `videoxt.constants.SUPPORTED_IMAGE_FORMATS`.\n\n    Args:\n    -----\n        `image_format` (str): The image format to validate.\n\n    Returns:\n    -----\n        `str`: The image format if valid.\n\n    Raises:\n    -----\n        `ValidationError`: If the image format is not supported.\n    \"\"\"\n    fmt = image_format.lower().lstrip(\".\")\n    if fmt not in C.SUPPORTED_IMAGE_FORMATS:\n        raise ValidationError(\n            f\"Invalid image format, got {image_format!r}\\n\"\n            f\"Supported image formats: {C.SUPPORTED_IMAGE_FORMATS}\"\n        )\n\n    return fmt\n</code></pre>"},{"location":"docs/validators/#videoxt.validators.valid_volume","title":"valid_volume","text":"<pre><code>valid_volume(volume)\n</code></pre> <p>Validate and return non-negative float audio volume. If input is negative, set to 0.</p>"},{"location":"docs/validators/#videoxt.validators.valid_volume--args","title":"Args:","text":"<pre><code>`volume` (float | int | str): The volume to validate.\n</code></pre>"},{"location":"docs/validators/#videoxt.validators.valid_volume--returns","title":"Returns:","text":"<pre><code>`float`: The volume as a float if valid.\n</code></pre>"},{"location":"docs/validators/#videoxt.validators.valid_volume--raises","title":"Raises:","text":"<pre><code>`ValidationError`: If the volume is None.\n</code></pre> Source code in <code>videoxt/validators.py</code> <pre><code>def valid_volume(volume: float | int | str) -&gt; float:\n    \"\"\"\n    Validate and return non-negative float audio volume. If input is negative, set to 0.\n\n    Args:\n    -----\n        `volume` (float | int | str): The volume to validate.\n\n    Returns:\n    -----\n        `float`: The volume as a float if valid.\n\n    Raises:\n    -----\n        `ValidationError`: If the volume is None.\n    \"\"\"\n    if volume is None:\n        raise ValidationError(\"Volume cannot be None.\")\n\n    if isinstance(volume, (float, int)):\n        return volume if volume &gt; 0 else 0\n\n    try:\n        vol = float(volume)\n    except (ValueError, TypeError):\n        raise ValidationError(f\"Volume expects numeric value, got {volume!r}\")\n\n    return vol if vol &gt; 0 else 0\n</code></pre>"},{"location":"docs/validators/#videoxt.validators.valid_video_file_suffix","title":"valid_video_file_suffix","text":"<pre><code>valid_video_file_suffix(suffix)\n</code></pre> <p>Validate suffix provided is supported by <code>videoxt</code> and return it.</p> <p>Input is converted to lowercase and stripped of any leading periods. <code>Mp4</code> and <code>.MP4</code> would both be considered valid and returned as <code>mp4</code>.</p>"},{"location":"docs/validators/#videoxt.validators.valid_video_file_suffix--args","title":"Args:","text":"<pre><code>`suffix` (str): The suffix to validate.\n</code></pre>"},{"location":"docs/validators/#videoxt.validators.valid_video_file_suffix--returns","title":"Returns:","text":"<pre><code>`str`: The suffix if valid.\n</code></pre>"},{"location":"docs/validators/#videoxt.validators.valid_video_file_suffix--raises","title":"Raises:","text":"<pre><code>`ValidationError`: If the video format is not supported.\n</code></pre> Source code in <code>videoxt/validators.py</code> <pre><code>def valid_video_file_suffix(suffix: str) -&gt; str:\n    \"\"\"\n    Validate suffix provided is supported by `videoxt` and return it.\n\n    Input is converted to lowercase and stripped of any leading periods. `Mp4` and\n    `.MP4` would both be considered valid and returned as `mp4`.\n\n    Args:\n    -----\n        `suffix` (str): The suffix to validate.\n\n    Returns:\n    -----\n        `str`: The suffix if valid.\n\n    Raises:\n    -----\n        `ValidationError`: If the video format is not supported.\n    \"\"\"\n    sfx = suffix.lower().lstrip(\".\")\n    if sfx not in C.SUPPORTED_VIDEO_FORMATS:\n        raise ValidationError(\n            f\"Invalid video file suffix, got {suffix!r}\\n\"\n            f\"Supported: {C.SUPPORTED_VIDEO_FORMATS}\"\n        )\n\n    return sfx\n</code></pre>"},{"location":"docs/validators/#videoxt.validators.valid_fps","title":"valid_fps","text":"<pre><code>valid_fps(fps)\n</code></pre> <p>Validate and return a positive float fps.</p>"},{"location":"docs/validators/#videoxt.validators.valid_fps--args","title":"Args:","text":"<pre><code>`fps` (float | int | str): The fps to validate.\n</code></pre>"},{"location":"docs/validators/#videoxt.validators.valid_fps--returns","title":"Returns:","text":"<pre><code>`float`: The fps as a float if valid.\n</code></pre>"},{"location":"docs/validators/#videoxt.validators.valid_fps--raises","title":"Raises:","text":"<pre><code>`ValidationError`: If the fps is None or not a positive float.\n</code></pre> Source code in <code>videoxt/validators.py</code> <pre><code>def valid_fps(fps: float | int | str) -&gt; float:\n    \"\"\"\n    Validate and return a positive float fps.\n\n    Args:\n    -----\n        `fps` (float | int | str): The fps to validate.\n\n    Returns:\n    -----\n        `float`: The fps as a float if valid.\n\n    Raises:\n    -----\n        `ValidationError`: If the fps is None or not a positive float.\n    \"\"\"\n    if fps is None:\n        raise ValidationError(\"FPS cannot be None.\")\n\n    try:\n        return positive_float(fps)\n    except ValidationError:\n        raise ValidationError(\n            f\"Invalid fps, got {fps!r}\\nFPS must be a positive number.\"\n        )\n</code></pre>"},{"location":"docs/validators/#videoxt.validators.valid_dimensions_str","title":"valid_dimensions_str","text":"<pre><code>valid_dimensions_str(dimensions)\n</code></pre> <p>Validate and return a tuple of positive integers from a string of dimensions.</p>"},{"location":"docs/validators/#videoxt.validators.valid_dimensions_str--args","title":"Args:","text":"<pre><code>`dimensions` (str): The dimensions to validate.\n</code></pre>"},{"location":"docs/validators/#videoxt.validators.valid_dimensions_str--returns","title":"Returns:","text":"<pre><code>`tuple[int, int]`: The dimensions as a tuple of integers if valid.\n</code></pre>"},{"location":"docs/validators/#videoxt.validators.valid_dimensions_str--raises","title":"Raises:","text":"<pre><code>`ValidationError`: If the dimensions are None, empty, or not in this format:\n    'WxH' (Ex: '1920x1080').\n</code></pre> Source code in <code>videoxt/validators.py</code> <pre><code>def valid_dimensions_str(dimensions: str) -&gt; tuple[int, int]:\n    \"\"\"\n    Validate and return a tuple of positive integers from a string of dimensions.\n\n    Args:\n    -----\n        `dimensions` (str): The dimensions to validate.\n\n    Returns:\n    -----\n        `tuple[int, int]`: The dimensions as a tuple of integers if valid.\n\n    Raises:\n    -----\n        `ValidationError`: If the dimensions are None, empty, or not in this format:\n            'WxH' (Ex: '1920x1080').\n    \"\"\"\n    if not dimensions:\n        raise ValidationError(\n            f\"Empty dimensions provided, got {dimensions!r}\\n\"\n            \"Expected format: 'WxH' (Ex: '1920x1080')\"\n        )\n\n    if dimensions.count(\"x\") &gt; 1:\n        raise ValidationError(\n            f\"Too many dimensions provided, got {dimensions!r}\\n\"\n            \"Expected format: 'WxH' (Ex: '1920x1080')\"\n        )\n\n    try:\n        dims = tuple(positive_int(dim) for dim in tuple(dimensions.split(\"x\")))\n    except ValidationError:\n        raise ValidationError(\n            f\"Invalid dimensions, got {dimensions!r}\\n\"\n            \"Dimensions must be positive integers.\\n\"\n            \"Expected format: 'WxH' (Ex: '1920x1080')\"\n        )\n\n    return cast(tuple[int, int], dims)\n</code></pre>"},{"location":"docs/validators/#videoxt.validators.valid_resize","title":"valid_resize","text":"<pre><code>valid_resize(resize)\n</code></pre> <p>Validate and return a positive float resize value.</p>"},{"location":"docs/validators/#videoxt.validators.valid_resize--args","title":"Args:","text":"<pre><code>`resize` (float | int | str): The resize value to validate.\n</code></pre>"},{"location":"docs/validators/#videoxt.validators.valid_resize--returns","title":"Returns:","text":"<pre><code>`float`: The resize value as a float if valid.\n</code></pre>"},{"location":"docs/validators/#videoxt.validators.valid_resize--raises","title":"Raises:","text":"<pre><code>`ValidationError`: If the resize value is None or not a positive float.\n</code></pre> Source code in <code>videoxt/validators.py</code> <pre><code>def valid_resize(resize: float | int | str) -&gt; float:\n    \"\"\"\n    Validate and return a positive float resize value.\n\n    Args:\n    -----\n        `resize` (float | int | str): The resize value to validate.\n\n    Returns:\n    -----\n        `float`: The resize value as a float if valid.\n\n    Raises:\n    -----\n        `ValidationError`: If the resize value is None or not a positive float.\n    \"\"\"\n    if resize is None:\n        raise ValidationError(\"Resize value cannot be None.\")\n\n    try:\n        return positive_float(resize)\n    except ValidationError:\n        raise ValidationError(\n            f\"Invalid resize value, got {resize!r}\\n\"\n            \"Resize value must be a positive number.\"\n        )\n</code></pre>"},{"location":"docs/validators/#videoxt.validators.valid_speed","title":"valid_speed","text":"<pre><code>valid_speed(speed)\n</code></pre> <p>Validate and return a positive float speed value.</p>"},{"location":"docs/validators/#videoxt.validators.valid_speed--args","title":"Args:","text":"<pre><code>`speed` (float | int | str): The speed value to validate.\n</code></pre>"},{"location":"docs/validators/#videoxt.validators.valid_speed--returns","title":"Returns:","text":"<pre><code>`float`: The speed value as a float if valid.\n</code></pre>"},{"location":"docs/validators/#videoxt.validators.valid_speed--raises","title":"Raises:","text":"<pre><code>`ValidationError`: If the speed value is None or not a positive float.\n</code></pre> Source code in <code>videoxt/validators.py</code> <pre><code>def valid_speed(speed: float | int | str) -&gt; float:\n    \"\"\"\n    Validate and return a positive float speed value.\n\n    Args:\n    -----\n        `speed` (float | int | str): The speed value to validate.\n\n    Returns:\n    -----\n        `float`: The speed value as a float if valid.\n\n    Raises:\n    -----\n        `ValidationError`: If the speed value is None or not a positive float.\n    \"\"\"\n    if speed is None:\n        raise ValidationError(\"Speed value cannot be None.\")\n\n    try:\n        return positive_float(speed)\n    except ValidationError:\n        raise ValidationError(\n            f\"Invalid speed value, got {speed!r}\\n\"\n            \"Speed value must be a positive number.\"\n        )\n</code></pre>"},{"location":"docs/validators/#videoxt.validators.valid_capture_rate","title":"valid_capture_rate","text":"<pre><code>valid_capture_rate(capture_rate)\n</code></pre> <p>Validate and return a positive integer capture rate.</p>"},{"location":"docs/validators/#videoxt.validators.valid_capture_rate--args","title":"Args:","text":"<pre><code>`capture_rate` (float | int | str): The capture rate to validate.\n</code></pre>"},{"location":"docs/validators/#videoxt.validators.valid_capture_rate--returns","title":"Returns:","text":"<pre><code>`int`: The capture rate as an integer if valid.\n</code></pre>"},{"location":"docs/validators/#videoxt.validators.valid_capture_rate--raises","title":"Raises:","text":"<pre><code>`ValidationError`: If the capture rate is None or not a positive integer.\n</code></pre> Source code in <code>videoxt/validators.py</code> <pre><code>def valid_capture_rate(capture_rate: float | int | str) -&gt; int:\n    \"\"\"\n    Validate and return a positive integer capture rate.\n\n    Args:\n    -----\n        `capture_rate` (float | int | str): The capture rate to validate.\n\n    Returns:\n    -----\n        `int`: The capture rate as an integer if valid.\n\n    Raises:\n    -----\n        `ValidationError`: If the capture rate is None or not a positive integer.\n    \"\"\"\n    if capture_rate is None:\n        raise ValidationError(\"Capture rate cannot be None.\")\n\n    try:\n        return positive_int(capture_rate)\n    except ValidationError:\n        raise ValidationError(\n            f\"Invalid capture rate, got {capture_rate!r}\\n\"\n            \"Capture rate must be a positive integer.\"\n        )\n</code></pre>"},{"location":"docs/video/","title":"video","text":"<p>Contains Video class and functions for validating and retrieving video properties.</p>"},{"location":"docs/video/#videoxt.video.Video","title":"Video  <code>dataclass</code>","text":"<p>Validate, set and store video properties such as the file path, dimensions, fps, frame count, duration, filesize, and whether the video has audio. A validated <code>Video</code> object is required to validate and calculate attributes in primary objects and functions throughout.</p>"},{"location":"docs/video/#videoxt.video.Video--fields","title":"Fields:","text":"<pre><code>`filepath` (Path): Path to the video file.\n</code></pre>"},{"location":"docs/video/#videoxt.video.Video--attributes","title":"Attributes:","text":"<pre><code>`dimensions` (tuple[int, int]):\n    Dimensions of the video as (width, height).\n`fps` (float):\n    Frame rate of the video.\n`frame_count` (int):\n    Number of frames in the video.\n`duration` (datetime.timedelta):\n    Duration of the video as a timedelta object.\n`duration_seconds` (float):\n    Duration of the video in seconds.\n`duration_timestamp` (str):\n    Duration of the video in `HH:MM:SS` format.\n`has_audio` (bool):\n    True if the video has audio, False otherwise.\n`filesize_bytes` (int):\n    Size of the video file in bytes.\n`filesize` (str):\n    Size of the video file in a human-readable format.\n</code></pre>"},{"location":"docs/video/#videoxt.video.Video.filepath","title":"filepath  <code>instance-attribute</code>","text":"<pre><code>filepath\n</code></pre>"},{"location":"docs/video/#videoxt.video.Video.dimensions","title":"dimensions  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>dimensions = field(init=False)\n</code></pre>"},{"location":"docs/video/#videoxt.video.Video.fps","title":"fps  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>fps = field(init=False)\n</code></pre>"},{"location":"docs/video/#videoxt.video.Video.frame_count","title":"frame_count  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>frame_count = field(init=False)\n</code></pre>"},{"location":"docs/video/#videoxt.video.Video.duration","title":"duration  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>duration = field(init=False)\n</code></pre>"},{"location":"docs/video/#videoxt.video.Video.duration_seconds","title":"duration_seconds  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>duration_seconds = field(init=False)\n</code></pre>"},{"location":"docs/video/#videoxt.video.Video.duration_timestamp","title":"duration_timestamp  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>duration_timestamp = field(init=False)\n</code></pre>"},{"location":"docs/video/#videoxt.video.Video.has_audio","title":"has_audio  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>has_audio = field(init=False)\n</code></pre>"},{"location":"docs/video/#videoxt.video.Video.filesize_bytes","title":"filesize_bytes  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>filesize_bytes = field(init=False)\n</code></pre>"},{"location":"docs/video/#videoxt.video.Video.filesize","title":"filesize  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>filesize = field(init=False)\n</code></pre>"},{"location":"docs/video/#videoxt.video.Video.validate_filepath","title":"validate_filepath","text":"<pre><code>validate_filepath()\n</code></pre> <p>Validate the file is a video file and exists.</p> Source code in <code>videoxt/video.py</code> <pre><code>def validate_filepath(self) -&gt; Path:\n    \"\"\"Validate the file is a video file and exists.\"\"\"\n    self.filepath = V.valid_filepath(self.filepath, is_video=True)\n    return self.filepath\n</code></pre>"},{"location":"docs/video/#videoxt.video.Video.validate_filesize_bytes","title":"validate_filesize_bytes","text":"<pre><code>validate_filesize_bytes()\n</code></pre> <p>Validate the video file size in bytes is a positive integer.</p> Source code in <code>videoxt/video.py</code> <pre><code>def validate_filesize_bytes(self) -&gt; int:\n    \"\"\"Validate the video file size in bytes is a positive integer.\"\"\"\n    self.filesize_bytes = V.positive_int(self.filepath.stat().st_size)\n    return self.filesize_bytes\n</code></pre>"},{"location":"docs/video/#videoxt.video.Video.setattrs_from_opencap","title":"setattrs_from_opencap","text":"<pre><code>setattrs_from_opencap()\n</code></pre> <p>Set the dimensions, fps and frame count read from an opened video capture.</p> Source code in <code>videoxt/video.py</code> <pre><code>def setattrs_from_opencap(self) -&gt; tuple[tuple[int, int], float, int]:\n    \"\"\"Set the dimensions, fps and frame count read from an opened video capture.\"\"\"\n    properties = fetch_video_properties(self.filepath)\n    self.dimensions = properties.get(\"dimensions\", None)\n    self.fps = properties.get(\"fps\", None)\n    self.frame_count = properties.get(\"frame_count\", None)\n\n    return self.dimensions, self.fps, self.frame_count\n</code></pre>"},{"location":"docs/video/#videoxt.video.Video.validate_dimensions","title":"validate_dimensions","text":"<pre><code>validate_dimensions()\n</code></pre> <p>Validate the video frame width and height are positive integers.</p> Source code in <code>videoxt/video.py</code> <pre><code>def validate_dimensions(self) -&gt; tuple[int, int]:\n    \"\"\"Validate the video frame width and height are positive integers.\"\"\"\n    if self.dimensions is None:\n        raise VideoValidationError(\n            \"The video dimensions could not be read from the video file. Please \"\n            \"check the file.\"\n        )\n\n    try:\n        self.dimensions = V.valid_dimensions(self.dimensions)\n    except ValidationError as err:\n        raise VideoValidationError(\n            \"The video dimensions are invalid. Please check the file.\"\n        ) from err\n\n    return self.dimensions\n</code></pre>"},{"location":"docs/video/#videoxt.video.Video.validate_fps","title":"validate_fps","text":"<pre><code>validate_fps()\n</code></pre> <p>Validate the video fps is a positive float.</p> Source code in <code>videoxt/video.py</code> <pre><code>def validate_fps(self) -&gt; float:\n    \"\"\"Validate the video fps is a positive float.\"\"\"\n    if self.fps is None:\n        raise VideoValidationError(\n            \"The video fps was read as None from the video file. Please check the \"\n            \"file.\"\n        )\n\n    try:\n        self.fps = V.positive_float(self.fps)\n    except ValidationError as err:\n        raise VideoValidationError(\n            \"The video fps was read as a non-positive float from the video file. \"\n            \"Please check the file.\"\n        ) from err\n\n    return self.fps\n</code></pre>"},{"location":"docs/video/#videoxt.video.Video.validate_frame_count","title":"validate_frame_count","text":"<pre><code>validate_frame_count()\n</code></pre> <p>Validate the video frame count is a positive integer.</p> Source code in <code>videoxt/video.py</code> <pre><code>def validate_frame_count(self) -&gt; int:\n    \"\"\"Validate the video frame count is a positive integer.\"\"\"\n    if self.frame_count is None:\n        raise VideoValidationError(\n            \"The video frame count could not be read from the video file. Please \"\n            \"check the file.\"\n        )\n\n    try:\n        self.frame_count = V.positive_int(self.frame_count)\n    except ValidationError as err:\n        raise VideoValidationError(\n            \"The video frame count was read as a non-positive integer from the \"\n            \"video file. Please check the file.\"\n        ) from err\n\n    return self.frame_count\n</code></pre>"},{"location":"docs/video/#videoxt.video.Video.setattrs_duration","title":"setattrs_duration","text":"<pre><code>setattrs_duration()\n</code></pre> <p>Set the duration attributes.</p> Source code in <code>videoxt/video.py</code> <pre><code>def setattrs_duration(self) -&gt; tuple[timedelta, float, str]:\n    \"\"\"Set the duration attributes.\"\"\"\n    self.duration = U.calculate_duration(self.frame_count, self.fps)\n    self.duration_seconds = self.duration.total_seconds()\n    self.duration_timestamp = U.seconds_to_timestamp(self.duration_seconds)\n    return self.duration, self.duration_seconds, self.duration_timestamp\n</code></pre>"},{"location":"docs/video/#videoxt.video.Video.setattr_filesize","title":"setattr_filesize","text":"<pre><code>setattr_filesize()\n</code></pre> <p>Set the filesize attribute to a human-readable format.</p> Source code in <code>videoxt/video.py</code> <pre><code>def setattr_filesize(self) -&gt; str:\n    \"\"\"Set the filesize attribute to a human-readable format.\"\"\"\n    self.filesize = U.convert_bytes(self.filesize_bytes)\n    return self.filesize\n</code></pre>"},{"location":"docs/video/#videoxt.video.Video.setattr_has_audio","title":"setattr_has_audio","text":"<pre><code>setattr_has_audio()\n</code></pre> <p>Set the has_audio attribute with moviepy.editor import VideoFileClip.audio</p> Source code in <code>videoxt/video.py</code> <pre><code>def setattr_has_audio(self) -&gt; bool:\n    \"\"\"Set the has_audio attribute with moviepy.editor import VideoFileClip.audio\"\"\"\n    with VideoFileClip(str(self.filepath)) as clip:\n        self.has_audio = bool(clip.audio)\n    return self.has_audio\n</code></pre>"},{"location":"docs/video/#videoxt.video.fetch_video_properties","title":"fetch_video_properties","text":"<pre><code>fetch_video_properties(filepath)\n</code></pre> <p>Open the video file to retrieve and return the video's dimensions, fps, and frame count as a dictionary.</p>"},{"location":"docs/video/#videoxt.video.fetch_video_properties--args","title":"Args:","text":"<pre><code>`filepath` (Path): Path to the video file.\n</code></pre>"},{"location":"docs/video/#videoxt.video.fetch_video_properties--returns","title":"Returns:","text":"<pre><code>`dict[str, Any]`:\n    Dictionary containing unvalidated video properties:\n\n    - \"dimensions\" (tuple): Dimensions of the video as (width, height).\n    - \"fps\" (float): Frame rate of the video.\n    - \"frame_count\" (int): Number of frames in the video.\n</code></pre> Source code in <code>videoxt/video.py</code> <pre><code>def fetch_video_properties(filepath: Path) -&gt; dict[str, Any]:\n    \"\"\"\n    Open the video file to retrieve and return the video's dimensions, fps, and frame\n    count as a dictionary.\n\n    Args:\n    -----\n        `filepath` (Path): Path to the video file.\n\n    Returns:\n    -----\n        `dict[str, Any]`:\n            Dictionary containing unvalidated video properties:\n\n            - \"dimensions\" (tuple): Dimensions of the video as (width, height).\n            - \"fps\" (float): Frame rate of the video.\n            - \"frame_count\" (int): Number of frames in the video.\n    \"\"\"\n    with open_video_capture(filepath) as opencap:\n        frame_height: int = opencap.get(cv2.CAP_PROP_FRAME_HEIGHT)\n        frame_width: int = opencap.get(cv2.CAP_PROP_FRAME_WIDTH)\n        fps: float = opencap.get(cv2.CAP_PROP_FPS)\n        frame_count: int = opencap.get(cv2.CAP_PROP_FRAME_COUNT)\n\n    return {\n        \"dimensions\": (frame_width, frame_height),\n        \"fps\": fps,\n        \"frame_count\": frame_count,\n    }\n</code></pre>"},{"location":"docs/video/#videoxt.video.open_video_capture","title":"open_video_capture","text":"<pre><code>open_video_capture(filepath)\n</code></pre> <p>Context manager for opening a video file with <code>cv2.VideoCapture</code>.</p>"},{"location":"docs/video/#videoxt.video.open_video_capture--usage","title":"Usage:","text":"<pre><code>&gt;&gt;&gt; from videoxt.video import open_video_capture\n&gt;&gt;&gt; with open_video_capture('path/to/video.mp4') as opencap:\n...     # do something with 'opencap'\n...     type(opencap)\n&lt;class 'cv2.VideoCapture'&gt;\n</code></pre>"},{"location":"docs/video/#videoxt.video.open_video_capture--args","title":"Args:","text":"<pre><code>`filepath` (Path): Path to the video file.\n</code></pre>"},{"location":"docs/video/#videoxt.video.open_video_capture--yields","title":"Yields:","text":"<pre><code>`cv2.VideoCapture`: An opened cv2 video capture.\n</code></pre>"},{"location":"docs/video/#videoxt.video.open_video_capture--raises","title":"Raises:","text":"<pre><code>- `ClosedVideoCaptureError`:\n    - If `cv2.VideoCapture().isOpened()` returns False.\n    - If a `cv2.error` occurred while opening a `cv2.VideoCapture()`.\n    - For more details see:\n    https://docs.opencv.org/4.8.0/d8/dfe/classcv_1_1VideoCapture.html\n</code></pre> Source code in <code>videoxt/video.py</code> <pre><code>@contextmanager\ndef open_video_capture(filepath: Path) -&gt; Iterator[cv2.VideoCapture]:\n    \"\"\"\n    Context manager for opening a video file with `cv2.VideoCapture`.\n\n    Usage:\n    -----\n    ```python\n    &gt;&gt;&gt; from videoxt.video import open_video_capture\n    &gt;&gt;&gt; with open_video_capture('path/to/video.mp4') as opencap:\n    ...     # do something with 'opencap'\n    ...     type(opencap)\n    &lt;class 'cv2.VideoCapture'&gt;\n    ```\n\n    Args:\n    -----\n        `filepath` (Path): Path to the video file.\n\n    Yields:\n    -----\n        `cv2.VideoCapture`: An opened cv2 video capture.\n\n    Raises:\n    -----\n        - `ClosedVideoCaptureError`:\n            - If `cv2.VideoCapture().isOpened()` returns False.\n            - If a `cv2.error` occurred while opening a `cv2.VideoCapture()`.\n            - For more details see:\n            https://docs.opencv.org/4.8.0/d8/dfe/classcv_1_1VideoCapture.html\n    \"\"\"\n    try:\n        video_capture = cv2.VideoCapture(str(filepath))\n        if not video_capture.isOpened():\n            raise ClosedVideoCaptureError(\n                \"Unable to open the video file or maintain it in an open state. Please \"\n                \"check the file.\\ncv2.VideoCapture().isOpened() returned False.\"\n            )\n\n    except cv2.error as err:\n        raise ClosedVideoCaptureError(\n            \"A cv2.error occurred while opening a cv2.VideoCapture(). \"\n            f\"Please check the file, got {filepath!r}\"\n        ) from err\n\n    else:\n        yield video_capture\n\n    finally:\n        try:\n            video_capture.release()\n        except UnboundLocalError:\n            pass  # Ctrl+C keyboard interrupt\n</code></pre>"}]}